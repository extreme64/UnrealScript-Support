/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportantFilesVisual.java
 *
 * Created on 23/04/2011, 1:43:54 PM
 */

package org.unrealscriptsupport.unrealmutatorproject.options;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import org.openide.util.Exceptions;
import org.openide.util.NbPreferences;
import org.unrealscriptsupport.options.global.UnrealScriptToolsPanel;
import org.unrealscriptsupport.unrealmutatorproject.UnrealMutatorProject;

/**
 *
 * @author jacqui
 */
public class BuildJPanel
        extends OptionPanel {

    public static final String PATH_SEPARATOR = System.getProperty("file.separator");
    public static final String DELIM = "\\.";
    public static final boolean DEBUG = true;

    private UnrealMutatorProject project;
    private String prefsFileName;
    private Properties projectPrefs;

    /** Creates new form ImportantFilesVisual */
    public BuildJPanel(UnrealMutatorProject project) {
        this.project = project;
        this.prefsFileName = project.getProjectDirectory().getPath() +
                    "/nbproject/project.properties";
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        toolCollectionComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        defaultDirRadioButton = new javax.swing.JRadioButton();
        defaultDirTextField = new javax.swing.JTextField();
        userDirRadioButton = new javax.swing.JRadioButton();
        userDirTextField = new javax.swing.JTextField();
        toolCollectionErrorLabel = new javax.swing.JLabel();

        jLabel1.setLabelFor(toolCollectionComboBox);
        jLabel1.setText(org.openide.util.NbBundle.getMessage(BuildJPanel.class, "BuildJPanel.jLabel1.text")); // NOI18N

        toolCollectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2" }));
        toolCollectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolCollectionComboBoxActionPerformed(evt);
            }
        });

        jTextPane1.setEditable(false);
        jTextPane1.setText(org.openide.util.NbBundle.getMessage(BuildJPanel.class, "BuildJPanel.jTextPane1.text")); // NOI18N
        jScrollPane1.setViewportView(jTextPane1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(BuildJPanel.class, "BuildJPanel.jPanel1.border.title"))); // NOI18N

        buttonGroup1.add(defaultDirRadioButton);
        defaultDirRadioButton.setSelected(true);
        defaultDirRadioButton.setText(org.openide.util.NbBundle.getMessage(BuildJPanel.class, "BuildJPanel.defaultDirRadioButton.text")); // NOI18N
        defaultDirRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultDirRadioButtonActionPerformed(evt);
            }
        });

        defaultDirTextField.setEditable(false);
        defaultDirTextField.setText(org.openide.util.NbBundle.getMessage(BuildJPanel.class, "BuildJPanel.defaultDirTextField.text")); // NOI18N

        buttonGroup1.add(userDirRadioButton);
        userDirRadioButton.setText(org.openide.util.NbBundle.getMessage(BuildJPanel.class, "BuildJPanel.userDirRadioButton.text")); // NOI18N
        userDirRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userDirRadioButtonActionPerformed(evt);
            }
        });

        userDirTextField.setText(org.openide.util.NbBundle.getMessage(BuildJPanel.class, "BuildJPanel.userDirTextField.text")); // NOI18N
        userDirTextField.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(userDirTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(defaultDirRadioButton, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userDirRadioButton, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(defaultDirTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(defaultDirRadioButton)
                .addGap(1, 1, 1)
                .addComponent(defaultDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userDirRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        toolCollectionErrorLabel.setForeground(new java.awt.Color(255, 0, 0));
        toolCollectionErrorLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/unrealscriptsupport/resources/error.png"))); // NOI18N
        toolCollectionErrorLabel.setText(org.openide.util.NbBundle.getMessage(BuildJPanel.class, "BuildJPanel.toolCollectionErrorLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toolCollectionErrorLabel)
                            .addComponent(toolCollectionComboBox, 0, 309, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(toolCollectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toolCollectionErrorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void defaultDirRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultDirRadioButtonActionPerformed

        // Enable/disable
        toggleTextField();
        return;
    }//GEN-LAST:event_defaultDirRadioButtonActionPerformed

    private void userDirRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userDirRadioButtonActionPerformed

        // Enable/disable
        toggleTextField();
        return;
    }//GEN-LAST:event_userDirRadioButtonActionPerformed

    private void toolCollectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolCollectionComboBoxActionPerformed

        // Check if something is selected or not
        toggleErrorLabel();

        // Reload default dir for tool collection
        if (toolCollectionComboBox.getSelectedIndex() >= 0) {
            String collectionName = (String) toolCollectionComboBox.getSelectedItem();
            if (collectionName != null) {
                defaultDirTextField.setText(loadDefaultDir(collectionName));
            }
            else {
                defaultDirTextField.setText("?");
            }
        }
        else {
            defaultDirTextField.setText("?");
        }

        return;
    }//GEN-LAST:event_toolCollectionComboBoxActionPerformed

    private void toggleTextField() {
        defaultDirTextField.setEnabled(defaultDirRadioButton.isSelected());
        userDirTextField.setEnabled(userDirRadioButton.isSelected());
        return;
    }

    private void toggleErrorLabel() {
        if (toolCollectionComboBox.getModel().getSelectedItem() != null) {
            toolCollectionErrorLabel.setVisible(false);
        }
        else {
            toolCollectionErrorLabel.setVisible(true);
        }
        return;
    }

    
    @Override
    public void load() {
        loadProjectPrefs();
        applyProjectPrefs();
        return;
    }

    @Override
    public void save() {
        write();
        return;
    }

    private void loadProjectPrefs() {
        projectPrefs = new Properties();

        try {
            projectPrefs.load(new FileInputStream(prefsFileName));
        }
        catch (FileNotFoundException ex) {
            if (DEBUG) {
                Exceptions.printStackTrace(ex);
            }
        }
        catch (IOException ex) {
            if (DEBUG) {
                Exceptions.printStackTrace(ex);
            }
        }

        return;
    }

    private boolean loadUseDefaultDir() {
        String useDefault = projectPrefs.getProperty("project.use_default");
        if (useDefault != null) {
            return useDefault.equalsIgnoreCase("true");
        }
        // Use default dir by default
        return true;
    }

    private String getDefaultRootDir(String collectionName) {
        String prefName = collectionName + ".compiler.basedir";
        String dirName = loadGlobalPref(prefName, "?");

        return dirName;
    }

    private String loadDefaultProjectDir() {
        String projectName = projectPrefs.getProperty("project.name");
        String projectDir = projectName + "-build";
        String projectBuildName = PATH_SEPARATOR + projectDir;

        return projectBuildName;
    }

    private String loadDefaultDir(String collectionName) {
        return getDefaultRootDir(collectionName) + loadDefaultProjectDir();
    }

    private String loadUserDir(String collectionName) {
        String pref = projectPrefs.getProperty("project.user_output_dir");
        if (pref == null) {
            pref = getDefaultRootDir(collectionName);
        }
        return pref;
    }

    private String loadGlobalPref(String name, String defaultValue) {
        return NbPreferences.forModule(UnrealScriptToolsPanel.class)
                .get(name, defaultValue);
    }

    private void applyProjectPrefs() {

        // - Set tool collection
        loadToolCollection();

        // - Set radio button
        if (loadUseDefaultDir()) {
            buttonGroup1.setSelected(defaultDirRadioButton.getModel(), true);
            defaultDirTextField.setEnabled(true);
            userDirTextField.setEnabled(false);
        }
        else {
            buttonGroup1.setSelected(userDirRadioButton.getModel(), true);
            defaultDirTextField.setEnabled(false);
            userDirTextField.setEnabled(true);
        }

        // - Set directories
        String collectionName = projectPrefs.getProperty("project.collection");
        if (collectionName != null) {
            defaultDirTextField.setText(loadDefaultDir(collectionName));
            userDirTextField.setText(loadUserDir(collectionName));
        }
        else {
            defaultDirTextField.setText("?");
            userDirTextField.setText(loadUserDir("?"));
        }

        return;
    }

    /**
     * Add tool collections to drop down list.
     * @return
     */
    private void loadToolCollection() {

        // - Load collection names
        final Preferences prefs = NbPreferences.forModule(UnrealScriptToolsPanel.class);

        List<String> namesList = new ArrayList<String>();

        try {
            final String[] prefsNames = prefs.keys();

            for (int i = 0; i < prefsNames.length; ++i) {

                // Read property
                // eg. KillingFloor.compiler.args=make
                String name = prefsNames[i];
                String[] propsNames = name.split(DELIM);

                // Add new collection
                // eg. KillingFloor
                if (!namesList.contains(propsNames[0])) {
                    namesList.add(propsNames[0]);
                }
            }
        }
        catch (BackingStoreException ex) {
            if (DEBUG) {
                Exceptions.printStackTrace(ex);
            }
        }

        // - Add names to combo box
        ComboBoxModel model = new ToolModel(namesList);
        toolCollectionComboBox.setModel(model);

        // - Select name in combo box
        String currentCollection = projectPrefs.getProperty("project.collection");
        // Found name
        /*if (currentCollection != null) {
            // Name matches one in combo box
            for (int i = 0; i < model.getSize(); ++i) {
                if (currentCollection.equals(model.getElementAt(i))) {
                    toolCollectionComboBox.setSelectedIndex(i);
                    break;
                }
            }
        }*/
        // Select item in list
        // Or clear selection if it's null
        toolCollectionComboBox.setSelectedItem(currentCollection);

        // Check if something is selected or not
        toggleErrorLabel();

        return;
    }

    private void write() {

        // - Tool collection
        String collection = (String) toolCollectionComboBox.getSelectedItem();
        if (collection == null) {
            collection = "";
        }
        projectPrefs.setProperty("project.collection", collection);
        
        // - Using default dir
        boolean useDefault = defaultDirRadioButton.isSelected();
        projectPrefs.setProperty("project.use_default",
                                 String.valueOf(useDefault));

        // - User dir
        projectPrefs.setProperty("project.user_output_dir",
                                 userDirTextField.getText());
        try {
            projectPrefs.store(new FileOutputStream(prefsFileName), "");
        } catch (IOException ex) {
            if (DEBUG) {
                Exceptions.printStackTrace(ex);
            }
        }

        return;
    }

    private class ToolModel extends AbstractListModel implements ComboBoxModel {

        private final List<String> elements;
        private int selection = -1;

        public ToolModel(List<String> elements) {
            this.elements = elements;
            Collections.sort(elements);
        }

        @Override
        public void setSelectedItem(Object anItem) {

            boolean found = false;
            if (anItem instanceof String) {
                int i = Collections.binarySearch(elements, (String) anItem);
                
                // Found
                if (i >= 0) {
                    selection = i;
                    found = true;
                }
            }
            
            if (!found) {
                selection = -1;
            }

            return;
        }

        @Override
        public Object getSelectedItem() {

            String item = null;
            if (selection >= 0) {
                item = elements.get(selection);
            }

            return item;
        }

        @Override
        public int getSize() {
            return elements.size();
        }

        @Override
        public Object getElementAt(int index) {
            return elements.get(index);
        }
    };

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton defaultDirRadioButton;
    private javax.swing.JTextField defaultDirTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JComboBox toolCollectionComboBox;
    private javax.swing.JLabel toolCollectionErrorLabel;
    private javax.swing.JRadioButton userDirRadioButton;
    private javax.swing.JTextField userDirTextField;
    // End of variables declaration//GEN-END:variables

}
