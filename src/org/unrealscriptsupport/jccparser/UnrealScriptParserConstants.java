/* Generated By:JavaCC: Do not edit this line. UnrealScriptParserConstants.java */
package org.unrealscriptsupport.jccparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface UnrealScriptParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int JAVADOC_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int STRING_LITERAL = 11;
  /** RegularExpression Id. */
  int NAME_LITERAL = 14;
  /** RegularExpression Id. */
  int ABSTRACT = 15;
  /** RegularExpression Id. */
  int ARRAY = 16;
  /** RegularExpression Id. */
  int AUTO = 17;
  /** RegularExpression Id. */
  int BEGIN = 18;
  /** RegularExpression Id. */
  int BOOLEAN = 19;
  /** RegularExpression Id. */
  int BREAK = 20;
  /** RegularExpression Id. */
  int BYTE = 21;
  /** RegularExpression Id. */
  int CACHEEXEMPT = 22;
  /** RegularExpression Id. */
  int CASE = 23;
  /** RegularExpression Id. */
  int CLASS = 24;
  /** RegularExpression Id. */
  int CLOCKWISEFROM = 25;
  /** RegularExpression Id. */
  int COERCE = 26;
  /** RegularExpression Id. */
  int COLLAPSECATEGORIES = 27;
  /** RegularExpression Id. */
  int CONFIG = 28;
  /** RegularExpression Id. */
  int CONST = 29;
  /** RegularExpression Id. */
  int CONTINUE = 30;
  /** RegularExpression Id. */
  int CROSS = 31;
  /** RegularExpression Id. */
  int _DEFAULT = 32;
  /** RegularExpression Id. */
  int _DEFAULTPROPERTIES = 33;
  /** RegularExpression Id. */
  int DELEGATE = 34;
  /** RegularExpression Id. */
  int DEPENDSON = 35;
  /** RegularExpression Id. */
  int DEPRECATED = 36;
  /** RegularExpression Id. */
  int DO = 37;
  /** RegularExpression Id. */
  int DONTCOLLAPSECATEGORIES = 38;
  /** RegularExpression Id. */
  int DOTPRODUCT = 39;
  /** RegularExpression Id. */
  int EDFINDABLE = 40;
  /** RegularExpression Id. */
  int EDITCONST = 41;
  /** RegularExpression Id. */
  int EDITINLINE = 42;
  /** RegularExpression Id. */
  int EDITINLINENEW = 43;
  /** RegularExpression Id. */
  int EDITINLINEUSE = 44;
  /** RegularExpression Id. */
  int ELSE = 45;
  /** RegularExpression Id. */
  int END = 46;
  /** RegularExpression Id. */
  int ENUM = 47;
  /** RegularExpression Id. */
  int EVENT = 48;
  /** RegularExpression Id. */
  int EXEC = 49;
  /** RegularExpression Id. */
  int EXPORT = 50;
  /** RegularExpression Id. */
  int EXPORTSTRUCTS = 51;
  /** RegularExpression Id. */
  int EXTENDS = 52;
  /** RegularExpression Id. */
  int FALSE = 53;
  /** RegularExpression Id. */
  int FINAL = 54;
  /** RegularExpression Id. */
  int FLOAT = 55;
  /** RegularExpression Id. */
  int FOR = 56;
  /** RegularExpression Id. */
  int FOREACH = 57;
  /** RegularExpression Id. */
  int FUNCTION = 58;
  /** RegularExpression Id. */
  int GLOBAL = 59;
  /** RegularExpression Id. */
  int GLOBALCONFIG = 60;
  /** RegularExpression Id. */
  int GOTO = 61;
  /** RegularExpression Id. */
  int GUID = 62;
  /** RegularExpression Id. */
  int HIDECATEGORIES = 63;
  /** RegularExpression Id. */
  int HIDEDROPDOWN = 64;
  /** RegularExpression Id. */
  int IF = 65;
  /** RegularExpression Id. */
  int IGNORES = 66;
  /** RegularExpression Id. */
  int INPUT = 67;
  /** RegularExpression Id. */
  int INSTANCED = 68;
  /** RegularExpression Id. */
  int INT = 69;
  /** RegularExpression Id. */
  int ITERATOR = 70;
  /** RegularExpression Id. */
  int LATENT = 71;
  /** RegularExpression Id. */
  int LOCAL = 72;
  /** RegularExpression Id. */
  int LOCALIZED = 73;
  /** RegularExpression Id. */
  int NAME = 74;
  /** RegularExpression Id. */
  int NATIVE = 75;
  /** RegularExpression Id. */
  int NATIVEREPLICATION = 76;
  /** RegularExpression Id. */
  int NEW = 77;
  /** RegularExpression Id. */
  int NOEDITINLINEW = 78;
  /** RegularExpression Id. */
  int NOEXPORT = 79;
  /** RegularExpression Id. */
  int NONE = 80;
  /** RegularExpression Id. */
  int NOTPLACEABLE = 81;
  /** RegularExpression Id. */
  int OBJECT = 82;
  /** RegularExpression Id. */
  int OPERATOR = 83;
  /** RegularExpression Id. */
  int OPTIONAL = 84;
  /** RegularExpression Id. */
  int OUT = 85;
  /** RegularExpression Id. */
  int PACKAGE = 86;
  /** RegularExpression Id. */
  int PEROBJECTCONFIG = 87;
  /** RegularExpression Id. */
  int PLACEABLE = 88;
  /** RegularExpression Id. */
  int POSTOPERATOR = 89;
  /** RegularExpression Id. */
  int PREOPERATOR = 90;
  /** RegularExpression Id. */
  int PRIVATE = 91;
  /** RegularExpression Id. */
  int PROTECTED = 92;
  /** RegularExpression Id. */
  int PUBLIC = 93;
  /** RegularExpression Id. */
  int RELIABLE = 94;
  /** RegularExpression Id. */
  int REPLICATION = 95;
  /** RegularExpression Id. */
  int RETURN = 96;
  /** RegularExpression Id. */
  int SAFEREPLACE = 97;
  /** RegularExpression Id. */
  int SHOWCATEGORIES = 98;
  /** RegularExpression Id. */
  int SIMULATED = 99;
  /** RegularExpression Id. */
  int SINGULAR = 100;
  /** RegularExpression Id. */
  int STATE = 101;
  /** RegularExpression Id. */
  int STATIC = 102;
  /** RegularExpression Id. */
  int STRING = 103;
  /** RegularExpression Id. */
  int STRUCT = 104;
  /** RegularExpression Id. */
  int STRUCTDEFAULTPROPERTIES = 105;
  /** RegularExpression Id. */
  int SUPER = 106;
  /** RegularExpression Id. */
  int SWITCH = 107;
  /** RegularExpression Id. */
  int TRANSIENT = 108;
  /** RegularExpression Id. */
  int TRAVEL = 109;
  /** RegularExpression Id. */
  int TRUE = 110;
  /** RegularExpression Id. */
  int UNRELIABLE = 111;
  /** RegularExpression Id. */
  int UNTIL = 112;
  /** RegularExpression Id. */
  int VAR = 113;
  /** RegularExpression Id. */
  int VOID = 114;
  /** RegularExpression Id. */
  int WITHIN = 115;
  /** RegularExpression Id. */
  int WHILE = 116;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 117;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 118;
  /** RegularExpression Id. */
  int HEX_LITERAL = 119;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 120;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 121;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 122;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 123;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 124;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 125;
  /** RegularExpression Id. */
  int IDENTIFIER = 126;
  /** RegularExpression Id. */
  int LETTER = 127;
  /** RegularExpression Id. */
  int PART_LETTER = 128;
  /** RegularExpression Id. */
  int LPAREN = 129;
  /** RegularExpression Id. */
  int RPAREN = 130;
  /** RegularExpression Id. */
  int LBRACE = 131;
  /** RegularExpression Id. */
  int RBRACE = 132;
  /** RegularExpression Id. */
  int LBRACKET = 133;
  /** RegularExpression Id. */
  int RBRACKET = 134;
  /** RegularExpression Id. */
  int SEMICOLON = 135;
  /** RegularExpression Id. */
  int COMMA = 136;
  /** RegularExpression Id. */
  int DOT = 137;
  /** RegularExpression Id. */
  int ASSIGN = 138;
  /** RegularExpression Id. */
  int AT = 139;
  /** RegularExpression Id. */
  int DOLLARS = 140;
  /** RegularExpression Id. */
  int LT = 141;
  /** RegularExpression Id. */
  int BANG = 142;
  /** RegularExpression Id. */
  int TILDE = 143;
  /** RegularExpression Id. */
  int HOOK = 144;
  /** RegularExpression Id. */
  int COLON = 145;
  /** RegularExpression Id. */
  int EQ = 146;
  /** RegularExpression Id. */
  int LE = 147;
  /** RegularExpression Id. */
  int GE = 148;
  /** RegularExpression Id. */
  int NE = 149;
  /** RegularExpression Id. */
  int SC_OR = 150;
  /** RegularExpression Id. */
  int SC_AND = 151;
  /** RegularExpression Id. */
  int INCR = 152;
  /** RegularExpression Id. */
  int DECR = 153;
  /** RegularExpression Id. */
  int PLUS = 154;
  /** RegularExpression Id. */
  int MINUS = 155;
  /** RegularExpression Id. */
  int STAR = 156;
  /** RegularExpression Id. */
  int SLASH = 157;
  /** RegularExpression Id. */
  int BIT_AND = 158;
  /** RegularExpression Id. */
  int BIT_OR = 159;
  /** RegularExpression Id. */
  int XOR = 160;
  /** RegularExpression Id. */
  int REM = 161;
  /** RegularExpression Id. */
  int LSHIFT = 162;
  /** RegularExpression Id. */
  int EXPONENT = 163;
  /** RegularExpression Id. */
  int ATASSIGN = 164;
  /** RegularExpression Id. */
  int DOLLARSASSIGN = 165;
  /** RegularExpression Id. */
  int PLUSASSIGN = 166;
  /** RegularExpression Id. */
  int MINUSASSIGN = 167;
  /** RegularExpression Id. */
  int STARASSIGN = 168;
  /** RegularExpression Id. */
  int SLASHASSIGN = 169;
  /** RegularExpression Id. */
  int ANDASSIGN = 170;
  /** RegularExpression Id. */
  int ORASSIGN = 171;
  /** RegularExpression Id. */
  int XORASSIGN = 172;
  /** RegularExpression Id. */
  int REMASSIGN = 173;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 174;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 175;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 176;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 177;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 178;
  /** RegularExpression Id. */
  int GT = 179;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_JAVADOC_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_STRING_LITERAL = 3;
  /** Lexical state. */
  int IN_NAME_LITERAL = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<token of kind 2>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 7>",
    "<token of kind 8>",
    "\"\\\"\"",
    "<token of kind 10>",
    "\"\\\"\"",
    "\"\\\'\"",
    "<token of kind 13>",
    "\"\\\'\"",
    "\"abstract\"",
    "\"array\"",
    "\"auto\"",
    "\"begin\"",
    "\"bool\"",
    "\"break\"",
    "\"byte\"",
    "\"cacheexempt\"",
    "\"case\"",
    "\"class\"",
    "\"clockwisefrom\"",
    "\"coerce\"",
    "\"collapsecategories\"",
    "\"config\"",
    "\"const\"",
    "\"continue\"",
    "\"cross\"",
    "\"default\"",
    "\"defaultproperties\"",
    "\"delegate\"",
    "\"dependsOn\"",
    "\"deprecated\"",
    "\"do\"",
    "\"dontcollapsecategories\"",
    "\"dot\"",
    "\"edfindable\"",
    "\"editconst\"",
    "\"editinline\"",
    "\"editinlinenew\"",
    "\"editinlineuse\"",
    "\"else\"",
    "\"end\"",
    "\"enum\"",
    "\"event\"",
    "\"exec\"",
    "\"export\"",
    "\"exportstructs\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"float\"",
    "\"for\"",
    "\"foreach\"",
    "\"function\"",
    "\"global\"",
    "\"globalconfig\"",
    "\"goto\"",
    "\"guid\"",
    "\"hidecategories\"",
    "\"hidedropdown\"",
    "\"if\"",
    "\"ignores\"",
    "\"input\"",
    "\"instanced\"",
    "\"int\"",
    "\"iterator\"",
    "\"latent\"",
    "\"local\"",
    "\"localized\"",
    "\"name\"",
    "\"native\"",
    "\"nativereplication\"",
    "\"new\"",
    "\"noteditinlinenew\"",
    "\"noexport\"",
    "\"none\"",
    "\"notplaceable\"",
    "\"object\"",
    "\"operator\"",
    "\"optional\"",
    "\"out\"",
    "\"package\"",
    "\"perobjectconfig\"",
    "\"placeable\"",
    "\"postoperator\"",
    "\"preoperator\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"reliable\"",
    "\"replication\"",
    "\"return\"",
    "\"safereplace\"",
    "\"showcategories\"",
    "\"simulated\"",
    "\"singular\"",
    "\"state\"",
    "\"static\"",
    "\"string\"",
    "\"struct\"",
    "\"structdefaultproperties\"",
    "\"super\"",
    "\"switch\"",
    "\"transient\"",
    "\"travel\"",
    "\"true\"",
    "\"unreliable\"",
    "\"until\"",
    "\"var\"",
    "\"void\"",
    "\"within\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"@\"",
    "\"$\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"**\"",
    "\"@=\"",
    "\"$=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"^^\"",
    "\"~=\"",
    "\"#\"",
    "\"\\\\\"",
    "\"`\"",
    "\"?-\"",
  };

}
