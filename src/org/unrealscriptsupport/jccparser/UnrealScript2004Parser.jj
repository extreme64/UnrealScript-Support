/**
 * @author Jacqui Hawkins
 * @date 2011
 * @licence CDDL Licence, Version 1.0
 *
 * Reference:
 * JavaCC Examples
 * http://wiki.beyondunreal.com/Legacy:UnrealScript_Grammar
 * http://udn.epicgames.com/Two/UnrealScriptReference.html
 */

/*
 * Based on JavaCC Example Java1.5.jj
 * 
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  STATIC = false;
  SANITY_CHECK = true;
  BUILD_PARSER = true;
  IGNORE_CASE = true;
}

PARSER_BEGIN(UnrealScriptParser)

package org.unrealscriptsupport.jccparser;
import java.io.*;
import java.util.*;
/**
 * Grammar to parse UnrealScript from Unreal Tournament 2004.
 * Based on:
 * Grammar to parse Java version 1.5
 * by Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class UnrealScriptParser
{
    public static final String PARSER_NAME = "UnrealScript Parser";
    public static final float VERSION = 1.0f;
    public static final String PARSER_INFO =
        PARSER_NAME + " Version " + VERSION + ": ";

    public List<ParseException> syntaxErrors = new ArrayList<ParseException> ();

    /**
     * Add to error list and step back to a recovery point.
     */
    void recover(ParseException ex, int recoveryPoint) {

        syntaxErrors.add(ex);
        Token t = getNextToken();

        // (t.kind != recoveryPoint)
        // Backtrack until the recoveryPoint token is found
        // eg. a semicolon

        // (t.next != null)
        // If the recoveryPoint does not exist,
        // then stop it backtracking forever
        while ( (t.next != null) &&
                (t.kind != recoveryPoint) ) {
            t = getNextToken();
        }
    }

    public UnrealScriptParser(String fileName)
    {
        this(System.in);
        try {
            ReInit(new FileInputStream(new File(fileName)));
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String args[]) {

        UnrealScriptParser parser;

        if (args.length == 0) {

            System.out.println(PARSER_INFO +
                               "Reading from standard input . . .");
            parser = new UnrealScriptParser(System.in);
        }
        else if (args.length == 1) {
            System.out.println(PARSER_INFO +
                               "Reading from file " + args[0] + " . . .");

            try {
                parser = new UnrealScriptParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e) {
                System.out.println(PARSER_INFO +
                                   "File " + args[0] + " not found.");
                return;
            }
        }
        else {
            System.out.println(PARSER_INFO + "Usage is one of:");
            System.out.println("         java UnrealScriptParser < inputfile");
            System.out.println("OR");
            System.out.println("         java UnrealScriptParser inputfile");
            return;
        }
        try {
            parser.CompilationUnit();
            System.out.println(PARSER_INFO +
                               "UnrealScript program parsed successfully.");
        }
        catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println(PARSER_INFO +
                               "Encountered errors during parse.");
        }
    }

}

PARSER_END(UnrealScriptParser)

/* WHITE SPACE */

SKIP :
{
  < WHITESPACE:
  " "
| "\t"
| "\n"
| "\r"
| "\f">
}


/* COMMENTS */

// Start of Javadoc or multi-line comment
MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_JAVADOC_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

// Single line comment
SKIP :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

// Compiler directives
SKIP :
{
  <COMPILER_DIRECTIVE: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

// Preprocessor
SKIP :
{
  <PREPROCESSOR_DIRECTIVE: "`" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

// End of Javadoc comment
<IN_JAVADOC_COMMENT>
SKIP :
{
  <JAVADOC_COMMENT: "*/"> : DEFAULT
}

// End of multi-line comment
<IN_MULTI_LINE_COMMENT>
SKIP :
{
  <MULTI_LINE_COMMENT: "*/"> : DEFAULT
}

// Inside Javadoc or multi-line comment
<IN_MULTI_LINE_COMMENT>
SKIP :
{
  < ~[] >
}

// Inside Javadoc comment
<IN_JAVADOC_COMMENT>
SKIP :
{
  < ~[] >
}

// Start of string literal
MORE :
{
    "\"" : IN_STRING_LITERAL
}

// Inside string literal
<IN_STRING_LITERAL>
SKIP :
{
    <
    // Nested quotes \"
    "\\\"" |

    // Escaped escape \
    // Problem with "\\"
    ("\\" ~["\""]) |

    // Anything else
    ~["\"", "\\"]
    >
}

// End of string literal
<IN_STRING_LITERAL>
TOKEN :
{
    <STRING_LITERAL: "\"" > : DEFAULT
}

// Start of name literal
MORE :
{
    "\'" : IN_NAME_LITERAL
}

// Inside name literal
<IN_NAME_LITERAL>
SKIP :
{
    < ~["\'"] >
}

// End of name literal
<IN_NAME_LITERAL>
TOKEN :
{
    <NAME_LITERAL: "\'"> : DEFAULT
}

// Start of cpptext
MORE :
{
    < "cpptext" (<WHITESPACE>)* "{" > : IN_CPPCODE
    //"cpptext" : IN_CPPCODE
    //"cpptext{" : IN_CPPCODE
}

// Inside C++ code
<IN_CPPCODE>
SKIP :
{
    //< ~["}"] >
    <
    // Nested braces
    ("{" (~["}"])* "}") |

    // End brace
    ~["}"]
    >
}

// End of C++ code
<IN_CPPCODE>
SKIP :
{
    <CPPCODE: "}" > : DEFAULT
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ALLOWABSTRACT: "allowabstract" >
| < ARRAY: "array" >
| < AUTO: "auto" >
| < BEGIN: "begin" >
| < BOOLEAN: "bool" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CACHE: "cache" >
| < CACHEEXEMPT: "cacheexempt" >
| < CASE: "case" >
| < CLASS: "class" >
| < CLOCKWISEFROM: "clockwisefrom" >
| < COERCE: "coerce" >
| < COLLAPSECATEGORIES: "collapsecategories" >
| < CONFIG: "config" >
| < CONST: "const" >
| < CONTINUE: "continue" >
//| < CPPTEXT: "cpptext" >
| < CROSS: "cross" >
| < DATABINDING: "databinding" >
| < _DEFAULT: "default" >
| < _DEFAULTPROPERTIES: "defaultproperties" >
| < DELEGATE: "delegate" >
| < DEPENDSON: "dependson" >
| < DEPRECATED: "deprecated" >
| < DO: "do" >
| < DONTCOLLAPSECATEGORIES: "dontcollapsecategories" >
| < DOTPRODUCT: "dot" >
| < DUPLICATETRANSIENT: "duplicatetransient" >
| < EDFINDABLE: "edfindable" >
| < EDITCONST: "editconst" >
| < EDITCONSTARRAY: "editconstarray" >
| < EDITFIXEDSIZE: "editfixedsize" >
| < EDITINLINE: "editinline" >
| < EDITINLINENEW: "editinlinenew" >
| < EDITINLINEUSE: "editinlineuse" >
| < EDITORONLY: "editoronly" >
| < ELSE: "else" >
| < END: "end" >
| < ENUM: "enum" >
| < EVENT: "event" >
| < EXEC: "exec" >
| < EXPORT: "export" >
| < EXPORTSTRUCTS: "exportstructs" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FOREACH: "foreach" >
| < FUNCTION: "function" >
| < GLOBAL: "global" >
| < GLOBALCONFIG: "globalconfig" >
| < GOTO: "goto" >
| < GUID: "guid" >
| < HIDECATEGORIES: "hidecategories" >
| < HIDEDROPDOWN: "hidedropdown" >
| < IF: "if" >
| < IGNORES: "ignores" >
| < INIT: "init" >
| < INPUT: "input" >
| < INSTANCED: "instanced" >
| < INT: "int" >
| < INTERP: "interp" >
| < ITERATOR: "iterator" >
| < LATENT: "latent" >
| < LOCAL: "local" >
| < LOCALIZED: "localized" >
| < NAME: "name" >
| < NATIVE: "native" >
| < NATIVEREPLICATION: "nativereplication" >
| < NEW: "new" >
| < NOCLEAR: "noclear" >
| < NOEDITINLINEW: "noteditinlinenew">
| < NOEXPORT: "noexport">
| < NOIMPORT: "noimport">
| < NONE: "none" >
| < NONTRANSACTIONAL: "nontransactional" >
| < NOTFORCONSOLE: "notforconsole">
| < NOTPLACEABLE: "notplaceable">
| < OBJECT: "object">
| < OPERATOR: "operator">
| < OPTIONAL: "optional">
| < OUT: "out">
| < PACKAGE: "package">
| < PEROBJECTCONFIG: "perobjectconfig">
| < PLACEABLE: "placeable">
| < POINTER: "pointer" >
| < POSTOPERATOR: "postoperator" >
| < PREOPERATOR: "preoperator" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RELIABLE: "reliable" >
| < REPLICATION: "replication" >
| < REPNOTIFY: "repnotify" >
| < REPRETRY: "repretry" >
| < RETURN: "return" >
| < SAFEREPLACE: "safereplace" >
| < SHOWCATEGORIES: "showcategories" >
| < SIMULATED: "simulated" >
| < SINGULAR: "singular" >
| < _SKIP: "skip" >
| < STATE: "state" >
| < STATIC: "static" >
| < STRING: "string" >
| < STRUCT: "struct" >
| < STRUCTDEFAULTPROPERTIES: "structdefaultproperties" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < TRANSIENT: "transient" >
| < TRAVEL: "travel" >
| < TRUE: "true" >
| < UNRELIABLE: "unreliable" >
| < UNTIL: "until" >
| < VAR: "var" >
| < VIRTUAL: "virtual" >
| < VOID: "void" >
| < WITHIN: "within" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
/*|
  < NAME_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >*/
}

/* IDENTIFIERS */
TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         //"$",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06fa"-"\u06fc",
         "\u0710",
         "\u0712"-"\u072c",
         "\u0780"-"\u07a5",
         "\u0905"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17b3",
         "\u17db",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         //"$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u034e",
         "\u0360"-"\u0362",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u0655",
         "\u0660"-"\u0669",
         "\u0670"-"\u06d3",
         "\u06d5"-"\u06dc",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06ed",
         "\u06f0"-"\u06fc",
         "\u070f"-"\u072c",
         "\u0730"-"\u074a",
         "\u0780"-"\u07b0",
         "\u0901"-"\u0903",
         "\u0905"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc",
         "\u09be"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a02",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0",
         "\u0ae6"-"\u0aef",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbe"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17d3",
         "\u17db",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180e",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u206a"-"\u206f",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u3099"-"\u309a",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < AT: "@" >
| < DOLLARS: "$" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < EXPONENT: "**" >
| < ATASSIGN: "@=" >
| < DOLLARSASSIGN: "$=" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
// Might be used as custom operators?
//| < BACKSLASH: "\\">
//| < HOOKDASH: "?-">
| < DOUBLEHOOK: "??" >
| < DASHASSIGNDASH: "-=-" >

// Skipped for now
// Compiler directives
//| < HASH: "#">
// Preprocessor
//| < BACKQUOTE: "`">
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  //{
  //   matchedToken = Token.newToken(RUNSIGNEDSHIFT, ">>>");
  //   input_stream.backup(2);

     /*throw new RuntimeException("RUNSIGNEDSHIFT" +
                       " image: " + image.toString() +
                       " line: " + input_stream.line +
                       " column: " + input_stream.column +
                       " matchedToken.kind: " + matchedToken.kind +
                       " matchedToken.image: " + matchedToken.image +
                       " realKind: " + ((Token.GTToken)matchedToken).realKind);*/
  //}
| < RSIGNEDSHIFT: ">>" >
  //{
  //  matchedToken = Token.newToken(RSIGNEDSHIFT, ">>");
  //  input_stream.backup(1);

    /*throw new RuntimeException("RSIGNEDSHIFT" +
                       " image: " + image.toString() +
                       " line: " + input_stream.line +
                       " column: " + input_stream.column +
                       " matchedToken.kind: " + matchedToken.kind +
                       " matchedToken.image: " + matchedToken.image +
                       " realKind: " + ((Token.GTToken)matchedToken).realKind);*/
  //}
| < GT: ">" >
}

/*************************************************
 * THE UNREALSCRIPT LANGUAGE GRAMMAR STARTS HERE *
 *************************************************/

/*
 * --- Non-Terminals.
 */

// PROGRAM = CLASSDECL
//                            ( DECLARATIONS )*
//                            ( REPLICATIONBLOCK )?
//                            BODY
//                            ( DEFAULTPROPERTIESBLOCK )?
void CompilationUnit():
{
}
{
    try {
        ClassDeclaration()
        Body()
        ( DefaultPropertiesBlock() )?

        // ?
        //( < "\u001a" > )?
        // Anything not yet matched
        ( <STUFF_TO_IGNORE: ~[]> )?
        // Everything must have been matched by EOF
        <EOF>
    }
    catch (ParseException ex) {
        //recover(ex, SEMICOLON);
        recover(ex, '\n');
    }
}

// CLASSDECL = class IDENTIFIER ( extends PACKAGEIDENTIFIER )?
//                            ( CLASSPARAMS )* SEMICOLON
void ClassDeclaration():
{
}
{
    "class" VarName() ("extends" PackageIdentifier())? (ClassParams())* ";"
}


// CLASSPARAMS = CONSTCLASSPARAMS | within PACKAGEIDENTIFIER |
//                            dependson LBRACK PACKAGEIDENTIFIER RBRACK |
//                            config ( LBRACK PACKAGEIDENTIFIER RBRACK )? |
//                            hidecategories LBRACK IDENTIFIERLIST RBRACK |
//                            showcategories LBRACK IDENTIFIERLIST RBRACK
void ClassParams():
{}
{
    (
    ConstClassParams() |
    ("within" PackageIdentifier()) |
    ("dependson" "(" PackageIdentifier() ")") |
    ("config" ( "(" PackageIdentifier() ")" )?) |
    ("hidecategories" "(" IdentifierList() ")") |
    ("showcategories" "(" IdentifierList() ")")
    )
}

// IDENTIFIERLIST = IDENTIFIER ( COMMA IDENTIFIER )*
void IdentifierList():
{}
{
    (<IDENTIFIER> | "object") ( "," (<IDENTIFIER> | "object") )*
}

// IDENTIFIER = ( ALPHA | UNDERSCORE ) ( ALPHA | UNDERSCORE | DIGIT )*
// See <IDENTIFIER> above

// packagename.classname or classname.structname
// PACKAGEIDENTIFIER = ( IDENTIFIER DOT )? IDENTIFIER
void PackageIdentifier():
{}
{
    VarName() PackageIdentifierEnd()
}

// Workaround for choice conflicts
// Lots of things start with <IDENTIFIER>
void PackageIdentifierEnd():
{}
{
    (LOOKAHEAD(".") "." VarName())?
}

void ClassIdentifierStart():
{}
{
    "class" <NAME_LITERAL> "."
}

// QUALIFIEDIDENTIFIER = ( ( class SQUOTE PACKAGEIDENTIFIER SQUOTE DOT default DOT IDENTIFIER )
//                            | ( ( IDENTIFIER DOT )* IDENTIFIER )
//                            )
void QualifiedIdentifier():
{}
{
    (LOOKAHEAD(ClassIdentifierStart())
     ClassIdentifierStart() QualifiedIdentifierStart())?
    IdDotId()
}

void QualifiedIdentifierStart():
{}
{
    ("default" | "const") "."
}

// FUNCCALL = ( ( class SQUOTE PACKAGEIDENTIFIER SQUOTE DOT static DOT )
//               | ( ( IDENTIFIER DOT )+ )
//               )?
//               IDENTIFIER LBRACK ( EXPR ( COMMA EXPR )* )? RBRACK
void FuncCall():
{}
{   
    (LOOKAHEAD(ClassIdentifierStart())
     ClassIdentifierStart() (LOOKAHEAD(FuncCallStart()) FuncCallStart())? )?
    IdDotId() FuncCallEnd()
}

void FuncCallStart():
{}
{
    "static" "."
}

// C = Spawn(P.ControllerClass,,,P.Location, P.Rotation);
void FuncCallEnd():
{}
{
    "(" (Expression())? ("," (Expression())?)* ")"
}

// Pawn(Owner).Weapon.OutOfAmmo()
// GetItemName(String(MoveTarget))
void FuncCallOrQualifiedIdentifier():
{}
{
    // "class'ClassName'." etc
    LOOKAHEAD(ClassNameIdStart()) ClassNameId() |
    // x.y.Class
    LOOKAHEAD(ClassId()) ClassId() |
    // Type cast - "(arg)" is required
    // Pawn(Owner).Weapon.OutOfAmmo() <- would also match IdDotIdFuncCallEndRep()
    // But (Owner) is not an expression, VarName() only, and only 1 arg allowed
    // class<name>(asdf) <- Would match this
    // class<Actor>(OptionalObject).static.GetLocalString(Switch, RelatedPRI_1, RelatedPRI_2);
    LOOKAHEAD(CastIdStart()) CastId() |
    //CastId()
    // x.y().z()
    //LOOKAHEAD(IdDotIdFuncCallEndRep()) IdDotIdFuncCallEndRep() //|
    IdDotIdFuncCallEndRep()
}

void ClassNameId():
{}
{
    ClassNameIdStart()
    // default, static or const?
    ( ( LOOKAHEAD(FuncCallStart() | QualifiedIdentifierStart())
        (FuncCallStart() | QualifiedIdentifierStart()) )?
    // x.y().z()
    IdDotIdFuncCallEndRep() )
}

void ClassNameIdStart():
{}
{
    ClassIdentifierStart()
}

void CastId():
{}
{
    CastIdStart() (LOOKAHEAD(".") "." IdDotIdFuncCallEndRep())?
}

void CastIdStart():
{}
{
    BasicTypeOrClassType() "(" VarName() ")"
}

void ClassId():
{}
{
    IdDotId() "." "class"
}

void IdDotIdFuncCallEndRep():
{}
{
    IdDotIdFuncCallEnd() (LOOKAHEAD(".") "." IdDotIdFuncCallEnd())*
}

void IdDotIdFuncCallEnd():
{}
{
    // "(arg1, arg2..)" is optional
    // var.func(arg)
    // var.var
    IdDotId() (LOOKAHEAD("(") FuncCallEnd())?
    //( IdDotId() (LOOKAHEAD("class" | "(")("class" | FuncCallEnd()))? )
}

// testPawnArray[1].Weapon.OutOfAmmo();
void IdDotId():
{}
{
    // testPawnArray[1]
    // default.x
    VarName() (ArrayDeclEnd())?
    // .Weapon.OutOfAmmo();
    (LOOKAHEAD("." VarName()) "."  VarName() (ArrayDeclEnd())?)*
}

void FuncCallAndIdentifierList():
{}
{
    FuncCallOrQualifiedIdentifier() ("," FuncCallOrQualifiedIdentifier())*
}

// STRINGVAL = DQUOTE PRINTABLE DQUOTE
// INTVAL = ( DIGIT+ | ( '0x' ( HEXDIGIT )+ ) )
// FLOATVAL = ( DIGIT )+ DOT ( DIGIT )*
// See above


// -- Declaration parts
// DECLARATIONS = ( CONSTDECL | VARDECL | ENUMDECL | STRUCTDECL ) SEMICOLON
void Declarations():
{}
{
    (ConstDecl() | VarDecl() | EnumDecl() | StructDecl()) ";"
}


// CONSTDECL = const IDENTIFIER = CONSTVALUE
// CONSTVALUE = ( STRINGVAL | INTVAL | FLOATVAL | BOOLVAL )
void ConstDecl():
{}
{
    "const" VarName() "=" Expression()
}

// VARDECL = var ( CONFIGGROUP )? ( VARPARAMS )*
//                            VARTYPE VARIDENTIFIER ( COMMA VARIDENTIFIER )*
void VarDecl():
{}
{
    LOOKAHEAD(PointerDeclStart()) PointerDecl() | NormalVarDecl()
}

void NormalVarDecl():
{}
{
    "var" ( ConfigGroup() )? ( LOOKAHEAD(VarParams()) VarParams() )*
    VarTypeThenIdentifier()
}

void PointerDecl():
{}
{
    PointerDeclStart()
    VarName() (ArrayDeclEnd())?
    ("{"
        (LOOKAHEAD(BasicTypeOrClassType())
         BasicTypeOrClassType() | VarName())
    "}")?
}

void PointerDeclStart():
{}
{
    "var" ( ConfigGroup() )? ( VarParams() )* "pointer"
}

// CONFIGGROUP = LBRACK ( IDENTIFIER )? RBRACK
void ConfigGroup():
{}
{
    "(" (VarName())? ")"
}


// VARTYPE = PACKAGEIDENTIFIER | ENUMDECL | STRUCTDECL | ARRAYDECL | CLASSTYPE | BASICTYPE
// VARIDENTIFIER = IDENTIFIER

// Type can be a package identifier
// eg.
// var() SceneSubtitles.ESST_Mode SubTitleMode;
void VarTypeThenIdentifier():
{}
{
    (LOOKAHEAD(DynArrayDeclStart()) DynArrayDecl() |
     LOOKAHEAD(EnumDeclStart()) EnumDecl() |
     LOOKAHEAD(StructDeclStart()) StructDecl() |
     LOOKAHEAD(BasicTypeOrClassType()) BasicTypeOrClassType() |
     PackageIdentifier())

    VarEnd() ("," VarEnd())*
}

void VarEnd():
{}
{
    VarName() (ArrayDeclEndOrVarTags())?
}

void VarName():
{}
{
    <IDENTIFIER> | VarNameAlsoKeyword()
}

// UnrealScript keywords that could also be used as variable names
void VarNameAlsoKeyword():
{}
{
  <ABSTRACT>
| <ALLOWABSTRACT>
| <ARRAY>
| <AUTO>
| <BEGIN>
| <BOOLEAN>
| <BREAK>
| <BYTE>
| <CACHE>
| <CACHEEXEMPT>
| <CASE>
| <CLASS>
| <CLOCKWISEFROM>
| <COERCE>
| <COLLAPSECATEGORIES>
| <CONFIG>
| <CONST>
| <CONTINUE>
//| <CPPTEXT>
| <CROSS>
| <DATABINDING>
| <_DEFAULT>
| <_DEFAULTPROPERTIES>
| <DELEGATE>
| <DEPENDSON>
| <DEPRECATED>
| <DO>
| <DONTCOLLAPSECATEGORIES>
| <DOTPRODUCT>
| <DUPLICATETRANSIENT>
| <EDFINDABLE>
| <EDITCONST>
| <EDITFIXEDSIZE>
| <EDITINLINE>
| <EDITINLINENEW>
| <EDITINLINEUSE>
| <EDITORONLY>
| <ELSE>
| <END>
| <ENUM>
| <EVENT>
| <EXEC>
| <EXPORT>
| <EXPORTSTRUCTS>
| <EXTENDS>
| <FALSE>
| <FINAL>
| <FLOAT>
| <FOR>
| <FOREACH>
| <FUNCTION>
| <GLOBAL>
| <GLOBALCONFIG>
| <GOTO>
| <GUID>
| <HIDECATEGORIES>
| <HIDEDROPDOWN>
| <IF>
| <IGNORES>
| <INIT>
| <INPUT>
| <INSTANCED>
| <INT>
| <INTERP>
| <ITERATOR>
| <LATENT>
| <LOCAL>
| <LOCALIZED>
| <NAME>
| <NATIVE>
| <NATIVEREPLICATION>
| <NEW>
| <NOCLEAR>
| <NOEDITINLINEW>
| <NOEXPORT>
| <NOIMPORT>
| <NONE>
| <NONTRANSACTIONAL>
| <NOTFORCONSOLE>
| <NOTPLACEABLE>
| <OBJECT>
| <OPERATOR>
| <OPTIONAL>
| <OUT>
| <PACKAGE>
| <PEROBJECTCONFIG>
| <PLACEABLE>
| <POINTER>
| <POSTOPERATOR>
| <PREOPERATOR>
| <PRIVATE>
| <PROTECTED>
| <PUBLIC>
| <RELIABLE>
| <REPLICATION>
| <REPNOTIFY>
| <REPRETRY>
| <RETURN>
| <SAFEREPLACE>
| <SHOWCATEGORIES>
| <SIMULATED>
| <SINGULAR>
| <_SKIP>
| <STATE>
| <STATIC>
| <STRING>
| <STRUCT>
| <STRUCTDEFAULTPROPERTIES>
| <SUPER>
| <SWITCH>
| <TRANSIENT>
| <TRAVEL>
| <TRUE>
| <UNRELIABLE>
| <UNTIL>
| <VAR>
| <VIRTUAL>
| <VOID>
| <WITHIN>
| <WHILE>
}

void ArrayDeclEndOrVarTags():
{}
{
    ArrayDeclEnd() | VarTags()
}

// UE3
// Variable tags
// Eg.
// var localized int variablename<tag1=value|tag2=value>;
// Spaces between words allowed
// Var() bool bEnableSpawning<DisplayName=Spawning Enabled>;
void VarTags():
{}
{
    // Do not use Expression() - matches last GT()
    "<" VarName() "=" VarTagsValue() ("|" VarName() "=" VarTagsValue())* GT()
}

void VarTagsValue():
{}
{
    (LOOKAHEAD(Literal()) Literal() | VarName())+
}

// ARRAYDECL = IDENTIFIER LSBRACK INTVAL RSBRACK
void ArrayDecl():
{}
{
    VarName() ArrayDeclEnd()
}

// Workaround for choice conflicts
// Lots of things start with <IDENTIFIER>
void ArrayDeclEnd():
{}
{
    "[" ArrayIndex() "]"
}


// DYNARRAYDECL = array LABRACK (PACKAGEIDENTIFIER | CLASSTYPE | BASICTYPE) RABRACK
void DynArrayDecl():
{}
{
    DynArrayDeclStart()
        (LOOKAHEAD(BasicTypeOrClassType())
         BasicTypeOrClassType() |
         PackageIdentifier()) GT()
}

void DynArrayDeclStart():
{}
{
    "array" "<"
}

// CLASSTYPE = class LABRACK PACKAGEIDENTIFIER RABRACK
void ClassType():
{}
{
    ClassTypeStart() PackageIdentifier() GT()
}

void ClassTypeStart():
{}
{
    "class" "<"
}


// ENUMDECL = enum IDENTIFIER LCBRACK ENUMOPTIONS RCBRACK
void EnumDecl():
{}
{
    EnumDeclStart() VarName() "{" EnumOptions() "}"
}

void EnumDeclStart():
{}
{
    "enum"
}

// ENUMOPTIONS = IDENTIFIER ( COMMA IDENTIFIER )*
// Trailing "," ok
void EnumOptions():
{}
{
    VarName() (LOOKAHEAD("," VarName()) "," VarName() )* (",")?
}


// STRUCTDECL = struct ( STRUCTPARAMS )* IDENTIFIER ( extends PACKAGEIDENTIFIER )?
//                            LCBRACK STRUCTBODY RCBRACK
void StructDecl():
{}
{
    StructDeclStart() (LOOKAHEAD(StructParams()) StructParams())*
        VarName() ("extends" PackageIdentifier())?
        "{" StructBody() "}"
}

void StructDeclStart():
{}
{
    "struct"
}

// STRUCTPARAMS = ( native | export )
void StructParams():
{}
{
    ("export" | "init" | "native")
}


// STRUCTBODY = ( VARDECL SEMICOLON )+
void StructBody():
{}
{
    (VarDecl() ";")+ (StructDefaultPropertiesBlock())?
}

/*void CppText():
{}
{
    "cpptext" "{" (CppFunc())* "}"
}

void CppFunc():
{}
{
    LOOKAHEAD(CppVirtualFuncStart()) CppVirtualFunc() | CppNormalFunc()
}

void CppFuncArgs():
{}
{
    "("
    ( CppType() CppVarName() ("," CppType() CppVarName())* )?
    ")"
}

void CppNormalFunc():
{}
{
    CppType() CppVarName()
    CppFuncArgs()
    ( ";" | ("{" "}") )
}

void CppVirtualFunc():
{}
{
    CppVirtualFuncStart() CppType() CppVarName()
    CppFuncArgs()
    ( (("=" <INTEGER_LITERAL>)? ";") | ("{" "}") )
}

void CppVirtualFuncStart():
{}
{
    "virtual"
}

void CppType():
{}
{
    ("static" | "const")?
    (BasicType() | "void" | "none" | "object" | ("enum" CppVarName()) | CppVarName())
    (CppPtrRef())?
}

void CppVarName():
{}
{
    <IDENTIFIER>
}

void CppPtrRef():
{}
{
    "&" | (("const")? "*" ("*")?)
}*/

// Replication parts
// REPLICATIONBLOCK = replication LCBRACK ( REPLICATIONBODY )* RCBRACK
void ReplicationBlock():
{}
{
    "replication" "{" (ReplicationBody())* "}"
}

// "reliable" and "unreliable" not required in UE3
// REPLICATIONBODY = ( reliable | unreliable ) if LBRACK EXPR RBRACK
//                            IDENTIFIER ( COMMA IDENTIFIER )* SEMICOLON
void ReplicationBody():
{}
{
    ("reliable" | "unreliable")? "if" "(" Expression() ")"
                           FuncCallAndIdentifierList() ";"
}

// Body parts
// BODY = ( STATEDECL | FUNCTIONDECL )*
void Body():
{}
{
    ( Declarations() | /*CppText() |*/
      LOOKAHEAD(StateDeclStart()) StateDecl() |
      FunctionDecl() |
      ReplicationBlock() )*
}

// State parts
// STATEDECL = ( STATEPARAMS )* state IDENTIFIER ( CONFIGGROUP )? ( extends IDENTIFIER )? STATEBODY
void StateDecl():
{}
{
    StateDeclStart() ("(" ")")? VarName()
        (ConfigGroup())? ("extends" PackageIdentifier())? StateBody()
}

void StateDeclStart():
{}
{
    (StateParams())* "state"
}


// STATEBODY = LCBRACK ( STATEIGNORE )? ( FUNCTIONDECL )* STATELABELS RCBRACK
void StateBody():
{}
{
    "{"
        (StateIgnore())?
        (FunctionDecl())*
        ( LabelStatement() (CodeLine())* )*
    "}"
}


// STATEIGNORE = ignores IDENTIFIER ( COMMA IDENTIFIER )* SEMICOLON
void StateIgnore():
{}
{
    "ignores" <IDENTIFIER> ("," <IDENTIFIER>)* ";"
}

// Function  parts
// operators require an set amouth of arguments
// FUNCTIONDECL = ( NORMALFUNC | OPERATORFUNC )
void FunctionDecl():
{}
{
    NormalOrOperatorFunc()
}

// Moved (FunctionParams())* here to prevent choice conflicts
// FUNCTIONPARAMS = CONSTFUNCPARAMS | native ( LBRACK INTVAL RBRACK )?
// Native functions can have const after them
// native function int doSomething(string myData) const;

// ConstFuncParams() can be before or after "function"
void NormalOrOperatorFunc():
{}
{
    LOOKAHEAD(NativeFuncParamsStart())
    ( NativeFuncParams() (ConstFuncParams())* FuncEnd() ("const")? FunctionBody() ) |
    ( (ConstFuncParams())* FuncEnd() FunctionBody() )
}

void NativeFuncParams():
{}
{
    NativeFuncParamsStart() ("(" <INTEGER_LITERAL> ")")?
}

void NativeFuncParamsStart():
{}
{
    (ConstFuncParams())* "native"
}

void FuncEnd():
{}
{
    NormalFuncEnd() | OperatorFuncEnd()
}

// NORMALFUNC = ( FUNCTIONPARAMS )* FUNCTIONTYPE ( LOCALTYPE )?
//              IDENTIFIER
//              LBRACK ( FUNCTIONARGS ( COMMA FUNCTIONARGS )* )? RBRACK
//              FUNCTIONBODY
void NormalFuncEnd():
{}
{
     FunctionType() 
        (LOOKAHEAD(ConstFuncParams() ReturnTypeThenIdentifier()) ConstFuncParams())*
        ReturnTypeThenIdentifier() "(" ( FunctionArgs() ("," FunctionArgs())* )? ")"
}

// Prevent choice conflict
// If is a PackageIdentifier() in LocalType(), and then <IDENTIFIER>
// Instead of:
// ( LocalType() )? <IDENTIFIER>
// LocalTypeThenIdentifier
void ReturnTypeThenIdentifier():
{}
{
    LOOKAHEAD("void" VarName())
        ("void" VarName()) |
    LOOKAHEAD(LocalTypeEnd() VarName())
        (LocalTypeEnd() VarName()) |
    LOOKAHEAD(PackageIdentifierOrArrayDecl() VarName())
        (PackageIdentifierOrArrayDecl() VarName()) |
    VarName()
}

// OPERATORFUNC = ( FUNCTIONPARAMS )* OPERATORTYPE FUNCTIONBODY
void OperatorFuncEnd():
{}
{
    OperatorType()
}

// OPERATORTYPE = ( BINARYOPERATOR | UNARYOPERATOR )
void OperatorType():
{}
{
    ( BinaryOperator() | UnaryOperator() )
}

// requires two arguments
// BINARYOPERATOR = operator LBRACK INTVAL RBRACK PACKAGEIDENTIFIER OPIDENTIFIER
//                            LBRACK FUNCTIONARGS COMMA FUNCTIONARGS RBRACK
void BinaryOperator():
{}
{
    "operator" "(" (<INTEGER_LITERAL> | <IDENTIFIER>) ")"
        (LOOKAHEAD(LocalTypeEnd()) LocalTypeEnd() | PackageIdentifier())
        OpIdentifier()
        "(" FunctionArgs() "," FunctionArgs() ")"
}

// requires one argument
// UNARYOPERATOR = ( preoperator | postoperator ) PACKAGEIDENTIFIER OPIDENTIFIER
//                            LBRACK FUNCTIONARGS RBRACK
void UnaryOperator():
{}
{
    ( "preoperator" | "postoperator" )
        (LOOKAHEAD(LocalTypeEnd()) LocalTypeEnd() | PackageIdentifier())
        OpIdentifier()
        "(" FunctionArgs() ")"
}

// FUNCTIONARGS = ( optional | out | coerce )? FUNCTIONARGTYPE IDENTIFIER
// "optional" can have default value in UE3
// eg.
// function myFunc(optional int x = -1) {};
void FunctionArgs():
{}
{
    LOOKAHEAD("optional") OptionalFunctionArg() | FunctionArg()
}

void OptionalFunctionArg():
{}
{
    "optional" FunctionArg() ("=" UnaryExpression())?
}

void FunctionArg():
{}
{
    (LOOKAHEAD(FuncArgParamsNotOpt()) FuncArgParamsNotOpt())*
    FunctionArgTypeAndName()
}

void FuncArgParamsNotOpt():
{}
{
    "out" | "coerce" | "skip"
}

void FunctionArgTypeAndName():
{}
{
    FunctionArgType() VarName() (ArrayDeclEnd())?
}

// FUNCTIONARGTYPE = BASICTYPE | PACKAGEIDENTIFIER
void FunctionArgType():
{}
{
    LOOKAHEAD(LocalTypeEnd()) LocalTypeEnd() | PackageIdentifier()
}


// FUNCTIONBODY = ( SEMICOLON | ( ( LOCALDECL )* ( CODELINE )* ) ( SEMICOLON )? )
void FunctionBody():
{}
{
    ";" | ( "{" (LOOKAHEAD(LocalDeclStart()) LocalDecl())* (CodeLine())* "}" )
}


// LOCALDECL = local LOCALTYPE IDENTIFIER ( COMMA IDENTIFIER )*
void LocalDecl():
{}
{
    LocalDeclStart() LocalType() LocalEnd() ( "," LocalEnd() )* ";"
}

void LocalEnd():
{}
{
    VarName() (ArrayDeclEnd())?
}

void LocalDeclStart():
{}
{
    "local"
}


// LOCALTYPE = PACKAGEIDENTIFIER | ARRAYDECL | CLASSTYPE | BASICTYPE
void LocalType():
{}
{
    LOOKAHEAD(LocalTypeEnd()) LocalTypeEnd() | PackageIdentifierOrArrayDecl()
}

// LocalType without PackageIdentifier and ArrayDecl
// to prevent choice conflicts with <IDENTIFIER>
void LocalTypeEnd():
{}
{
    BasicTypeOrClassType() | DynArrayDecl()
}

// choice conflict - multiple things that start with <IDENTIFIER>
void PackageIdentifierOrArrayDecl():
{}
{
    VarName() (ArrayDeclEnd() | PackageIdentifierEnd())
}

// Code parts
// CODELINE = ( STATEMENT | ASSIGNMENT | IFTHENELSE | WHILELOOP | DOLOOP
//              | SWITCHCASE | RETURNFUNC | FOREACHLOOP | FORLOOP )
void CodeLine():
{}
{
    //( STATEMENT | ASSIGNMENT | IFTHENELSE | WHILELOOP | DOLOOP
    //   | SWITCHCASE | RETURNFUNC | FOREACHLOOP | FORLOOP )
    try {
        LOOKAHEAD(IfStatementStart()) IfStatement() |
        LOOKAHEAD(WhileStatementStart()) WhileStatement() |
        LOOKAHEAD(DoStatementStart()) DoStatement() |
        LOOKAHEAD(ForStatementStart()) ForStatement() |
        LOOKAHEAD(ForEachStatementStart()) ForEachStatement() |
        LOOKAHEAD(BreakStatement()) BreakStatement() |
        LOOKAHEAD(ContinueStatement()) ContinueStatement() |
        LOOKAHEAD(ReturnStatementStart()) ReturnStatement() |
        LOOKAHEAD(GotoStatementStart()) GotoStatement() |
        LOOKAHEAD(SwitchStart()) SwitchStatement() |

        CodeBlock() |

        LOOKAHEAD(LabelStatementStart()) LabelStatement() |
        (Expression() ";") |
        //Statement() |

        EmptyStatement()
    }
    catch (ParseException ex) {
        recover(ex, SEMICOLON);
    }
}

// CODEBLOCK = ( CODELINE | ( LCBRACK ( CODELINE )* RCBRACK ) )
void CodeBlock():
{}
{
    "{" ( CodeLine() )* "}"
}

// STATEMENT = FUNCCALL SEMICOLON
void Statement():
{}
{
    FuncCall() ";"
}


// ASSIGNMENT = IDENTIFIER EQUALS EXPR SEMICOLON
void Assignment():
{}
{
    <IDENTIFIER> "=" Expression() ";"
}

// IFTHENELSE = if LBRACK EXPR RBRACK CODEBLOCK ( else CODEBLOCK )?'
// The disambiguating algorithm of JavaCC automatically binds dangling
// else's to the innermost if statement.  The LOOKAHEAD specification
// is to tell JavaCC that we know what we are doing.
void IfStatement():
{}
{
    IfStatementStart() Expression() ")" CodeLine() ( LOOKAHEAD(1) "else" CodeLine() )?
}

void IfStatementStart():
{}
{
    "if" "("
}

// WHILELOOP = while LBRACK EXPR RBRACK CODEBLOCK
void WhileStatement():
{}
{
    WhileStatementStart() Expression() ")" CodeLine()
}

void WhileStatementStart():
{}
{
    "while" "("
}

// DOLOOP = do CODEBLOCK until LBRACK EXPR RBRACK
void DoStatement():
{}
{
    DoStatementStart() "(" Expression() ")" ";"
}

void DoStatementStart():
{}
{
    "do" CodeLine() "until"
}

// SWITCHCASE = switch LBRACK EXPR RBRACK LCBRACK ( CASERULE )+ ( DEFAULTRULE )? RCBRACK
void SwitchStatement():
{}
{
    SwitchStart()
        (LOOKAHEAD(SwitchLabelStart()) SwitchLabel())*
        (LOOKAHEAD(DefaultLabelStart()) DefaultLabel())?
    "}"
}

void SwitchStart():
{}
{
    "switch" "(" Expression() ")" "{"
}

// CASERULE = case INTVAL COLON CODEBLOCK
void SwitchLabel():
{}
{
    (SwitchLabelStart() (LOOKAHEAD(Literal()) Literal() | QualifiedIdentifier()) ":")
    // Lookahead - check next line is not "case" or "default"
    //( (LOOKAHEAD(SwitchLabelStart()) SwitchLabel() |
      //LOOKAHEAD(DefaultLabelStart()) DefaultLabel() |
    //  CodeLine()) )*
    //( LOOKAHEAD( { (getToken(1).kind != CASE) && (getToken(1).kind != DEFAULT) } )
    //  CodeLine() )*
    ( LOOKAHEAD(1)
      (LOOKAHEAD(SwitchLabelStart()) SwitchLabel() |
       LOOKAHEAD(DefaultLabelStart()) DefaultLabel() |
       CodeLine()) )*
}

void SwitchLabelStart():
{}
{
    "case"
}

// DEFAULTRULE = default CODEBLOCK
void DefaultLabel():
{}
{
    DefaultLabelStart() ":" (LOOKAHEAD(1) CodeLine())+
}

void DefaultLabelStart():
{}
{
    "default"
}

// RETURNFUNC = return ( EXPR )? SEMICOLON
void ReturnStatement():
{}
{
    ReturnStatementStart()
    (Expression())? ";"
}

void ReturnStatementStart():
{}
{
    "return"
}

// eg.
// {
//     LoopForever:
//         goto LoopForever;
// }
void GotoStatement():
{}
{
    GotoStatementStart() ( <IDENTIFIER> | <NAME_LITERAL> | ("(" <NAME_LITERAL> ")") ) ";"
}

void GotoStatementStart():
{}
{
    "goto"
}

// STATELABELS = ( IDENTIFIER COLON ( CODELINE )* )*
void LabelStatement():
{}
{
    LabelStatementStart() //(LOOKAHEAD(1) CodeLine())*
}

void LabelStatementStart():
{}
{
    // Don't mix up with "case:" and "default:"
    (<IDENTIFIER> | "begin" | "end") ":"
}

// FOREACHLOOP = foreach FUNCCALL CODEBLOCK
void ForEachStatement():
{}
{
    ForEachStatementStart() FuncCall() CodeLine()
}

void ForEachStatementStart():
{}
{
    "foreach"
}


// FORLOOP = for LBRACK ASSIGNMENT SEMICOLON EXPR SEMICOLON EXPR RBRACK CODEBLOCK
void ForStatement():
{}
{
    ForStatementStart()
                [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ]
          ")"
    CodeLine()
}

void ForStatementStart():
{}
{
    "for" "("
}

void ForInit():
{}
{
    StatementExpressionList()
}

void StatementExpressionList():
{}
{
    StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate():
{}
{
    StatementExpressionList()
}


// EXPR = OPERAND ( OPIDENTIFIER OPERAND )*
// This expansion has been written this way instead of:
//   Assignment() | ConditionalExpression()
// for performance reasons.
// However, it is a weakening of the grammar for it allows the LHS of
// assignments to be any conditional expression whereas it can only be
// a primary expression.  Consider adding a semantic predicate to work
// around this.
void Expression():
{}
{
    //ConditionalExpression() (LOOKAHEAD(2) AssignmentOperator() Expression())?
    //Operand() ( LOOKAHEAD(2) OpIdentifier() Operand() )*
    //ConditionalExpression()
    BinaryExpression()
}

void TernaryExpression():
{}
{
    ConditionalExpression()
}

void ConditionalExpression():
{}
{
    BinaryExpression() ( ("?" | "??")? BinaryExpression() ":" BinaryExpression() )?
}

/*void BinaryExpression():
{}
{
    UnaryExpression() (LOOKAHEAD(2) OperatorNames() UnaryExpressionNotPlusMinus())*
}*/

void BinaryExpression():
{}
{
    exp2() (LOOKAHEAD(OperatorNames2()) OperatorNames2() exp2())*
}

void exp2():
{}
{
    ( "+" | "-" | "++" | "--" | "~" | "!" )?
    exp1()
    // Force lookahead of 1 - match post operator before pre?
    ( LOOKAHEAD(1)("++" | "--") )?
}

void exp1():
{}
{
    "(" Expression() ")" |
    LOOKAHEAD(NewStatementStart()) NewStatement() |
    FuncCallOrIdentifierSpecifierOrLiteral()
}

void FuncCallOrIdentifierSpecifierOrLiteral():
{}
{
    // Order is important
    // Match class'name'.func() before class'name' in literal
    // Same with class<name>(castedvar) and class<name>
    (LOOKAHEAD(ClassNameIdStart() | CastIdStart()) FuncCallOrIdentifierSpecifier() |
     LOOKAHEAD(Literal()) Literal() |
     FuncCallOrIdentifierSpecifier())
}

// new operator in UE3
// ObjectVar = new[(InOuter, InName, InFlags)] <class'InClass'>[(InTemplate)];
// <class'InClass'> could be like class'InClass' or a variable name, ObjectClass
// eg.
// NewObj = new class'Engine.LightFunction';
// NewObj = new(Self,'NewLight') class'Engine.LightFunction';
// NewObj = new(None,'NewLight') class'Engine.LightFunction' (LightFunctionTemplate);
// Result = new(Outer) ObjectClass;
// return new(None, Repl(RecordName, " ", Chr(27))) class'MaplistRecord';
void NewExpression():
{}
{
    NewExpressionStart1() NewStatement()
}

void NewExpressionStart():
{}
{
    NewExpressionStart1() NewStatementStart()
}

void NewExpressionStart1():
{}
{
    VarName() "="
}

void NewStatement():
{}
{
    // (param1, 'param2', param3) class'classname'
    NewStatementStart() (NewParams())? NewClass()

    //LOOKAHEAD(NewParamsStart() | NewClassStart())
    //((NewParams())? NewClass()) |
    //PackageIdentifier()
}

void NewStatementStart():
{}
{
    "new"
}

// (param1)
// (param1, 'param2')
// (param1, 'param2', param3)
// params could also be the result of a function call
void NewParams():
{}
{
    //NewParamsStart() Expression() ("," Expression() ("," Expression())? )? ")"
    //NewParamsStart() QualifiedIdentifier() ("," <NAME_LITERAL> ("," ArrayIndex())? )? ")"
    NewParamsStart() NewParam1() ("," NewParam2() ("," ArrayIndex())? )? ")"
}

void NewParam1():
{}
{
    FuncCallOrQualifiedIdentifier()
}

void NewParam2():
{}
{
    <NAME_LITERAL> | FuncCallOrQualifiedIdentifier()
}

void NewParam3():
{}
{
    ArrayIndex()
}

void NewParamsStart():
{}
{
    "("
}

// class'classname' (intemplate'name')
void NewClass():
{}
{
    NewClassStart() (LOOKAHEAD("(" VarName() (<NAME_LITERAL>)? ")") "(" VarName() (<NAME_LITERAL>)? ")")?
}

// class'classname'
void NewClassStart():
{}
{
    LOOKAHEAD("class" <NAME_LITERAL>) ("class" <NAME_LITERAL>) | IdDotId()
}

// OPIDENTIFIER = IDENTIFIER | OPERATORNAMES
void OpIdentifier():
{}
{
    OperatorNames() | <IDENTIFIER>
}

void OpIdentifier2():
{}
{
    OperatorNames2() | <IDENTIFIER>
}

//OPERATORNAMES  = '~' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' |
//                 '-' | '=' | '+' | '|' | '\' | ':' | '<' | '>' | '/' |
//                 '?' | '`' |
//                 '<<' | '>>' | '!=' | '<=' | '>=' | '++' | '--' | '?-' | '+=' |
//                 '-=' | '*=' | '/=' | '&&' | '||' | '^^' | '==' | '**' |
//                 '~=' | '@=' | '>>>'
// http://udn.epicgames.com/Two/UnrealScriptReference.html#Built-in%20operators%20and%20their%20precedence
void OperatorNames():
{}
{
    ":" | "?" |

    "@" | "$" |
    "||" | "&&" | "^^" |
    "&" | "|" | "^" |
    "!=" | "==" | "<" | GT() | "<=" | ">=" | "~=" |
    "<<" | RSIGNEDSHIFT() | RUNSIGNEDSHIFT() |
    "+" | "-" |
    "%" | "*" | "/" |
    "dot" | "cross" | "**" | "clockwisefrom" |

    "@=" | "$=" |
    "&=" | "^=" | "|="
    "<<=" | ">>=" | ">>>=" |
    "+=" | "-=" | "%=" | "*=" | "/=" |
    "=" |

    "??" | "-=-" |

    "++" | "--" |
    "~" | "!"
}

void OperatorNames2():
{}
{
    ":" | "?" |

    "@" | "$" |
    "||" | "&&" | "^^" |
    "&" | "|" | "^" |
    "!=" | "==" | "<" | GT() | "<=" | ">=" | "~=" |
    "<<" | RSIGNEDSHIFT() | RUNSIGNEDSHIFT() |
    "+" | "-" |
    "%" | "*" | "/" |
    "dot" | "cross" | "**" | "clockwisefrom" |

    "@=" | "$=" |
    "&=" | "^=" | "|="
    "<<=" | ">>=" | ">>>=" |
    "+=" | "-=" | "%=" | "*=" | "/=" |
    "=" |

    "??" | "-=-" /*|

    "++" | "--" |
    "~" | "!"*/
}

/*void CustomOperators():
{}
{
    "#" | "\\" | "`" | "?-"
}*/

void TernaryOperatorNames():
{}
{
    ":" | "?" | "??"
}

void BinaryOperatorNames():
{}
{
    "@" | "$" |
    "||" | "&&" | "^^" |
    "&" | "|" | "^" |
    "!=" | "==" | "<" | GT() | "<=" | ">=" | "~=" |
    "<<" | RSIGNEDSHIFT() | RUNSIGNEDSHIFT() |
    "+" | "-" |
    "%" | "*" | "/" |
    "dot" | "cross" | "**" | "clockwisefrom" |
    "-=-"
    AssignmentOperatorNames()
}

void AssignmentOperatorNames():
{}
{
    "@=" | "$=" |
    "&=" | "^=" | "|="
    "<<=" | ">>=" | ">>>=" |
    "+=" | "-=" | "%=" | "*=" | "/=" |
    "="
}

void UnaryOperatorNames():
{}
{
    "++" | "--" |
    "+" | "-" |
    "~" | "!"
}

void UnaryExpression():
{}
{
    PreIncrementExpression() |
    PreDecrementExpression() |
    ( "+" | "-" ) PrimaryExpression() |
    UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression():
{}
{
    "++" PrimaryExpression()
}

void PreDecrementExpression():
{}
{
    "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus():
{}
{
    ( "~" | "!" ) PrimaryExpression() |
    (LOOKAHEAD(2) CastExpression() | PostfixExpression())
}

// Eg.
// p = Pawn(Owner);
// Pawn(Owner).Weapon.OutOfAmmo();
void CastExpression():
{}
{
    BasicTypeOrClassType() "(" PrimaryPrefix() ")"
    (LOOKAHEAD(2) FuncCallOrQualifiedIdentifier())? /// @todo FIXME
}

void PostfixExpression():
{}
{
    PrimaryExpression() ("++" | "--")?
}

// OPERAND = ( CONSTVALUE | QUALIFIEDIDENTIFIER | FUNCCALL )
void PrimaryExpression():
{}
{
    //PrimaryPrefix() ( PrimarySuffix() )*
    PrimaryPrefix()
}

void PrimaryPrefix():
{}
{
    "(" Expression() ")" | FuncCallOrIdentifierSpecifierOrLiteral()
}

/*void PrimarySuffix():
{}
{
    "." <IDENTIFIER> |
    FunctionArgs()
}*/

// Function Calling Specifiers
// Super(Pawn).Touch( Other );
// Global.Touch( Other );
// Super.Touch( Other );
void FuncCallOrIdentifierSpecifier():
{}
{
    (LOOKAHEAD(SuperSpecifierStart() | GlobalSpecifierStart())
     (SuperSpecifier() | GlobalSpecifier()))?
    FuncCallOrQualifiedIdentifier()
}

void SuperSpecifier():
{}
{
    SuperSpecifierStart() ("(" <IDENTIFIER> ")")? "."
}

void SuperSpecifierStart():
{}
{
    "super"
}

void GlobalSpecifier():
{}
{
    GlobalSpecifierStart() "."
}

void GlobalSpecifierStart():
{}
{
    "global"
}

void EmptyStatement():
{}
{
    ";"
}

void StatementExpression():
{}
{
    PreIncrementExpression() |
    PreDecrementExpression() |
    PrimaryExpression() ( "++" | "--" | AssignmentOperatorNames()
                          (LOOKAHEAD(3) Expression() | StatementExpression()) )?
}

void BreakStatement():
{}
{
    "break" ";"
}

void ContinueStatement():
{}
{
    "continue"  ";"
}


// -- Defaultproperties
// DEFAULTPROPERTIESBLOCK = defaultproperties LCBRACK ( DEFPROP )* RCBRACK
void DefaultPropertiesBlock():
{}
{
    "defaultproperties" "{" (DefProp())* "}"
}

void StructDefaultPropertiesBlock():
{}
{
    "structdefaultproperties" "{" (DefProp())* "}"
}

// DEFPROP = DEFPROPIDENTIFIER EQUALS PRINTABLE
void DefProp():
{}
{
    LOOKAHEAD("begin")
    ("begin" "object" "class" "=" VarName() "name" "=" VarName()
    (LOOKAHEAD(DefPropLine()) DefPropLine())*
    "end" "object") |

    DefPropLine()
}

void DefPropLine():
{}
{
    DefPropIdentifier()

    (LOOKAHEAD("=") ("=" DefPropExpression()) | DefPropArray3())

    // Usually no semicolon at end of line
    // But adding one is allowed
    (";")?
}

void DefPropExpression():
{}
{
    LOOKAHEAD(DefPropStruct2Start()) DefPropStruct2() |
    LOOKAHEAD(DefPropStruct1Start()) DefPropStruct1() |
    LOOKAHEAD(DefPropArray1Start()) DefPropArray1() |
    DefPropValue()
}

// DEFPROPIDENTIFIER = IDENTIFIER ( ( LBRACK INTVAL RBRACK ) | ( LSBRACK INTVAL RSBRACK ) )?
void DefPropIdentifier():
{}
{
    VarName() ( LOOKAHEAD(3)(("(" ArrayIndex() ")") | ("[" ArrayIndex() "]")) )?
}

void ArrayIndex():
{}
{
    //(<IDENTIFIER> | <INTEGER_LITERAL>)
    Expression()
}

// Default properties block
// Filling dynamic array type 1
// ArrayProp=(Value1,Value2,Value3)
// eg.
// DrivePos=(X=0,Y=0,Z=0)
// Can be empty
// DriveRot=()
void DefPropArray1():
{}
{
    DefPropArray1Start()
        (DefPropExpression() ("," DefPropExpression())*)?
    ")"
}

void DefPropArray1Start():
{}
{
    "("
}

// ArrayProp(0)=Value1
// See DefPropIdentifier()

// ArrayProp.Add(Value1)
void DefPropArray3():
{}
{
    "." VarName() "(" DefPropValue() ")"
}


// StructProperty={(
//                    InnerStructPropertyA=Value1,
//                    InnerStructPropertyB=Value2
//                    )}

// Default properties block
// Filling struct type 1
// StructProperty=(InnerStructPropertyA=Value1,InnerStructPropertyB=Value2)
// MainScale=(Scale=(X=1,Y=1,Z=1),SheerRate=0,SheerAxis=SHEER_None)
void DefPropStruct1():
{}
{
    DefPropStruct1Start()
        DefPropExpression() ("," VarName() "=" DefPropExpression())*
    ")"
}

void DefPropStruct1Start():
{}
{
    "(" VarName() "="
}

void DefPropStruct2():
{}
{
    DefPropStruct2Start()
        VarName() "=" DefPropExpression() ("," VarName() "=" DefPropExpression())*
    ")" "}"
}

void DefPropStruct2Start():
{}
{
    "{" "("
}

void DefPropValue():
{}
{
    (LOOKAHEAD(3)(<IDENTIFIER> <NAME_LITERAL>) | Expression())
}

/*
 * Terminals
 */
/*
PRINTABLE                = all printable characters
ALPHA                    = 'a' .. 'z'
DIGIT                    = '0' .. '9'
HEXDIGIT                 = DIGIT | 'a' .. 'f'
SEMICOLON                = ';'
COLON                    = ':'
UNDERSCORE               = '_'
LBRACK                   = '('
RBRACK                   = ')'
LABRACK                  = '<'
RABRACK                  = '>'
LCBRACK                  = '{'
RCBRACK                  = '}'
LSBRACK                  = '['
RSBRACK                  = ']'
DOT                      = '.'
COMMA                    = ','
SQUOTE                   = '''
DQUOTE                   = '"'
EQUALS                   = '='
*/
/*
See above
*/

// CONSTCLASSPARAMS = abstract | native | nativereplication | safereplace |
//                    perobjectconfig | transient | noexport | exportstructs |
//                    // available but obsolete:
//                    guid(INTVAL,INTVAL,INTVAL,INTVAL)
//                    // available from warfare and up:
//                    collapsecategories | dontcollapsecategories | placeable |
//                    notplaceable | editinlinenew | noteditinlinenew
void ConstClassParams():
{}
{
    "native" |
    "nativereplication" |
    "abstract" |
    "cacheexempt" |
    "collapsecategories" |
    "dontcollapsecategories" |
    "editinlinenew" |
    "exportstructs" |

    ("guid" "("
    <INTEGER_LITERAL> ","
    <INTEGER_LITERAL> ","
    <INTEGER_LITERAL> ","
    <INTEGER_LITERAL> ")") |

    "hidedropdown" |
    "noexport" |
    "noteditinlinenew" |
    "notplaceable" |
    "perobjectconfig" |
    "placeable" |
    "safereplace" |
    "transient"
}

// BOOLVAL = true | false
void BooleanLiteral():
{}
{
    "true" | "false"
}

// VARPARAMS = config | const | editconst | export | globalconfig | input |
//             localized | native | private | protected | transient | travel |
//             // available from warfare and up:
//             editinline | deprecated | edfindable | editinlineuse
void VarParams():
{}
{
    "allowabstract" |
    "cache" |
    "config" |
    "const" |
    "databinding" |
    "deprecated" |
    "duplicatetransient" |
    "edfindable" |
    "editconst" |
    "editconstarray" |
    "editfixedsize" |
    "editinline" |
    "editinlineuse" |
    "editoronly" |
    "export" |
    "globalconfig" |
    "init" |
    "input" |
    "instanced" |
    "interp" |
    "localized" |
    "native" |
    "noclear" |
    "noexport" |
    "noimport" |
    "nontransactional" |
    "notforconsole" |
    "private" |
    "protected" |
    "repnotify" |
    "repretry" |
    "transient" |
    "travel"
}

// STATEPARAMS = auto | simulated
void StateParams():
{}
{
    "auto" |
    "simulated"
}

// CONSTFUNCPARAMS = final | iterator | latent | simulated | singular | static |
//                   exec | protected | private
void ConstFuncParams():
{}
{
    "exec" |
    "final" |
    "iterator" |
    "latent" |
    "private" |
    "protected" |
    "simulated" |
    "singular" |
    "static"
}

// BASICTYPE = byte | int | float | string | bool | name | class
// Moved "class" to BasicClassType() to prevent choice confilcts with ClassType
void BasicType():
{}
{
    BasicTypeSimple() | BasicClassType()
}

void BasicTypeSimple():
{}
{
    "bool" | "byte" | "float" | "int" | "string" | "name"
}

void BasicClassType():
{}
{
    "class"
}

// choice conflict - multiple things that can start with "class"
void BasicTypeOrClassType():
{}
{
    BasicTypeSimple() | (LOOKAHEAD(ClassTypeStart()) ClassType() | "class") /// @todo FIXME
}

// FUNCTIONTYPE = function | event | delegate
void FunctionType():
{}
{
  "function" | "event" | "delegate"
}

void ResultType():
{}
{
  "void" | BasicType()
}

void Literal():
{}
{
    <INTEGER_LITERAL> |
    <FLOATING_POINT_LITERAL> |
    <NAME_LITERAL> |
    LOOKAHEAD(ConstantLiteral()) ConstantLiteral() |
    ("class" (LOOKAHEAD(<NAME_LITERAL>) <NAME_LITERAL>)?) |
    <STRING_LITERAL> |
    BooleanLiteral() |
    NoneLiteral()
}

// General object constants are specified by the object type followed by the
// object name in single quotes, for example: texture'Default'
void ConstantLiteral():
{}
{
    VarName() <NAME_LITERAL>
}

void NoneLiteral():
{}
{
  "none"
}

// We use productions to match >>>, >> and > so that we can keep the
// type declaration syntax with generics clean
void RUNSIGNEDSHIFT():
{}
{
  /*( LOOKAHEAD({
        ( getToken(1).kind == GT ) &&
        ( ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT )
    })
   ">" ">" ">"
  )*/
    ">>>"
}

void RSIGNEDSHIFT():
{}
{
  /*( LOOKAHEAD({
        ( getToken(1).kind == GT ) &&
        ( ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT)
    })
  ">" ">"
  )*/
    ">>"
}

void GT():
{}
{
  /*( LOOKAHEAD({
        ( getToken(1).kind == GT ) &&
        ( ((Token.GTToken)getToken(1)).realKind == GT )
    })
  ">"
  )*/
    ">"
}
