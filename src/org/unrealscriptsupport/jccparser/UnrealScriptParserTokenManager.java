/* Generated By:JavaCC: Do not edit this line. UnrealScriptParserTokenManager.java */
package org.unrealscriptsupport.jccparser;
import java.io.*;
import java.util.*;

/** Token Manager. */
public class UnrealScriptParserTokenManager implements UnrealScriptParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8L) != 0L || (active2 & 0x2002000000L) != 0L)
            return 30;
         if ((active0 & 0xffffffffffff8000L) != 0L || (active1 & 0x1ffffffffffffL) != 0L)
         {
            jjmatchedKind = 122;
            return 11;
         }
         if ((active2 & 0x20L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0x8L) != 0L)
            return 28;
         if ((active0 & 0x4000007000000000L) != 0L)
            return 11;
         if ((active0 & 0xbfffff8fffff8000L) != 0L || (active1 & 0x1ffffffffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return 11;
         }
         return -1;
      case 2:
         if ((active0 & 0xbf3fffafffff8000L) != 0L || (active1 & 0x1dffffffdfbfbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 2;
            }
            return 11;
         }
         if ((active0 & 0xc0004000000000L) != 0L || (active1 & 0x200000020404L) != 0L)
            return 11;
         return -1;
      case 3:
         if ((active0 & 0xb3bf4fafffa98000L) != 0L || (active1 & 0x19bfffffddb7bL) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 3;
            return 11;
         }
         if ((active0 & 0xc00b00000560000L) != 0L || (active1 & 0x440000002080L) != 0L)
            return 11;
         return -1;
      case 4:
         if ((active0 & 0x38400050890000L) != 0L || (active1 & 0x1104200000061L) != 0L)
            return 11;
         if ((active0 & 0xb3870fafaf208000L) != 0L || (active1 & 0x8bbdfffddb1aL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 4;
            }
            return 11;
         }
         return -1;
      case 5:
         if ((active0 & 0xb3840fafa5208000L) != 0L || (active1 & 0x901edfdd84aL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 5;
            }
            return 11;
         }
         if ((active0 & 0x300000a000000L) != 0L || (active1 & 0x82bc12000310L) != 0L)
            return 11;
         return -1;
      case 6:
         if ((active0 & 0x33020fae25208000L) != 0L || (active1 & 0x921ed79da4aL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 6;
            }
            return 11;
         }
         if ((active0 & 0x8084000180000000L) != 0L || (active1 & 0x840000L) != 0L)
            return 11;
         return -1;
      case 7:
         if ((active0 & 0x100000220008000L) != 0L || (active1 & 0x104019008L) != 0L)
            return 11;
         if ((active0 & 0x32020fad05200000L) != 0L || (active1 & 0x920e9784a42L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 7;
            return 11;
         }
         return -1;
      case 8:
         if ((active0 & 0x32020ea905200000L) != 0L || (active1 & 0x82068684a00L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 8;
            return 11;
         }
         if ((active0 & 0x10400000000L) != 0L || (active1 & 0x10081100042L) != 0L)
            return 11;
         return -1;
      case 9:
         if ((active0 & 0x3202002105200000L) != 0L || (active1 & 0x2068684a00L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 9;
            }
            return 11;
         }
         if ((active0 & 0xe8800000000L) != 0L || (active1 & 0x80000000000L) != 0L)
            return 11;
         return -1;
      case 10:
         if ((active0 & 0x200000L) != 0L || (active1 & 0x28400000L) != 0L)
            return 11;
         if ((active0 & 0x32020c2105000000L) != 0L || (active1 & 0x2040284a00L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 10;
            return 11;
         }
         return -1;
      case 11:
         if ((active0 & 0x10020c2105000000L) != 0L || (active1 & 0x2040080a00L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 11;
            return 11;
         }
         if ((active0 & 0x2200000000000000L) != 0L || (active1 & 0x204000L) != 0L)
            return 11;
         return -1;
      case 12:
         if ((active0 & 0x20c0001000000L) != 0L)
            return 11;
         if ((active0 & 0x1000002104000000L) != 0L || (active1 & 0x2040080a00L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 12;
            return 11;
         }
         return -1;
      case 13:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x40000000L) != 0L)
            return 11;
         if ((active0 & 0x2104000000L) != 0L || (active1 & 0x2000080a00L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 13;
            return 11;
         }
         return -1;
      case 14:
         if ((active0 & 0x2104000000L) != 0L || (active1 & 0x2000000a00L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 14;
            return 11;
         }
         if ((active1 & 0x80000L) != 0L)
            return 11;
         return -1;
      case 15:
         if ((active0 & 0x2104000000L) != 0L || (active1 & 0x2000000200L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 15;
            return 11;
         }
         if ((active1 & 0x800L) != 0L)
            return 11;
         return -1;
      case 16:
         if ((active0 & 0x100000000L) != 0L || (active1 & 0x200L) != 0L)
            return 11;
         if ((active0 & 0x2004000000L) != 0L || (active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 16;
            return 11;
         }
         return -1;
      case 17:
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 17;
            return 11;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 11;
         return -1;
      case 18:
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 18;
            return 11;
         }
         return -1;
      case 19:
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 19;
            return 11;
         }
         return -1;
      case 20:
         if ((active0 & 0x2000000000L) != 0L || (active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 20;
            return 11;
         }
         return -1;
      case 21:
         if ((active0 & 0x2000000000L) != 0L)
            return 11;
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 21;
            return 11;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000L);
      case 34:
         return jjStopAtPos(0, 9);
      case 35:
         return jjStopAtPos(0, 178);
      case 36:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L);
      case 37:
         jjmatchedKind = 157;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000L);
      case 38:
         jjmatchedKind = 154;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000080000L);
      case 39:
         return jjStopAtPos(0, 12);
      case 40:
         return jjStopAtPos(0, 125);
      case 41:
         return jjStopAtPos(0, 126);
      case 42:
         jjmatchedKind = 152;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1080000000L);
      case 43:
         jjmatchedKind = 150;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400100000L);
      case 44:
         return jjStopAtPos(0, 132);
      case 45:
         jjmatchedKind = 151;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800200000L);
      case 46:
         return jjStartNfaWithStates_0(0, 133, 5);
      case 47:
         jjmatchedKind = 153;
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L, 0x2000000000L);
      case 58:
         return jjStopAtPos(0, 141);
      case 59:
         return jjStopAtPos(0, 131);
      case 60:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40040008000L);
      case 61:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 62:
         jjmatchedKind = 175;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x780000010000L);
      case 63:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000000L);
      case 64:
         jjmatchedKind = 135;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000L);
      case 91:
         return jjStopAtPos(0, 129);
      case 92:
         return jjStopAtPos(0, 179);
      case 93:
         return jjStopAtPos(0, 130);
      case 94:
         jjmatchedKind = 156;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1010000000000L);
      case 96:
         return jjStopAtPos(0, 180);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x38000L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c0000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7fe00000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7f80000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7ff8000000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f8000000000000L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0xe00000000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x3000000000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0xfL, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f80L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x38000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fc0000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffe0000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 127);
      case 124:
         jjmatchedKind = 155;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000040000L);
      case 125:
         return jjStopAtPos(0, 128);
      case 126:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         break;
      case 42:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 28);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         break;
      case 43:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         break;
      case 45:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 181);
         break;
      case 60:
         if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 61:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 169);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 177);
         break;
      case 62:
         if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x380000000000L);
      case 94:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 176);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000600000L, active1, 0x200020040390L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0xf8000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xf80000000L, active1, 0x1c080400L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 11);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000040000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x3010000000000000L, active1, 0x800180000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x220100001800000L, active1, 0x100000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x180000000007L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4c000603e040000L, active1, 0x400000207860L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40090000L, active1, 0x70001c00000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3e00000008L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x900000000020000L, active1, 0x4002020000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x7800000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 170);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 171);
         break;
      case 62:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0x30600100000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0x40060L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00002080000L, active1, 0x409008L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8180000000L, active1, 0x20000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000f0000000000L, active1, 0x1408000800000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000204000000L, active1, 0x4000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000080L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8110002038000000L, active1, 0x100002000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x220000041040000L, active1, 0x41000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000c00000000L, active1, 0x4008000001L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 109, 11);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000010000L, active1, 0x83800080000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000408000L, active1, 0x200002L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 11);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 11);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 11);
         return jjMoveStringLiteralDfa3_0(active0, 0x404000000120000L, active1, 0x900010014b10L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0x40000000000L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(3, 172);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000180090000L, active1, 0x60L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000001000000L, active1, 0x100000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 11);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 110, 11);
         break;
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 11);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 11);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 11);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 11);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 11);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x3084000600000000L, active1, 0x84020000810L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x800000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x100804010300L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0x100000a000000L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 11);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x10000000000L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 11);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x8003000000000000L, active1, 0x480000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x802000000L, active1, 0x8008L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000050800000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0xf2020008000L, active1, 0x8601200002L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3090000001L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000800000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x280000004000000L, active1, 0x484800aL);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000012002000000L, active1, 0xb040000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x800L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 11);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 11);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x800200000L, active1, 0x20001100000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xe0028000000L, active1, 0x80040a000000L);
      case 75:
      case 107:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 11);
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80080004040L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4008400000000L, active1, 0x800000010L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x210000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x401000L);
      case 82:
      case 114:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x8003000000008000L, active1, 0x30000000L);
      case 83:
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 11);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 11);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 11);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 11);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000L, active1, 0x100000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x300L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000200008000L, active1, 0xc0104000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L);
      case 67:
      case 99:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 11);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000800000000L, active1, 0x9000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4008400000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 11);
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000200000L, active1, 0x20400200L);
      case 71:
      case 103:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 11);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 72:
      case 104:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 11);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0x90000000840L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 76:
      case 108:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000180000000L, active1, 0x100000000L);
      case 78:
      case 110:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 11);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0xe0020000000L, active1, 0x10002L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x12000000000L, active1, 0x1000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x200000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 11);
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0x2000808008L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8800000000L, active1, 0x80108010000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000008000L, active1, 0x4002L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L);
      case 69:
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 11);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000280000L);
      case 72:
      case 104:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 11);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0xe2000000000L, active1, 0x4000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2100000000000000L, active1, 0x8008L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x401200L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 11);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000404000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000300000000L, active1, 0xc1000800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0x80000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 11);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 11);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 11);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000004200000L, active1, 0x20c1004242L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0xe0000000000L, active1, 0x800L);
      case 76:
      case 108:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 11);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0x20100000L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 11);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000400000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000100000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 11);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 11);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 96, 11);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x10001000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 11);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 76, 11);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000800000000L, active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0x20204000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 11);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 70, 11);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 88, 11);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 95, 11);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 84, 11);
         return jjMoveStringLiteralDfa9_0(active0, 0x801000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0x80000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 11);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000e0000000000L, active1, 0x800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000100000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 11);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 11);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x480000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L, active1, 0x2000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20080000L);
      case 68:
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 11);
         break;
      case 69:
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 39, 11);
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 107, 11);
         return jjMoveStringLiteralDfa10_0(active0, 0xc0000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000001000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xa00L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x3000000100000000L, active1, 0x48400000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000200000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 93, 11);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0xa00L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L);
      case 78:
      case 110:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 91, 11);
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x280000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 86, 11);
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000001000000L, active1, 0x40000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 21, 11);
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0x2000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200L);
      case 69:
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(11, 78, 11);
         return jjMoveStringLiteralDfa12_0(active0, 0x42104000000L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 57, 11);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L, active1, 0x40000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000000L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 61, 11);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 85, 11);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 43, 11);
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L, active1, 0x40000800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(12, 24, 11);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 49, 11);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000000000L);
      case 87:
      case 119:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 42, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000000000L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 60, 11);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(13, 94, 11);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x800L);
      case 71:
      case 103:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(14, 83, 11);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000L, active1, 0x200L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L, active1, 0x2000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x2100000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x2000000200L);
      case 87:
      case 119:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(15, 75, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(16, 73, 11);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x2000000000L);
      case 83:
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(16, 32, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x2000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(17, 26, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000L, active1, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x2000000000L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 37, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(20, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 101, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec4 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec6 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec7 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec8 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec9 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec10 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec11 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec13 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec14 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec15 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec16 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec17 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec18 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec19 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec20 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec21 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec22 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec23 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec24 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec25 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec26 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec27 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec28 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec29 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec30 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec31 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec35 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec37 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec38 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec39 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec40 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec41 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec42 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec43 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec44 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec45 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec46 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec47 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec48 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec49 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec50 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec51 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec52 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec53 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec54 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec55 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec56 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec57 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec58 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec59 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
static final long[] jjbitVec61 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 53;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 30:
                  if (curChar == 47)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(5);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddStates(12, 16);
                  }
                  break;
               case 1:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(17, 19);
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 11:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 9);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(20, 9);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar != 46)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(23, 25);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(23, 25);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(26, 9);
                  break;
               case 27:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 28:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 31:
                  if (curChar != 47)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(0, 2);
                  break;
               case 32:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(0, 2);
                  break;
               case 33:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 34:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 35:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar != 48)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddStates(12, 16);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(38, 3);
                  break;
               case 39:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(39, 3);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(46, 9);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(52, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(11);
                  break;
               case 3:
                  if ((0x100000001000L & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 117)
                     kind = 117;
                  break;
               case 11:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(11);
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 29:
                  if (kind > 2)
                     kind = 2;
                  break;
               case 32:
                  if (kind > 4)
                     kind = 4;
                  jjAddStates(0, 2);
                  break;
               case 37:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(38, 3);
                  break;
               case 40:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 44:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 47:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 50:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(11);
                  break;
               case 29:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 2)
                     kind = 2;
                  break;
               case 32:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 53 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x20L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 11);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 14);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 13)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   32, 33, 35, 13, 14, 9, 17, 18, 21, 22, 30, 31, 37, 39, 3, 40, 
   47, 5, 6, 9, 13, 14, 9, 23, 24, 9, 41, 42, 48, 49, 50, 7, 
   8, 15, 16, 19, 20, 25, 26, 43, 44, 45, 46, 51, 52, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec38[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec60[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec61[i2] & l2) != 0L);
      default :
         if ((jjbitVec20[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\75", "\100", 
"\44", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\52\52", "\100\75", "\44\75", "\53\75", "\55\75", "\52\75", 
"\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", "\76\76\76", "\76\76", "\76", "\136\136", "\176\75", "\43", "\134", "\140", 
"\77\55", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_JAVADOC_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "IN_STRING_LITERAL",
   "IN_NAME_LITERAL",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, -1, 0, 0, -1, -1, 3, -1, 0, 4, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffc801L, 0xe423ffffffffffffL, 0x3fffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x25f2L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x120cL, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[53];
private final int[] jjstateSet = new int[106];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public UnrealScriptParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public UnrealScriptParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 53; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 2 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 173 :
        image.append(jjstrLiteralImages[173]);
        lengthOfMatch = jjstrLiteralImages[173].length();
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
     matchedToken.image = ">";
         break;
      case 174 :
        image.append(jjstrLiteralImages[174]);
        lengthOfMatch = jjstrLiteralImages[174].length();
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
     matchedToken.image = ">";
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
