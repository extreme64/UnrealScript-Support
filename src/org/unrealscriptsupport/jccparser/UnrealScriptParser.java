/* Generated By:JavaCC: Do not edit this line. UnrealScriptParser.java */
package org.unrealscriptsupport.jccparser;
import java.io.*;
import java.util.*;
/**
 * Grammar to parse UnrealScript from Unreal Tournament 2004.
 * Based on:
 * Grammar to parse Java version 1.5
 * by Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class UnrealScriptParser implements UnrealScriptParserConstants {
    public static final String PARSER_NAME = "UnrealScript Parser";
    public static final float VERSION = 1.0f;
    public static final String PARSER_INFO =
        PARSER_NAME + " Version " + VERSION + ": ";

    public List<ParseException> syntaxErrors = new ArrayList<ParseException> ();

    /**
     * Add to error list and step back to a recovery point.
     */
    void recover(ParseException ex, int recoveryPoint) {

        syntaxErrors.add(ex);
        Token t = getNextToken();

        // (t.kind != recoveryPoint)
        // Backtrack until the recoveryPoint token is found
        // eg. a semicolon

        // (t.next != null)
        // If the recoveryPoint does not exist,
        // then stop it backtracking forever
        while ( (t.next != null) &&
                (t.kind != recoveryPoint) ) {
            t = getNextToken();
        }
    }

    public UnrealScriptParser(String fileName)
    {
        this(System.in);
        try {
            ReInit(new FileInputStream(new File(fileName)));
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String args[]) {

        UnrealScriptParser parser;

        if (args.length == 0) {

            System.out.println(PARSER_INFO +
                               "Reading from standard input . . .");
            parser = new UnrealScriptParser(System.in);
        }
        else if (args.length == 1) {
            System.out.println(PARSER_INFO +
                               "Reading from file " + args[0] + " . . .");

            try {
                parser = new UnrealScriptParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e) {
                System.out.println(PARSER_INFO +
                                   "File " + args[0] + " not found.");
                return;
            }
        }
        else {
            System.out.println(PARSER_INFO + "Usage is one of:");
            System.out.println("         java UnrealScriptParser < inputfile");
            System.out.println("OR");
            System.out.println("         java UnrealScriptParser inputfile");
            return;
        }
        try {
            parser.CompilationUnit();
            System.out.println(PARSER_INFO +
                               "UnrealScript program parsed successfully.");
        }
        catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println(PARSER_INFO +
                               "Encountered errors during parse.");
        }
    }

/*************************************************
 * THE UNREALSCRIPT LANGUAGE GRAMMAR STARTS HERE *
 *************************************************/

/*
 * --- Non-Terminals.
 */

// PROGRAM = CLASSDECL
//                            ( DECLARATIONS )*
//                            ( REPLICATIONBLOCK )?
//                            BODY
//                            ( DEFAULTPROPERTIESBLOCK )?
  final public void CompilationUnit() throws ParseException {
    try {
      ClassDeclaration();
      Body();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _DEFAULTPROPERTIES:
        DefaultPropertiesBlock();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STUFF_TO_IGNORE:
        jj_consume_token(STUFF_TO_IGNORE);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(0);
    } catch (ParseException ex) {
        //recover(ex, SEMICOLON);
        recover(ex, '\u005cn');
    }
  }

// CLASSDECL = class IDENTIFIER ( extends PACKAGEIDENTIFIER )?
//                            ( CLASSPARAMS )* SEMICOLON
  final public void ClassDeclaration() throws ParseException {
    jj_consume_token(CLASS);
    VarName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      PackageIdentifier();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CACHEEXEMPT:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case DEPENDSON:
      case DONTCOLLAPSECATEGORIES:
      case EDITINLINENEW:
      case EXPORTSTRUCTS:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case NATIVE:
      case NATIVEREPLICATION:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOTPLACEABLE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case TRANSIENT:
      case WITHIN:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      ClassParams();
    }
    jj_consume_token(SEMICOLON);
  }

// CLASSPARAMS = CONSTCLASSPARAMS | within PACKAGEIDENTIFIER |
//                            dependson LBRACK PACKAGEIDENTIFIER RBRACK |
//                            config ( LBRACK PACKAGEIDENTIFIER RBRACK )? |
//                            hidecategories LBRACK IDENTIFIERLIST RBRACK |
//                            showcategories LBRACK IDENTIFIERLIST RBRACK
  final public void ClassParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case CACHEEXEMPT:
    case COLLAPSECATEGORIES:
    case DONTCOLLAPSECATEGORIES:
    case EDITINLINENEW:
    case EXPORTSTRUCTS:
    case GUID:
    case HIDEDROPDOWN:
    case NATIVE:
    case NATIVEREPLICATION:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOTPLACEABLE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case SAFEREPLACE:
    case TRANSIENT:
      ConstClassParams();
      break;
    case WITHIN:
      jj_consume_token(WITHIN);
      PackageIdentifier();
      break;
    case DEPENDSON:
      jj_consume_token(DEPENDSON);
      jj_consume_token(LPAREN);
      PackageIdentifier();
      jj_consume_token(RPAREN);
      break;
    case CONFIG:
      jj_consume_token(CONFIG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        PackageIdentifier();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      break;
    case HIDECATEGORIES:
      jj_consume_token(HIDECATEGORIES);
      jj_consume_token(LPAREN);
      IdentifierList();
      jj_consume_token(RPAREN);
      break;
    case SHOWCATEGORIES:
      jj_consume_token(SHOWCATEGORIES);
      jj_consume_token(LPAREN);
      IdentifierList();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// IDENTIFIERLIST = IDENTIFIER ( COMMA IDENTIFIER )*
  final public void IdentifierList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case OBJECT:
        jj_consume_token(OBJECT);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// IDENTIFIER = ( ALPHA | UNDERSCORE ) ( ALPHA | UNDERSCORE | DIGIT )*
// See <IDENTIFIER> above

// packagename.classname or classname.structname
// PACKAGEIDENTIFIER = ( IDENTIFIER DOT )? IDENTIFIER
  final public void PackageIdentifier() throws ParseException {
    VarName();
    PackageIdentifierEnd();
  }

// Workaround for choice conflicts
// Lots of things start with <IDENTIFIER>
  final public void PackageIdentifierEnd() throws ParseException {
    if (jj_2_1(2147483647)) {
      jj_consume_token(DOT);
      VarName();
    } else {
      ;
    }
  }

  final public void ClassIdentifierStart() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(NAME_LITERAL);
    jj_consume_token(DOT);
  }

// QUALIFIEDIDENTIFIER = ( ( class SQUOTE PACKAGEIDENTIFIER SQUOTE DOT default DOT IDENTIFIER )
//                            | ( ( IDENTIFIER DOT )* IDENTIFIER )
//                            )
  final public void QualifiedIdentifier() throws ParseException {
    if (jj_2_2(2147483647)) {
      ClassIdentifierStart();
      QualifiedIdentifierStart();
    } else {
      ;
    }
    IdDotId();
  }

  final public void QualifiedIdentifierStart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      break;
    case CONST:
      jj_consume_token(CONST);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DOT);
  }

// FUNCCALL = ( ( class SQUOTE PACKAGEIDENTIFIER SQUOTE DOT static DOT )
//               | ( ( IDENTIFIER DOT )+ )
//               )?
//               IDENTIFIER LBRACK ( EXPR ( COMMA EXPR )* )? RBRACK
  final public void FuncCall() throws ParseException {
    if (jj_2_4(2147483647)) {
      ClassIdentifierStart();
      if (jj_2_3(2147483647)) {
        FuncCallStart();
      } else {
        ;
      }
    } else {
      ;
    }
    IdDotId();
    FuncCallEnd();
  }

  final public void FuncCallStart() throws ParseException {
    jj_consume_token(STATIC);
    jj_consume_token(DOT);
  }

// C = Spawn(P.ControllerClass,,,P.Location, P.Rotation);
  final public void FuncCallEnd() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    }
    jj_consume_token(RPAREN);
  }

// Pawn(Owner).Weapon.OutOfAmmo()
// GetItemName(String(MoveTarget))
  final public void FuncCallOrQualifiedIdentifier() throws ParseException {
    if (jj_2_5(2147483647)) {
      ClassNameId();
    } else if (jj_2_6(2147483647)) {
      ClassId();
    } else if (jj_2_7(2147483647)) {
      CastId();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        IdDotIdFuncCallEndRep();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ClassNameId() throws ParseException {
    ClassNameIdStart();
    if (jj_2_8(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        FuncCallStart();
        break;
      case CONST:
      case _DEFAULT:
        QualifiedIdentifierStart();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    IdDotIdFuncCallEndRep();
  }

  final public void ClassNameIdStart() throws ParseException {
    ClassIdentifierStart();
  }

  final public void CastId() throws ParseException {
    CastIdStart();
    if (jj_2_9(2147483647)) {
      jj_consume_token(DOT);
      IdDotIdFuncCallEndRep();
    } else {
      ;
    }
  }

  final public void CastIdStart() throws ParseException {
    BasicTypeOrClassType();
    jj_consume_token(LPAREN);
    VarName();
    jj_consume_token(RPAREN);
  }

  final public void ClassId() throws ParseException {
    IdDotId();
    jj_consume_token(DOT);
    jj_consume_token(CLASS);
  }

  final public void IdDotIdFuncCallEndRep() throws ParseException {
    IdDotIdFuncCallEnd();
    label_4:
    while (true) {
      if (jj_2_10(2147483647)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(DOT);
      IdDotIdFuncCallEnd();
    }
  }

  final public void IdDotIdFuncCallEnd() throws ParseException {
    IdDotId();
    if (jj_2_11(2147483647)) {
      FuncCallEnd();
    } else {
      ;
    }
  }

// testPawnArray[1].Weapon.OutOfAmmo();
  final public void IdDotId() throws ParseException {
    VarName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      ArrayDeclEnd();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      if (jj_2_12(2147483647)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(DOT);
      VarName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ArrayDeclEnd();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    }
  }

  final public void FuncCallAndIdentifierList() throws ParseException {
    FuncCallOrQualifiedIdentifier();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      FuncCallOrQualifiedIdentifier();
    }
  }

// STRINGVAL = DQUOTE PRINTABLE DQUOTE
// INTVAL = ( DIGIT+ | ( '0x' ( HEXDIGIT )+ ) )
// FLOATVAL = ( DIGIT )+ DOT ( DIGIT )*
// See above


// -- Declaration parts
// DECLARATIONS = ( CONSTDECL | VARDECL | ENUMDECL | STRUCTDECL ) SEMICOLON
  final public void Declarations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      ConstDecl();
      break;
    case VAR:
      VarDecl();
      break;
    case ENUM:
      EnumDecl();
      break;
    case STRUCT:
      StructDecl();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

// CONSTDECL = const IDENTIFIER = CONSTVALUE
// CONSTVALUE = ( STRINGVAL | INTVAL | FLOATVAL | BOOLVAL )
  final public void ConstDecl() throws ParseException {
    jj_consume_token(CONST);
    VarName();
    jj_consume_token(ASSIGN);
    Expression();
  }

// VARDECL = var ( CONFIGGROUP )? ( VARPARAMS )*
//                            VARTYPE VARIDENTIFIER ( COMMA VARIDENTIFIER )*
  final public void VarDecl() throws ParseException {
    if (jj_2_13(2147483647)) {
      PointerDecl();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        NormalVarDecl();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NormalVarDecl() throws ParseException {
    jj_consume_token(VAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      ConfigGroup();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    label_7:
    while (true) {
      if (jj_2_14(2147483647)) {
        ;
      } else {
        break label_7;
      }
      VarParams();
    }
    VarTypeThenIdentifier();
  }

  final public void PointerDecl() throws ParseException {
    PointerDeclStart();
    VarName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      ArrayDeclEnd();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      if (jj_2_15(2147483647)) {
        BasicTypeOrClassType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ALLOWABSTRACT:
        case ARRAY:
        case AUTO:
        case BEGIN:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CACHE:
        case CACHEEXEMPT:
        case CASE:
        case CLASS:
        case CLOCKWISEFROM:
        case COERCE:
        case COLLAPSECATEGORIES:
        case CONFIG:
        case CONST:
        case CONTINUE:
        case CROSS:
        case DATABINDING:
        case _DEFAULT:
        case _DEFAULTPROPERTIES:
        case DELEGATE:
        case DEPENDSON:
        case DEPRECATED:
        case DO:
        case DONTCOLLAPSECATEGORIES:
        case DOTPRODUCT:
        case DUPLICATETRANSIENT:
        case EDFINDABLE:
        case EDITCONST:
        case EDITFIXEDSIZE:
        case EDITINLINE:
        case EDITINLINENEW:
        case EDITINLINEUSE:
        case EDITORONLY:
        case ELSE:
        case END:
        case ENUM:
        case EVENT:
        case EXEC:
        case EXPORT:
        case EXPORTSTRUCTS:
        case EXTENDS:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case FOREACH:
        case FUNCTION:
        case GLOBAL:
        case GLOBALCONFIG:
        case GOTO:
        case GUID:
        case HIDECATEGORIES:
        case HIDEDROPDOWN:
        case IF:
        case IGNORES:
        case INIT:
        case INPUT:
        case INSTANCED:
        case INT:
        case INTERP:
        case ITERATOR:
        case LATENT:
        case LOCAL:
        case LOCALIZED:
        case NAME:
        case NATIVE:
        case NATIVEREPLICATION:
        case NEW:
        case NOCLEAR:
        case NOEDITINLINEW:
        case NOEXPORT:
        case NOIMPORT:
        case NONE:
        case NONTRANSACTIONAL:
        case NOTFORCONSOLE:
        case NOTPLACEABLE:
        case OBJECT:
        case OPERATOR:
        case OPTIONAL:
        case OUT:
        case PACKAGE:
        case PEROBJECTCONFIG:
        case PLACEABLE:
        case POINTER:
        case POSTOPERATOR:
        case PREOPERATOR:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RELIABLE:
        case REPLICATION:
        case REPNOTIFY:
        case REPRETRY:
        case RETURN:
        case SAFEREPLACE:
        case SHOWCATEGORIES:
        case SIMULATED:
        case SINGULAR:
        case _SKIP:
        case STATE:
        case STATIC:
        case STRING:
        case STRUCT:
        case STRUCTDEFAULTPROPERTIES:
        case SUPER:
        case SWITCH:
        case TRANSIENT:
        case TRAVEL:
        case TRUE:
        case UNRELIABLE:
        case UNTIL:
        case VAR:
        case VIRTUAL:
        case VOID:
        case WITHIN:
        case WHILE:
        case IDENTIFIER:
          VarName();
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void PointerDeclStart() throws ParseException {
    jj_consume_token(VAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      ConfigGroup();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALLOWABSTRACT:
      case CACHE:
      case CONFIG:
      case CONST:
      case DATABINDING:
      case DEPRECATED:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITCONSTARRAY:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINEUSE:
      case EDITORONLY:
      case EXPORT:
      case GLOBALCONFIG:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INTERP:
      case LOCALIZED:
      case NATIVE:
      case NOCLEAR:
      case NOEXPORT:
      case NOIMPORT:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case PRIVATE:
      case PROTECTED:
      case REPNOTIFY:
      case REPRETRY:
      case TRANSIENT:
      case TRAVEL:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      VarParams();
    }
    jj_consume_token(POINTER);
  }

// CONFIGGROUP = LBRACK ( IDENTIFIER )? RBRACK
  final public void ConfigGroup() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case IDENTIFIER:
      VarName();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

// VARTYPE = PACKAGEIDENTIFIER | ENUMDECL | STRUCTDECL | ARRAYDECL | CLASSTYPE | BASICTYPE
// VARIDENTIFIER = IDENTIFIER

// Type can be a package identifier
// eg.
// var() SceneSubtitles.ESST_Mode SubTitleMode;
  final public void VarTypeThenIdentifier() throws ParseException {
    if (jj_2_16(2147483647)) {
      DynArrayDecl();
    } else if (jj_2_17(2147483647)) {
      EnumDecl();
    } else if (jj_2_18(2147483647)) {
      StructDecl();
    } else if (jj_2_19(2147483647)) {
      BasicTypeOrClassType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        PackageIdentifier();
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    VarEnd();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      VarEnd();
    }
  }

  final public void VarEnd() throws ParseException {
    VarName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
    case LT:
      ArrayDeclEndOrVarTags();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  final public void VarName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
      VarNameAlsoKeyword();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// UnrealScript keywords that could also be used as variable names
  final public void VarNameAlsoKeyword() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
      break;
    case ALLOWABSTRACT:
      jj_consume_token(ALLOWABSTRACT);
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      break;
    case AUTO:
      jj_consume_token(AUTO);
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case BREAK:
      jj_consume_token(BREAK);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      break;
    case CACHE:
      jj_consume_token(CACHE);
      break;
    case CACHEEXEMPT:
      jj_consume_token(CACHEEXEMPT);
      break;
    case CASE:
      jj_consume_token(CASE);
      break;
    case CLASS:
      jj_consume_token(CLASS);
      break;
    case CLOCKWISEFROM:
      jj_consume_token(CLOCKWISEFROM);
      break;
    case COERCE:
      jj_consume_token(COERCE);
      break;
    case COLLAPSECATEGORIES:
      jj_consume_token(COLLAPSECATEGORIES);
      break;
    case CONFIG:
      jj_consume_token(CONFIG);
      break;
    case CONST:
      jj_consume_token(CONST);
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      break;
    case CROSS:
      jj_consume_token(CROSS);
      break;
    case DATABINDING:
      jj_consume_token(DATABINDING);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      break;
    case _DEFAULTPROPERTIES:
      jj_consume_token(_DEFAULTPROPERTIES);
      break;
    case DELEGATE:
      jj_consume_token(DELEGATE);
      break;
    case DEPENDSON:
      jj_consume_token(DEPENDSON);
      break;
    case DEPRECATED:
      jj_consume_token(DEPRECATED);
      break;
    case DO:
      jj_consume_token(DO);
      break;
    case DONTCOLLAPSECATEGORIES:
      jj_consume_token(DONTCOLLAPSECATEGORIES);
      break;
    case DOTPRODUCT:
      jj_consume_token(DOTPRODUCT);
      break;
    case DUPLICATETRANSIENT:
      jj_consume_token(DUPLICATETRANSIENT);
      break;
    case EDFINDABLE:
      jj_consume_token(EDFINDABLE);
      break;
    case EDITCONST:
      jj_consume_token(EDITCONST);
      break;
    case EDITFIXEDSIZE:
      jj_consume_token(EDITFIXEDSIZE);
      break;
    case EDITINLINE:
      jj_consume_token(EDITINLINE);
      break;
    case EDITINLINENEW:
      jj_consume_token(EDITINLINENEW);
      break;
    case EDITINLINEUSE:
      jj_consume_token(EDITINLINEUSE);
      break;
    case EDITORONLY:
      jj_consume_token(EDITORONLY);
      break;
    case ELSE:
      jj_consume_token(ELSE);
      break;
    case END:
      jj_consume_token(END);
      break;
    case ENUM:
      jj_consume_token(ENUM);
      break;
    case EVENT:
      jj_consume_token(EVENT);
      break;
    case EXEC:
      jj_consume_token(EXEC);
      break;
    case EXPORT:
      jj_consume_token(EXPORT);
      break;
    case EXPORTSTRUCTS:
      jj_consume_token(EXPORTSTRUCTS);
      break;
    case EXTENDS:
      jj_consume_token(EXTENDS);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case FINAL:
      jj_consume_token(FINAL);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case FOR:
      jj_consume_token(FOR);
      break;
    case FOREACH:
      jj_consume_token(FOREACH);
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
      break;
    case GLOBAL:
      jj_consume_token(GLOBAL);
      break;
    case GLOBALCONFIG:
      jj_consume_token(GLOBALCONFIG);
      break;
    case GOTO:
      jj_consume_token(GOTO);
      break;
    case GUID:
      jj_consume_token(GUID);
      break;
    case HIDECATEGORIES:
      jj_consume_token(HIDECATEGORIES);
      break;
    case HIDEDROPDOWN:
      jj_consume_token(HIDEDROPDOWN);
      break;
    case IF:
      jj_consume_token(IF);
      break;
    case IGNORES:
      jj_consume_token(IGNORES);
      break;
    case INIT:
      jj_consume_token(INIT);
      break;
    case INPUT:
      jj_consume_token(INPUT);
      break;
    case INSTANCED:
      jj_consume_token(INSTANCED);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case INTERP:
      jj_consume_token(INTERP);
      break;
    case ITERATOR:
      jj_consume_token(ITERATOR);
      break;
    case LATENT:
      jj_consume_token(LATENT);
      break;
    case LOCAL:
      jj_consume_token(LOCAL);
      break;
    case LOCALIZED:
      jj_consume_token(LOCALIZED);
      break;
    case NAME:
      jj_consume_token(NAME);
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
      break;
    case NATIVEREPLICATION:
      jj_consume_token(NATIVEREPLICATION);
      break;
    case NEW:
      jj_consume_token(NEW);
      break;
    case NOCLEAR:
      jj_consume_token(NOCLEAR);
      break;
    case NOEDITINLINEW:
      jj_consume_token(NOEDITINLINEW);
      break;
    case NOEXPORT:
      jj_consume_token(NOEXPORT);
      break;
    case NOIMPORT:
      jj_consume_token(NOIMPORT);
      break;
    case NONE:
      jj_consume_token(NONE);
      break;
    case NONTRANSACTIONAL:
      jj_consume_token(NONTRANSACTIONAL);
      break;
    case NOTFORCONSOLE:
      jj_consume_token(NOTFORCONSOLE);
      break;
    case NOTPLACEABLE:
      jj_consume_token(NOTPLACEABLE);
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
      break;
    case OPERATOR:
      jj_consume_token(OPERATOR);
      break;
    case OPTIONAL:
      jj_consume_token(OPTIONAL);
      break;
    case OUT:
      jj_consume_token(OUT);
      break;
    case PACKAGE:
      jj_consume_token(PACKAGE);
      break;
    case PEROBJECTCONFIG:
      jj_consume_token(PEROBJECTCONFIG);
      break;
    case PLACEABLE:
      jj_consume_token(PLACEABLE);
      break;
    case POINTER:
      jj_consume_token(POINTER);
      break;
    case POSTOPERATOR:
      jj_consume_token(POSTOPERATOR);
      break;
    case PREOPERATOR:
      jj_consume_token(PREOPERATOR);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case RELIABLE:
      jj_consume_token(RELIABLE);
      break;
    case REPLICATION:
      jj_consume_token(REPLICATION);
      break;
    case REPNOTIFY:
      jj_consume_token(REPNOTIFY);
      break;
    case REPRETRY:
      jj_consume_token(REPRETRY);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      break;
    case SAFEREPLACE:
      jj_consume_token(SAFEREPLACE);
      break;
    case SHOWCATEGORIES:
      jj_consume_token(SHOWCATEGORIES);
      break;
    case SIMULATED:
      jj_consume_token(SIMULATED);
      break;
    case SINGULAR:
      jj_consume_token(SINGULAR);
      break;
    case _SKIP:
      jj_consume_token(_SKIP);
      break;
    case STATE:
      jj_consume_token(STATE);
      break;
    case STATIC:
      jj_consume_token(STATIC);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case STRUCT:
      jj_consume_token(STRUCT);
      break;
    case STRUCTDEFAULTPROPERTIES:
      jj_consume_token(STRUCTDEFAULTPROPERTIES);
      break;
    case SUPER:
      jj_consume_token(SUPER);
      break;
    case SWITCH:
      jj_consume_token(SWITCH);
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
      break;
    case TRAVEL:
      jj_consume_token(TRAVEL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case UNRELIABLE:
      jj_consume_token(UNRELIABLE);
      break;
    case UNTIL:
      jj_consume_token(UNTIL);
      break;
    case VAR:
      jj_consume_token(VAR);
      break;
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    case WITHIN:
      jj_consume_token(WITHIN);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayDeclEndOrVarTags() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      ArrayDeclEnd();
      break;
    case LT:
      VarTags();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// UE3
// Variable tags
// Eg.
// var localized int variablename<tag1=value|tag2=value>;
// Spaces between words allowed
// Var() bool bEnableSpawning<DisplayName=Spawning Enabled>;
  final public void VarTags() throws ParseException {
    jj_consume_token(LT);
    VarName();
    jj_consume_token(ASSIGN);
    VarTagsValue();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_10;
      }
      jj_consume_token(BIT_OR);
      VarName();
      jj_consume_token(ASSIGN);
      VarTagsValue();
    }
    GT();
  }

  final public void VarTagsValue() throws ParseException {
    label_11:
    while (true) {
      if (jj_2_20(2147483647)) {
        Literal();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ALLOWABSTRACT:
        case ARRAY:
        case AUTO:
        case BEGIN:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CACHE:
        case CACHEEXEMPT:
        case CASE:
        case CLASS:
        case CLOCKWISEFROM:
        case COERCE:
        case COLLAPSECATEGORIES:
        case CONFIG:
        case CONST:
        case CONTINUE:
        case CROSS:
        case DATABINDING:
        case _DEFAULT:
        case _DEFAULTPROPERTIES:
        case DELEGATE:
        case DEPENDSON:
        case DEPRECATED:
        case DO:
        case DONTCOLLAPSECATEGORIES:
        case DOTPRODUCT:
        case DUPLICATETRANSIENT:
        case EDFINDABLE:
        case EDITCONST:
        case EDITFIXEDSIZE:
        case EDITINLINE:
        case EDITINLINENEW:
        case EDITINLINEUSE:
        case EDITORONLY:
        case ELSE:
        case END:
        case ENUM:
        case EVENT:
        case EXEC:
        case EXPORT:
        case EXPORTSTRUCTS:
        case EXTENDS:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case FOREACH:
        case FUNCTION:
        case GLOBAL:
        case GLOBALCONFIG:
        case GOTO:
        case GUID:
        case HIDECATEGORIES:
        case HIDEDROPDOWN:
        case IF:
        case IGNORES:
        case INIT:
        case INPUT:
        case INSTANCED:
        case INT:
        case INTERP:
        case ITERATOR:
        case LATENT:
        case LOCAL:
        case LOCALIZED:
        case NAME:
        case NATIVE:
        case NATIVEREPLICATION:
        case NEW:
        case NOCLEAR:
        case NOEDITINLINEW:
        case NOEXPORT:
        case NOIMPORT:
        case NONE:
        case NONTRANSACTIONAL:
        case NOTFORCONSOLE:
        case NOTPLACEABLE:
        case OBJECT:
        case OPERATOR:
        case OPTIONAL:
        case OUT:
        case PACKAGE:
        case PEROBJECTCONFIG:
        case PLACEABLE:
        case POINTER:
        case POSTOPERATOR:
        case PREOPERATOR:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RELIABLE:
        case REPLICATION:
        case REPNOTIFY:
        case REPRETRY:
        case RETURN:
        case SAFEREPLACE:
        case SHOWCATEGORIES:
        case SIMULATED:
        case SINGULAR:
        case _SKIP:
        case STATE:
        case STATIC:
        case STRING:
        case STRUCT:
        case STRUCTDEFAULTPROPERTIES:
        case SUPER:
        case SWITCH:
        case TRANSIENT:
        case TRAVEL:
        case TRUE:
        case UNRELIABLE:
        case UNTIL:
        case VAR:
        case VIRTUAL:
        case VOID:
        case WITHIN:
        case WHILE:
        case IDENTIFIER:
          VarName();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_11;
      }
    }
  }

// ARRAYDECL = IDENTIFIER LSBRACK INTVAL RSBRACK
  final public void ArrayDecl() throws ParseException {
    VarName();
    ArrayDeclEnd();
  }

// Workaround for choice conflicts
// Lots of things start with <IDENTIFIER>
  final public void ArrayDeclEnd() throws ParseException {
    jj_consume_token(LBRACKET);
    ArrayIndex();
    jj_consume_token(RBRACKET);
  }

// DYNARRAYDECL = array LABRACK (PACKAGEIDENTIFIER | CLASSTYPE | BASICTYPE) RABRACK
  final public void DynArrayDecl() throws ParseException {
    DynArrayDeclStart();
    if (jj_2_21(2147483647)) {
      BasicTypeOrClassType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        PackageIdentifier();
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    GT();
  }

  final public void DynArrayDeclStart() throws ParseException {
    jj_consume_token(ARRAY);
    jj_consume_token(LT);
  }

// CLASSTYPE = class LABRACK PACKAGEIDENTIFIER RABRACK
  final public void ClassType() throws ParseException {
    ClassTypeStart();
    PackageIdentifier();
    GT();
  }

  final public void ClassTypeStart() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(LT);
  }

// ENUMDECL = enum IDENTIFIER LCBRACK ENUMOPTIONS RCBRACK
  final public void EnumDecl() throws ParseException {
    EnumDeclStart();
    VarName();
    jj_consume_token(LBRACE);
    EnumOptions();
    jj_consume_token(RBRACE);
  }

  final public void EnumDeclStart() throws ParseException {
    jj_consume_token(ENUM);
  }

// ENUMOPTIONS = IDENTIFIER ( COMMA IDENTIFIER )*
// Trailing "," ok
  final public void EnumOptions() throws ParseException {
    VarName();
    label_12:
    while (true) {
      if (jj_2_22(2147483647)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(COMMA);
      VarName();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
  }

// STRUCTDECL = struct ( STRUCTPARAMS )* IDENTIFIER ( extends PACKAGEIDENTIFIER )?
//                            LCBRACK STRUCTBODY RCBRACK
  final public void StructDecl() throws ParseException {
    StructDeclStart();
    label_13:
    while (true) {
      if (jj_2_23(2147483647)) {
        ;
      } else {
        break label_13;
      }
      StructParams();
    }
    VarName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      PackageIdentifier();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    StructBody();
    jj_consume_token(RBRACE);
  }

  final public void StructDeclStart() throws ParseException {
    jj_consume_token(STRUCT);
  }

// STRUCTPARAMS = ( native | export )
  final public void StructParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPORT:
      jj_consume_token(EXPORT);
      break;
    case INIT:
      jj_consume_token(INIT);
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// STRUCTBODY = ( VARDECL SEMICOLON )+
  final public void StructBody() throws ParseException {
    label_14:
    while (true) {
      VarDecl();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_14;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCTDEFAULTPROPERTIES:
      StructDefaultPropertiesBlock();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
  }

/*void CppText():
{}
{
    "cpptext" "{" (CppFunc())* "}"
}

void CppFunc():
{}
{
    LOOKAHEAD(CppVirtualFuncStart()) CppVirtualFunc() | CppNormalFunc()
}

void CppFuncArgs():
{}
{
    "("
    ( CppType() CppVarName() ("," CppType() CppVarName())* )?
    ")"
}

void CppNormalFunc():
{}
{
    CppType() CppVarName()
    CppFuncArgs()
    ( ";" | ("{" "}") )
}

void CppVirtualFunc():
{}
{
    CppVirtualFuncStart() CppType() CppVarName()
    CppFuncArgs()
    ( (("=" <INTEGER_LITERAL>)? ";") | ("{" "}") )
}

void CppVirtualFuncStart():
{}
{
    "virtual"
}

void CppType():
{}
{
    ("static" | "const")?
    (BasicType() | "void" | "none" | "object" | ("enum" CppVarName()) | CppVarName())
    (CppPtrRef())?
}

void CppVarName():
{}
{
    <IDENTIFIER>
}

void CppPtrRef():
{}
{
    "&" | (("const")? "*" ("*")?)
}*/

// Replication parts
// REPLICATIONBLOCK = replication LCBRACK ( REPLICATIONBODY )* RCBRACK
  final public void ReplicationBlock() throws ParseException {
    jj_consume_token(REPLICATION);
    jj_consume_token(LBRACE);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case RELIABLE:
      case UNRELIABLE:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_15;
      }
      ReplicationBody();
    }
    jj_consume_token(RBRACE);
  }

// "reliable" and "unreliable" not required in UE3
// REPLICATIONBODY = ( reliable | unreliable ) if LBRACK EXPR RBRACK
//                            IDENTIFIER ( COMMA IDENTIFIER )* SEMICOLON
  final public void ReplicationBody() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELIABLE:
    case UNRELIABLE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELIABLE:
        jj_consume_token(RELIABLE);
        break;
      case UNRELIABLE:
        jj_consume_token(UNRELIABLE);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    FuncCallAndIdentifierList();
    jj_consume_token(SEMICOLON);
  }

// Body parts
// BODY = ( STATEDECL | FUNCTIONDECL )*
  final public void Body() throws ParseException {
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUTO:
      case CONST:
      case DELEGATE:
      case ENUM:
      case EVENT:
      case EXEC:
      case FINAL:
      case FUNCTION:
      case ITERATOR:
      case LATENT:
      case NATIVE:
      case OPERATOR:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case REPLICATION:
      case SIMULATED:
      case SINGULAR:
      case STATE:
      case STATIC:
      case STRUCT:
      case VAR:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case ENUM:
      case STRUCT:
      case VAR:
        Declarations();
        break;
      default:
        jj_la1[46] = jj_gen;
        if (jj_2_24(2147483647)) {
          StateDecl();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DELEGATE:
          case EVENT:
          case EXEC:
          case FINAL:
          case FUNCTION:
          case ITERATOR:
          case LATENT:
          case NATIVE:
          case OPERATOR:
          case POSTOPERATOR:
          case PREOPERATOR:
          case PRIVATE:
          case PROTECTED:
          case SIMULATED:
          case SINGULAR:
          case STATIC:
            FunctionDecl();
            break;
          case REPLICATION:
            ReplicationBlock();
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

// State parts
// STATEDECL = ( STATEPARAMS )* state IDENTIFIER ( CONFIGGROUP )? ( extends IDENTIFIER )? STATEBODY
  final public void StateDecl() throws ParseException {
    StateDeclStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    VarName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      ConfigGroup();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      PackageIdentifier();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    StateBody();
  }

  final public void StateDeclStart() throws ParseException {
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUTO:
      case SIMULATED:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_17;
      }
      StateParams();
    }
    jj_consume_token(STATE);
  }

// STATEBODY = LCBRACK ( STATEIGNORE )? ( FUNCTIONDECL )* STATELABELS RCBRACK
  final public void StateBody() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGNORES:
      StateIgnore();
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELEGATE:
      case EVENT:
      case EXEC:
      case FINAL:
      case FUNCTION:
      case ITERATOR:
      case LATENT:
      case NATIVE:
      case OPERATOR:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case SIMULATED:
      case SINGULAR:
      case STATIC:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_18;
      }
      FunctionDecl();
    }
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
      case END:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_19;
      }
      LabelStatement();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case NAME_LITERAL:
        case ABSTRACT:
        case ALLOWABSTRACT:
        case ARRAY:
        case AUTO:
        case BEGIN:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CACHE:
        case CACHEEXEMPT:
        case CASE:
        case CLASS:
        case CLOCKWISEFROM:
        case COERCE:
        case COLLAPSECATEGORIES:
        case CONFIG:
        case CONST:
        case CONTINUE:
        case CROSS:
        case DATABINDING:
        case _DEFAULT:
        case _DEFAULTPROPERTIES:
        case DELEGATE:
        case DEPENDSON:
        case DEPRECATED:
        case DO:
        case DONTCOLLAPSECATEGORIES:
        case DOTPRODUCT:
        case DUPLICATETRANSIENT:
        case EDFINDABLE:
        case EDITCONST:
        case EDITFIXEDSIZE:
        case EDITINLINE:
        case EDITINLINENEW:
        case EDITINLINEUSE:
        case EDITORONLY:
        case ELSE:
        case END:
        case ENUM:
        case EVENT:
        case EXEC:
        case EXPORT:
        case EXPORTSTRUCTS:
        case EXTENDS:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case FOREACH:
        case FUNCTION:
        case GLOBAL:
        case GLOBALCONFIG:
        case GOTO:
        case GUID:
        case HIDECATEGORIES:
        case HIDEDROPDOWN:
        case IF:
        case IGNORES:
        case INIT:
        case INPUT:
        case INSTANCED:
        case INT:
        case INTERP:
        case ITERATOR:
        case LATENT:
        case LOCAL:
        case LOCALIZED:
        case NAME:
        case NATIVE:
        case NATIVEREPLICATION:
        case NEW:
        case NOCLEAR:
        case NOEDITINLINEW:
        case NOEXPORT:
        case NOIMPORT:
        case NONE:
        case NONTRANSACTIONAL:
        case NOTFORCONSOLE:
        case NOTPLACEABLE:
        case OBJECT:
        case OPERATOR:
        case OPTIONAL:
        case OUT:
        case PACKAGE:
        case PEROBJECTCONFIG:
        case PLACEABLE:
        case POINTER:
        case POSTOPERATOR:
        case PREOPERATOR:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RELIABLE:
        case REPLICATION:
        case REPNOTIFY:
        case REPRETRY:
        case RETURN:
        case SAFEREPLACE:
        case SHOWCATEGORIES:
        case SIMULATED:
        case SINGULAR:
        case _SKIP:
        case STATE:
        case STATIC:
        case STRING:
        case STRUCT:
        case STRUCTDEFAULTPROPERTIES:
        case SUPER:
        case SWITCH:
        case TRANSIENT:
        case TRAVEL:
        case TRUE:
        case UNRELIABLE:
        case UNTIL:
        case VAR:
        case VIRTUAL:
        case VOID:
        case WITHIN:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_20;
        }
        CodeLine();
      }
    }
    jj_consume_token(RBRACE);
  }

// STATEIGNORE = ignores IDENTIFIER ( COMMA IDENTIFIER )* SEMICOLON
  final public void StateIgnore() throws ParseException {
    jj_consume_token(IGNORES);
    jj_consume_token(IDENTIFIER);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_21;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
    jj_consume_token(SEMICOLON);
  }

// Function  parts
// operators require an set amouth of arguments
// FUNCTIONDECL = ( NORMALFUNC | OPERATORFUNC )
  final public void FunctionDecl() throws ParseException {
    NormalOrOperatorFunc();
  }

// Moved (FunctionParams())* here to prevent choice conflicts
// FUNCTIONPARAMS = CONSTFUNCPARAMS | native ( LBRACK INTVAL RBRACK )?
// Native functions can have const after them
// native function int doSomething(string myData) const;

// ConstFuncParams() can be before or after "function"
  final public void NormalOrOperatorFunc() throws ParseException {
    if (jj_2_25(2147483647)) {
      NativeFuncParams();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXEC:
        case FINAL:
        case ITERATOR:
        case LATENT:
        case PRIVATE:
        case PROTECTED:
        case SIMULATED:
        case SINGULAR:
        case STATIC:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_22;
        }
        ConstFuncParams();
      }
      FuncEnd();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        jj_consume_token(CONST);
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      FunctionBody();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELEGATE:
      case EVENT:
      case EXEC:
      case FINAL:
      case FUNCTION:
      case ITERATOR:
      case LATENT:
      case OPERATOR:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case SIMULATED:
      case SINGULAR:
      case STATIC:
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXEC:
          case FINAL:
          case ITERATOR:
          case LATENT:
          case PRIVATE:
          case PROTECTED:
          case SIMULATED:
          case SINGULAR:
          case STATIC:
            ;
            break;
          default:
            jj_la1[59] = jj_gen;
            break label_23;
          }
          ConstFuncParams();
        }
        FuncEnd();
        FunctionBody();
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NativeFuncParams() throws ParseException {
    NativeFuncParamsStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
  }

  final public void NativeFuncParamsStart() throws ParseException {
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXEC:
      case FINAL:
      case ITERATOR:
      case LATENT:
      case PRIVATE:
      case PROTECTED:
      case SIMULATED:
      case SINGULAR:
      case STATIC:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_24;
      }
      ConstFuncParams();
    }
    jj_consume_token(NATIVE);
  }

  final public void FuncEnd() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELEGATE:
    case EVENT:
    case FUNCTION:
      NormalFuncEnd();
      break;
    case OPERATOR:
    case POSTOPERATOR:
    case PREOPERATOR:
      OperatorFuncEnd();
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// NORMALFUNC = ( FUNCTIONPARAMS )* FUNCTIONTYPE ( LOCALTYPE )?
//              IDENTIFIER
//              LBRACK ( FUNCTIONARGS ( COMMA FUNCTIONARGS )* )? RBRACK
//              FUNCTIONBODY
  final public void NormalFuncEnd() throws ParseException {
    FunctionType();
    label_25:
    while (true) {
      if (jj_2_26(2147483647)) {
        ;
      } else {
        break label_25;
      }
      ConstFuncParams();
    }
    ReturnTypeThenIdentifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case IDENTIFIER:
      FunctionArgs();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_26;
        }
        jj_consume_token(COMMA);
        FunctionArgs();
      }
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

// Prevent choice conflict
// If is a PackageIdentifier() in LocalType(), and then <IDENTIFIER>
// Instead of:
// ( LocalType() )? <IDENTIFIER>
// LocalTypeThenIdentifier
  final public void ReturnTypeThenIdentifier() throws ParseException {
    if (jj_2_27(2147483647)) {
      jj_consume_token(VOID);
      VarName();
    } else if (jj_2_28(2147483647)) {
      LocalTypeEnd();
      VarName();
    } else if (jj_2_29(2147483647)) {
      PackageIdentifierOrArrayDecl();
      VarName();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        VarName();
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// OPERATORFUNC = ( FUNCTIONPARAMS )* OPERATORTYPE FUNCTIONBODY
  final public void OperatorFuncEnd() throws ParseException {
    OperatorType();
  }

// OPERATORTYPE = ( BINARYOPERATOR | UNARYOPERATOR )
  final public void OperatorType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR:
      BinaryOperator();
      break;
    case POSTOPERATOR:
    case PREOPERATOR:
      UnaryOperator();
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// requires two arguments
// BINARYOPERATOR = operator LBRACK INTVAL RBRACK PACKAGEIDENTIFIER OPIDENTIFIER
//                            LBRACK FUNCTIONARGS COMMA FUNCTIONARGS RBRACK
  final public void BinaryOperator() throws ParseException {
    jj_consume_token(OPERATOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    if (jj_2_30(2147483647)) {
      LocalTypeEnd();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        PackageIdentifier();
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    OpIdentifier();
    jj_consume_token(LPAREN);
    FunctionArgs();
    jj_consume_token(COMMA);
    FunctionArgs();
    jj_consume_token(RPAREN);
  }

// requires one argument
// UNARYOPERATOR = ( preoperator | postoperator ) PACKAGEIDENTIFIER OPIDENTIFIER
//                            LBRACK FUNCTIONARGS RBRACK
  final public void UnaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREOPERATOR:
      jj_consume_token(PREOPERATOR);
      break;
    case POSTOPERATOR:
      jj_consume_token(POSTOPERATOR);
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_31(2147483647)) {
      LocalTypeEnd();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        PackageIdentifier();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    OpIdentifier();
    jj_consume_token(LPAREN);
    FunctionArgs();
    jj_consume_token(RPAREN);
  }

// FUNCTIONARGS = ( optional | out | coerce )? FUNCTIONARGTYPE IDENTIFIER
// "optional" can have default value in UE3
// eg.
// function myFunc(optional int x = -1) {};
  final public void FunctionArgs() throws ParseException {
    if (jj_2_32(2147483647)) {
      OptionalFunctionArg();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        FunctionArg();
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void OptionalFunctionArg() throws ParseException {
    jj_consume_token(OPTIONAL);
    FunctionArg();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      UnaryExpression();
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
  }

  final public void FunctionArg() throws ParseException {
    label_27:
    while (true) {
      if (jj_2_33(2147483647)) {
        ;
      } else {
        break label_27;
      }
      FuncArgParamsNotOpt();
    }
    FunctionArgTypeAndName();
  }

  final public void FuncArgParamsNotOpt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUT:
      jj_consume_token(OUT);
      break;
    case COERCE:
      jj_consume_token(COERCE);
      break;
    case _SKIP:
      jj_consume_token(_SKIP);
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FunctionArgTypeAndName() throws ParseException {
    FunctionArgType();
    VarName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      ArrayDeclEnd();
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
  }

// FUNCTIONARGTYPE = BASICTYPE | PACKAGEIDENTIFIER
  final public void FunctionArgType() throws ParseException {
    if (jj_2_34(2147483647)) {
      LocalTypeEnd();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        PackageIdentifier();
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// FUNCTIONBODY = ( SEMICOLON | ( ( LOCALDECL )* ( CODELINE )* ) ( SEMICOLON )? )
  final public void FunctionBody() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      label_28:
      while (true) {
        if (jj_2_35(2147483647)) {
          ;
        } else {
          break label_28;
        }
        LocalDecl();
      }
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case NAME_LITERAL:
        case ABSTRACT:
        case ALLOWABSTRACT:
        case ARRAY:
        case AUTO:
        case BEGIN:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CACHE:
        case CACHEEXEMPT:
        case CASE:
        case CLASS:
        case CLOCKWISEFROM:
        case COERCE:
        case COLLAPSECATEGORIES:
        case CONFIG:
        case CONST:
        case CONTINUE:
        case CROSS:
        case DATABINDING:
        case _DEFAULT:
        case _DEFAULTPROPERTIES:
        case DELEGATE:
        case DEPENDSON:
        case DEPRECATED:
        case DO:
        case DONTCOLLAPSECATEGORIES:
        case DOTPRODUCT:
        case DUPLICATETRANSIENT:
        case EDFINDABLE:
        case EDITCONST:
        case EDITFIXEDSIZE:
        case EDITINLINE:
        case EDITINLINENEW:
        case EDITINLINEUSE:
        case EDITORONLY:
        case ELSE:
        case END:
        case ENUM:
        case EVENT:
        case EXEC:
        case EXPORT:
        case EXPORTSTRUCTS:
        case EXTENDS:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case FOREACH:
        case FUNCTION:
        case GLOBAL:
        case GLOBALCONFIG:
        case GOTO:
        case GUID:
        case HIDECATEGORIES:
        case HIDEDROPDOWN:
        case IF:
        case IGNORES:
        case INIT:
        case INPUT:
        case INSTANCED:
        case INT:
        case INTERP:
        case ITERATOR:
        case LATENT:
        case LOCAL:
        case LOCALIZED:
        case NAME:
        case NATIVE:
        case NATIVEREPLICATION:
        case NEW:
        case NOCLEAR:
        case NOEDITINLINEW:
        case NOEXPORT:
        case NOIMPORT:
        case NONE:
        case NONTRANSACTIONAL:
        case NOTFORCONSOLE:
        case NOTPLACEABLE:
        case OBJECT:
        case OPERATOR:
        case OPTIONAL:
        case OUT:
        case PACKAGE:
        case PEROBJECTCONFIG:
        case PLACEABLE:
        case POINTER:
        case POSTOPERATOR:
        case PREOPERATOR:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RELIABLE:
        case REPLICATION:
        case REPNOTIFY:
        case REPRETRY:
        case RETURN:
        case SAFEREPLACE:
        case SHOWCATEGORIES:
        case SIMULATED:
        case SINGULAR:
        case _SKIP:
        case STATE:
        case STATIC:
        case STRING:
        case STRUCT:
        case STRUCTDEFAULTPROPERTIES:
        case SUPER:
        case SWITCH:
        case TRANSIENT:
        case TRAVEL:
        case TRUE:
        case UNRELIABLE:
        case UNTIL:
        case VAR:
        case VIRTUAL:
        case VOID:
        case WITHIN:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_29;
        }
        CodeLine();
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// LOCALDECL = local LOCALTYPE IDENTIFIER ( COMMA IDENTIFIER )*
  final public void LocalDecl() throws ParseException {
    LocalDeclStart();
    LocalType();
    LocalEnd();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_30;
      }
      jj_consume_token(COMMA);
      LocalEnd();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void LocalEnd() throws ParseException {
    VarName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      ArrayDeclEnd();
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
  }

  final public void LocalDeclStart() throws ParseException {
    jj_consume_token(LOCAL);
  }

// LOCALTYPE = PACKAGEIDENTIFIER | ARRAYDECL | CLASSTYPE | BASICTYPE
  final public void LocalType() throws ParseException {
    if (jj_2_36(2147483647)) {
      LocalTypeEnd();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        PackageIdentifierOrArrayDecl();
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// LocalType without PackageIdentifier and ArrayDecl
// to prevent choice conflicts with <IDENTIFIER>
  final public void LocalTypeEnd() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FLOAT:
    case INT:
    case NAME:
    case STRING:
      BasicTypeOrClassType();
      break;
    case ARRAY:
      DynArrayDecl();
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// choice conflict - multiple things that start with <IDENTIFIER>
  final public void PackageIdentifierOrArrayDecl() throws ParseException {
    VarName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      ArrayDeclEnd();
      break;
    default:
      jj_la1[83] = jj_gen;
      PackageIdentifierEnd();
    }
  }

// Code parts
// CODELINE = ( STATEMENT | ASSIGNMENT | IFTHENELSE | WHILELOOP | DOLOOP
//              | SWITCHCASE | RETURNFUNC | FOREACHLOOP | FORLOOP )
  final public void CodeLine() throws ParseException {
    try {
      if (jj_2_37(2147483647)) {
        IfStatement();
      } else if (jj_2_38(2147483647)) {
        WhileStatement();
      } else if (jj_2_39(2147483647)) {
        DoStatement();
      } else if (jj_2_40(2147483647)) {
        ForStatement();
      } else if (jj_2_41(2147483647)) {
        ForEachStatement();
      } else if (jj_2_42(2147483647)) {
        BreakStatement();
      } else if (jj_2_43(2147483647)) {
        ContinueStatement();
      } else if (jj_2_44(2147483647)) {
        ReturnStatement();
      } else if (jj_2_45(2147483647)) {
        GotoStatement();
      } else if (jj_2_46(2147483647)) {
        SwitchStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          CodeBlock();
          break;
        default:
          jj_la1[84] = jj_gen;
          if (jj_2_47(2147483647)) {
            LabelStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case STRING_LITERAL:
            case NAME_LITERAL:
            case ABSTRACT:
            case ALLOWABSTRACT:
            case ARRAY:
            case AUTO:
            case BEGIN:
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CACHE:
            case CACHEEXEMPT:
            case CASE:
            case CLASS:
            case CLOCKWISEFROM:
            case COERCE:
            case COLLAPSECATEGORIES:
            case CONFIG:
            case CONST:
            case CONTINUE:
            case CROSS:
            case DATABINDING:
            case _DEFAULT:
            case _DEFAULTPROPERTIES:
            case DELEGATE:
            case DEPENDSON:
            case DEPRECATED:
            case DO:
            case DONTCOLLAPSECATEGORIES:
            case DOTPRODUCT:
            case DUPLICATETRANSIENT:
            case EDFINDABLE:
            case EDITCONST:
            case EDITFIXEDSIZE:
            case EDITINLINE:
            case EDITINLINENEW:
            case EDITINLINEUSE:
            case EDITORONLY:
            case ELSE:
            case END:
            case ENUM:
            case EVENT:
            case EXEC:
            case EXPORT:
            case EXPORTSTRUCTS:
            case EXTENDS:
            case FALSE:
            case FINAL:
            case FLOAT:
            case FOR:
            case FOREACH:
            case FUNCTION:
            case GLOBAL:
            case GLOBALCONFIG:
            case GOTO:
            case GUID:
            case HIDECATEGORIES:
            case HIDEDROPDOWN:
            case IF:
            case IGNORES:
            case INIT:
            case INPUT:
            case INSTANCED:
            case INT:
            case INTERP:
            case ITERATOR:
            case LATENT:
            case LOCAL:
            case LOCALIZED:
            case NAME:
            case NATIVE:
            case NATIVEREPLICATION:
            case NEW:
            case NOCLEAR:
            case NOEDITINLINEW:
            case NOEXPORT:
            case NOIMPORT:
            case NONE:
            case NONTRANSACTIONAL:
            case NOTFORCONSOLE:
            case NOTPLACEABLE:
            case OBJECT:
            case OPERATOR:
            case OPTIONAL:
            case OUT:
            case PACKAGE:
            case PEROBJECTCONFIG:
            case PLACEABLE:
            case POINTER:
            case POSTOPERATOR:
            case PREOPERATOR:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case RELIABLE:
            case REPLICATION:
            case REPNOTIFY:
            case REPRETRY:
            case RETURN:
            case SAFEREPLACE:
            case SHOWCATEGORIES:
            case SIMULATED:
            case SINGULAR:
            case _SKIP:
            case STATE:
            case STATIC:
            case STRING:
            case STRUCT:
            case STRUCTDEFAULTPROPERTIES:
            case SUPER:
            case SWITCH:
            case TRANSIENT:
            case TRAVEL:
            case TRUE:
            case UNRELIABLE:
            case UNTIL:
            case VAR:
            case VIRTUAL:
            case VOID:
            case WITHIN:
            case WHILE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
              Expression();
              jj_consume_token(SEMICOLON);
              break;
            case SEMICOLON:
              EmptyStatement();
              break;
            default:
              jj_la1[85] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (ParseException ex) {
        recover(ex, SEMICOLON);
    }
  }

// CODEBLOCK = ( CODELINE | ( LCBRACK ( CODELINE )* RCBRACK ) )
  final public void CodeBlock() throws ParseException {
    jj_consume_token(LBRACE);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_31;
      }
      CodeLine();
    }
    jj_consume_token(RBRACE);
  }

// STATEMENT = FUNCCALL SEMICOLON
  final public void Statement() throws ParseException {
    FuncCall();
    jj_consume_token(SEMICOLON);
  }

// ASSIGNMENT = IDENTIFIER EQUALS EXPR SEMICOLON
  final public void Assignment() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    Expression();
    jj_consume_token(SEMICOLON);
  }

// IFTHENELSE = if LBRACK EXPR RBRACK CODEBLOCK ( else CODEBLOCK )?'
// The disambiguating algorithm of JavaCC automatically binds dangling
// else's to the innermost if statement.  The LOOKAHEAD specification
// is to tell JavaCC that we know what we are doing.
  final public void IfStatement() throws ParseException {
    IfStatementStart();
    Expression();
    jj_consume_token(RPAREN);
    CodeLine();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      CodeLine();
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
  }

  final public void IfStatementStart() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
  }

// WHILELOOP = while LBRACK EXPR RBRACK CODEBLOCK
  final public void WhileStatement() throws ParseException {
    WhileStatementStart();
    Expression();
    jj_consume_token(RPAREN);
    CodeLine();
  }

  final public void WhileStatementStart() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
  }

// DOLOOP = do CODEBLOCK until LBRACK EXPR RBRACK
  final public void DoStatement() throws ParseException {
    DoStatementStart();
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void DoStatementStart() throws ParseException {
    jj_consume_token(DO);
    CodeLine();
    jj_consume_token(UNTIL);
  }

// SWITCHCASE = switch LBRACK EXPR RBRACK LCBRACK ( CASERULE )+ ( DEFAULTRULE )? RCBRACK
  final public void SwitchStatement() throws ParseException {
    SwitchStart();
    label_32:
    while (true) {
      if (jj_2_48(2147483647)) {
        ;
      } else {
        break label_32;
      }
      SwitchLabel();
    }
    if (jj_2_49(2147483647)) {
      DefaultLabel();
    } else {
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void SwitchStart() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
  }

// CASERULE = case INTVAL COLON CODEBLOCK
  final public void SwitchLabel() throws ParseException {
    SwitchLabelStart();
    if (jj_2_50(2147483647)) {
      Literal();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        QualifiedIdentifier();
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(COLON);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_33;
      }
      if (jj_2_51(2147483647)) {
        SwitchLabel();
      } else if (jj_2_52(2147483647)) {
        DefaultLabel();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case NAME_LITERAL:
        case ABSTRACT:
        case ALLOWABSTRACT:
        case ARRAY:
        case AUTO:
        case BEGIN:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CACHE:
        case CACHEEXEMPT:
        case CASE:
        case CLASS:
        case CLOCKWISEFROM:
        case COERCE:
        case COLLAPSECATEGORIES:
        case CONFIG:
        case CONST:
        case CONTINUE:
        case CROSS:
        case DATABINDING:
        case _DEFAULT:
        case _DEFAULTPROPERTIES:
        case DELEGATE:
        case DEPENDSON:
        case DEPRECATED:
        case DO:
        case DONTCOLLAPSECATEGORIES:
        case DOTPRODUCT:
        case DUPLICATETRANSIENT:
        case EDFINDABLE:
        case EDITCONST:
        case EDITFIXEDSIZE:
        case EDITINLINE:
        case EDITINLINENEW:
        case EDITINLINEUSE:
        case EDITORONLY:
        case ELSE:
        case END:
        case ENUM:
        case EVENT:
        case EXEC:
        case EXPORT:
        case EXPORTSTRUCTS:
        case EXTENDS:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case FOREACH:
        case FUNCTION:
        case GLOBAL:
        case GLOBALCONFIG:
        case GOTO:
        case GUID:
        case HIDECATEGORIES:
        case HIDEDROPDOWN:
        case IF:
        case IGNORES:
        case INIT:
        case INPUT:
        case INSTANCED:
        case INT:
        case INTERP:
        case ITERATOR:
        case LATENT:
        case LOCAL:
        case LOCALIZED:
        case NAME:
        case NATIVE:
        case NATIVEREPLICATION:
        case NEW:
        case NOCLEAR:
        case NOEDITINLINEW:
        case NOEXPORT:
        case NOIMPORT:
        case NONE:
        case NONTRANSACTIONAL:
        case NOTFORCONSOLE:
        case NOTPLACEABLE:
        case OBJECT:
        case OPERATOR:
        case OPTIONAL:
        case OUT:
        case PACKAGE:
        case PEROBJECTCONFIG:
        case PLACEABLE:
        case POINTER:
        case POSTOPERATOR:
        case PREOPERATOR:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RELIABLE:
        case REPLICATION:
        case REPNOTIFY:
        case REPRETRY:
        case RETURN:
        case SAFEREPLACE:
        case SHOWCATEGORIES:
        case SIMULATED:
        case SINGULAR:
        case _SKIP:
        case STATE:
        case STATIC:
        case STRING:
        case STRUCT:
        case STRUCTDEFAULTPROPERTIES:
        case SUPER:
        case SWITCH:
        case TRANSIENT:
        case TRAVEL:
        case TRUE:
        case UNRELIABLE:
        case UNTIL:
        case VAR:
        case VIRTUAL:
        case VOID:
        case WITHIN:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          CodeLine();
          break;
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void SwitchLabelStart() throws ParseException {
    jj_consume_token(CASE);
  }

// DEFAULTRULE = default CODEBLOCK
  final public void DefaultLabel() throws ParseException {
    DefaultLabelStart();
    jj_consume_token(COLON);
    label_34:
    while (true) {
      CodeLine();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_34;
      }
    }
  }

  final public void DefaultLabelStart() throws ParseException {
    jj_consume_token(_DEFAULT);
  }

// RETURNFUNC = return ( EXPR )? SEMICOLON
  final public void ReturnStatement() throws ParseException {
    ReturnStatementStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ReturnStatementStart() throws ParseException {
    jj_consume_token(RETURN);
  }

// eg.
// {
//     LoopForever:
//         goto LoopForever;
// }
  final public void GotoStatement() throws ParseException {
    GotoStatementStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case NAME_LITERAL:
      jj_consume_token(NAME_LITERAL);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      jj_consume_token(NAME_LITERAL);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void GotoStatementStart() throws ParseException {
    jj_consume_token(GOTO);
  }

// STATELABELS = ( IDENTIFIER COLON ( CODELINE )* )*
  final public void LabelStatement() throws ParseException {
    LabelStatementStart();
  }

  final public void LabelStatementStart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COLON);
  }

// FOREACHLOOP = foreach FUNCCALL CODEBLOCK
  final public void ForEachStatement() throws ParseException {
    ForEachStatementStart();
    FuncCall();
    CodeLine();
  }

  final public void ForEachStatementStart() throws ParseException {
    jj_consume_token(FOREACH);
  }

// FORLOOP = for LBRACK ASSIGNMENT SEMICOLON EXPR SEMICOLON EXPR RBRACK CODEBLOCK
  final public void ForStatement() throws ParseException {
    ForStatementStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForInit();
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForUpdate();
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    CodeLine();
  }

  final public void ForStatementStart() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
  }

  final public void ForInit() throws ParseException {
    StatementExpressionList();
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_35;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

// EXPR = OPERAND ( OPIDENTIFIER OPERAND )*
// This expansion has been written this way instead of:
//   Assignment() | ConditionalExpression()
// for performance reasons.
// However, it is a weakening of the grammar for it allows the LHS of
// assignments to be any conditional expression whereas it can only be
// a primary expression.  Consider adding a semantic predicate to work
// around this.
  final public void Expression() throws ParseException {
    BinaryExpression();
  }

  final public void TernaryExpression() throws ParseException {
    ConditionalExpression();
  }

  final public void ConditionalExpression() throws ParseException {
    BinaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case HOOK:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case DOUBLEHOOK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
      case DOUBLEHOOK:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HOOK:
          jj_consume_token(HOOK);
          break;
        case DOUBLEHOOK:
          jj_consume_token(DOUBLEHOOK);
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[100] = jj_gen;
        ;
      }
      BinaryExpression();
      jj_consume_token(COLON);
      BinaryExpression();
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
  }

/*void BinaryExpression():
{}
{
    UnaryExpression() (LOOKAHEAD(2) OperatorNames() UnaryExpressionNotPlusMinus())*
}*/
  final public void BinaryExpression() throws ParseException {
    exp2();
    label_36:
    while (true) {
      if (jj_2_53(2147483647)) {
        ;
      } else {
        break label_36;
      }
      OperatorNames2();
      exp2();
    }
  }

  final public void exp2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
    exp1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
  }

  final public void exp1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[106] = jj_gen;
      if (jj_2_54(2147483647)) {
        NewStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case NAME_LITERAL:
        case ABSTRACT:
        case ALLOWABSTRACT:
        case ARRAY:
        case AUTO:
        case BEGIN:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CACHE:
        case CACHEEXEMPT:
        case CASE:
        case CLASS:
        case CLOCKWISEFROM:
        case COERCE:
        case COLLAPSECATEGORIES:
        case CONFIG:
        case CONST:
        case CONTINUE:
        case CROSS:
        case DATABINDING:
        case _DEFAULT:
        case _DEFAULTPROPERTIES:
        case DELEGATE:
        case DEPENDSON:
        case DEPRECATED:
        case DO:
        case DONTCOLLAPSECATEGORIES:
        case DOTPRODUCT:
        case DUPLICATETRANSIENT:
        case EDFINDABLE:
        case EDITCONST:
        case EDITFIXEDSIZE:
        case EDITINLINE:
        case EDITINLINENEW:
        case EDITINLINEUSE:
        case EDITORONLY:
        case ELSE:
        case END:
        case ENUM:
        case EVENT:
        case EXEC:
        case EXPORT:
        case EXPORTSTRUCTS:
        case EXTENDS:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case FOREACH:
        case FUNCTION:
        case GLOBAL:
        case GLOBALCONFIG:
        case GOTO:
        case GUID:
        case HIDECATEGORIES:
        case HIDEDROPDOWN:
        case IF:
        case IGNORES:
        case INIT:
        case INPUT:
        case INSTANCED:
        case INT:
        case INTERP:
        case ITERATOR:
        case LATENT:
        case LOCAL:
        case LOCALIZED:
        case NAME:
        case NATIVE:
        case NATIVEREPLICATION:
        case NEW:
        case NOCLEAR:
        case NOEDITINLINEW:
        case NOEXPORT:
        case NOIMPORT:
        case NONE:
        case NONTRANSACTIONAL:
        case NOTFORCONSOLE:
        case NOTPLACEABLE:
        case OBJECT:
        case OPERATOR:
        case OPTIONAL:
        case OUT:
        case PACKAGE:
        case PEROBJECTCONFIG:
        case PLACEABLE:
        case POINTER:
        case POSTOPERATOR:
        case PREOPERATOR:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RELIABLE:
        case REPLICATION:
        case REPNOTIFY:
        case REPRETRY:
        case RETURN:
        case SAFEREPLACE:
        case SHOWCATEGORIES:
        case SIMULATED:
        case SINGULAR:
        case _SKIP:
        case STATE:
        case STATIC:
        case STRING:
        case STRUCT:
        case STRUCTDEFAULTPROPERTIES:
        case SUPER:
        case SWITCH:
        case TRANSIENT:
        case TRAVEL:
        case TRUE:
        case UNRELIABLE:
        case UNTIL:
        case VAR:
        case VIRTUAL:
        case VOID:
        case WITHIN:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case IDENTIFIER:
          FuncCallOrIdentifierSpecifierOrLiteral();
          break;
        default:
          jj_la1[107] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void FuncCallOrIdentifierSpecifierOrLiteral() throws ParseException {
    if (jj_2_55(2147483647)) {
      FuncCallOrIdentifierSpecifier();
    } else if (jj_2_56(2147483647)) {
      Literal();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        FuncCallOrIdentifierSpecifier();
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// new operator in UE3
// ObjectVar = new[(InOuter, InName, InFlags)] <class'InClass'>[(InTemplate)];
// <class'InClass'> could be like class'InClass' or a variable name, ObjectClass
// eg.
// NewObj = new class'Engine.LightFunction';
// NewObj = new(Self,'NewLight') class'Engine.LightFunction';
// NewObj = new(None,'NewLight') class'Engine.LightFunction' (LightFunctionTemplate);
// Result = new(Outer) ObjectClass;
// return new(None, Repl(RecordName, " ", Chr(27))) class'MaplistRecord';
  final public void NewExpression() throws ParseException {
    NewExpressionStart1();
    NewStatement();
  }

  final public void NewExpressionStart() throws ParseException {
    NewExpressionStart1();
    NewStatementStart();
  }

  final public void NewExpressionStart1() throws ParseException {
    VarName();
    jj_consume_token(ASSIGN);
  }

  final public void NewStatement() throws ParseException {
    NewStatementStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      NewParams();
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    NewClass();
  }

  final public void NewStatementStart() throws ParseException {
    jj_consume_token(NEW);
  }

// (param1)
// (param1, 'param2')
// (param1, 'param2', param3)
// params could also be the result of a function call
  final public void NewParams() throws ParseException {
    NewParamsStart();
    NewParam1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      NewParam2();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        ArrayIndex();
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void NewParam1() throws ParseException {
    FuncCallOrQualifiedIdentifier();
  }

  final public void NewParam2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME_LITERAL:
      jj_consume_token(NAME_LITERAL);
      break;
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case IDENTIFIER:
      FuncCallOrQualifiedIdentifier();
      break;
    default:
      jj_la1[112] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NewParam3() throws ParseException {
    ArrayIndex();
  }

  final public void NewParamsStart() throws ParseException {
    jj_consume_token(LPAREN);
  }

// class'classname' (intemplate'name')
  final public void NewClass() throws ParseException {
    NewClassStart();
    if (jj_2_57(2147483647)) {
      jj_consume_token(LPAREN);
      VarName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME_LITERAL:
        jj_consume_token(NAME_LITERAL);
        break;
      default:
        jj_la1[113] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } else {
      ;
    }
  }

// class'classname'
  final public void NewClassStart() throws ParseException {
    if (jj_2_58(2147483647)) {
      jj_consume_token(CLASS);
      jj_consume_token(NAME_LITERAL);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        IdDotId();
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// OPIDENTIFIER = IDENTIFIER | OPERATORNAMES
  final public void OpIdentifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOCKWISEFROM:
    case CROSS:
    case DOTPRODUCT:
    case ASSIGN:
    case AT:
    case DOLLARS:
    case LT:
    case BANG:
    case TILDE:
    case HOOK:
    case COLON:
    case EQ:
    case LE:
    case GE:
    case NE:
    case SC_OR:
    case SC_AND:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
    case SLASH:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case REM:
    case LSHIFT:
    case EXPONENT:
    case ATASSIGN:
    case DOLLARSASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
    case DOUBLEHOOK:
    case DASHASSIGNDASH:
    case RUNSIGNEDSHIFT:
    case RSIGNEDSHIFT:
    case GT:
    case 206:
    case 207:
      OperatorNames();
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OpIdentifier2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOCKWISEFROM:
    case CROSS:
    case DOTPRODUCT:
    case ASSIGN:
    case AT:
    case DOLLARS:
    case LT:
    case HOOK:
    case COLON:
    case EQ:
    case LE:
    case GE:
    case NE:
    case SC_OR:
    case SC_AND:
    case PLUS:
    case MINUS:
    case STAR:
    case SLASH:
    case BIT_AND:
    case BIT_OR:
    case XOR:
    case REM:
    case LSHIFT:
    case EXPONENT:
    case ATASSIGN:
    case DOLLARSASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
    case DOUBLEHOOK:
    case DASHASSIGNDASH:
    case RUNSIGNEDSHIFT:
    case RSIGNEDSHIFT:
    case GT:
    case 206:
    case 207:
      OperatorNames2();
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//OPERATORNAMES  = '~' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' |
//                 '-' | '=' | '+' | '|' | '\' | ':' | '<' | '>' | '/' |
//                 '?' | '`' |
//                 '<<' | '>>' | '!=' | '<=' | '>=' | '++' | '--' | '?-' | '+=' |
//                 '-=' | '*=' | '/=' | '&&' | '||' | '^^' | '==' | '**' |
//                 '~=' | '@=' | '>>>'
// http://udn.epicgames.com/Two/UnrealScriptReference.html#Built-in%20operators%20and%20their%20precedence
  final public void OperatorNames() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      break;
    case HOOK:
      jj_consume_token(HOOK);
      break;
    case AT:
      jj_consume_token(AT);
      break;
    case DOLLARS:
      jj_consume_token(DOLLARS);
      break;
    case SC_OR:
      jj_consume_token(SC_OR);
      break;
    case SC_AND:
      jj_consume_token(SC_AND);
      break;
    case 206:
      jj_consume_token(206);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    case EQ:
      jj_consume_token(EQ);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case GT:
      GT();
      break;
    case LE:
      jj_consume_token(LE);
      break;
    case GE:
      jj_consume_token(GE);
      break;
    case 207:
      jj_consume_token(207);
      break;
    case LSHIFT:
      jj_consume_token(LSHIFT);
      break;
    case RSIGNEDSHIFT:
      RSIGNEDSHIFT();
      break;
    case RUNSIGNEDSHIFT:
      RUNSIGNEDSHIFT();
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case REM:
      jj_consume_token(REM);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    case SLASH:
      jj_consume_token(SLASH);
      break;
    case DOTPRODUCT:
      jj_consume_token(DOTPRODUCT);
      break;
    case CROSS:
      jj_consume_token(CROSS);
      break;
    case EXPONENT:
      jj_consume_token(EXPONENT);
      break;
    case CLOCKWISEFROM:
      jj_consume_token(CLOCKWISEFROM);
      break;
    case ATASSIGN:
      jj_consume_token(ATASSIGN);
      break;
    case DOLLARSASSIGN:
      jj_consume_token(DOLLARSASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case DOUBLEHOOK:
      jj_consume_token(DOUBLEHOOK);
      break;
    case DASHASSIGNDASH:
      jj_consume_token(DASHASSIGNDASH);
      break;
    case INCR:
      jj_consume_token(INCR);
      break;
    case DECR:
      jj_consume_token(DECR);
      break;
    case TILDE:
      jj_consume_token(TILDE);
      break;
    case BANG:
      jj_consume_token(BANG);
      break;
    default:
      jj_la1[117] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OperatorNames2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      break;
    case HOOK:
      jj_consume_token(HOOK);
      break;
    case AT:
      jj_consume_token(AT);
      break;
    case DOLLARS:
      jj_consume_token(DOLLARS);
      break;
    case SC_OR:
      jj_consume_token(SC_OR);
      break;
    case SC_AND:
      jj_consume_token(SC_AND);
      break;
    case 206:
      jj_consume_token(206);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    case EQ:
      jj_consume_token(EQ);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case GT:
      GT();
      break;
    case LE:
      jj_consume_token(LE);
      break;
    case GE:
      jj_consume_token(GE);
      break;
    case 207:
      jj_consume_token(207);
      break;
    case LSHIFT:
      jj_consume_token(LSHIFT);
      break;
    case RSIGNEDSHIFT:
      RSIGNEDSHIFT();
      break;
    case RUNSIGNEDSHIFT:
      RUNSIGNEDSHIFT();
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case REM:
      jj_consume_token(REM);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    case SLASH:
      jj_consume_token(SLASH);
      break;
    case DOTPRODUCT:
      jj_consume_token(DOTPRODUCT);
      break;
    case CROSS:
      jj_consume_token(CROSS);
      break;
    case EXPONENT:
      jj_consume_token(EXPONENT);
      break;
    case CLOCKWISEFROM:
      jj_consume_token(CLOCKWISEFROM);
      break;
    case ATASSIGN:
      jj_consume_token(ATASSIGN);
      break;
    case DOLLARSASSIGN:
      jj_consume_token(DOLLARSASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case DOUBLEHOOK:
      jj_consume_token(DOUBLEHOOK);
      break;
    case DASHASSIGNDASH:
      jj_consume_token(DASHASSIGNDASH);
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*void CustomOperators():
{}
{
    "#" | "\\" | "`" | "?-"
}*/
  final public void TernaryOperatorNames() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      break;
    case HOOK:
      jj_consume_token(HOOK);
      break;
    case DOUBLEHOOK:
      jj_consume_token(DOUBLEHOOK);
      break;
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BinaryOperatorNames() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      jj_consume_token(AT);
      break;
    case DOLLARS:
      jj_consume_token(DOLLARS);
      break;
    case SC_OR:
      jj_consume_token(SC_OR);
      break;
    case SC_AND:
      jj_consume_token(SC_AND);
      break;
    case 206:
      jj_consume_token(206);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    case EQ:
      jj_consume_token(EQ);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case GT:
      GT();
      break;
    case LE:
      jj_consume_token(LE);
      break;
    case GE:
      jj_consume_token(GE);
      break;
    case 207:
      jj_consume_token(207);
      break;
    case LSHIFT:
      jj_consume_token(LSHIFT);
      break;
    case RSIGNEDSHIFT:
      RSIGNEDSHIFT();
      break;
    case RUNSIGNEDSHIFT:
      RUNSIGNEDSHIFT();
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case REM:
      jj_consume_token(REM);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    case SLASH:
      jj_consume_token(SLASH);
      break;
    case DOTPRODUCT:
      jj_consume_token(DOTPRODUCT);
      break;
    case CROSS:
      jj_consume_token(CROSS);
      break;
    case EXPONENT:
      jj_consume_token(EXPONENT);
      break;
    case CLOCKWISEFROM:
      jj_consume_token(CLOCKWISEFROM);
      break;
    case DASHASSIGNDASH:
      jj_consume_token(DASHASSIGNDASH);
      AssignmentOperatorNames();
      break;
    default:
      jj_la1[120] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AssignmentOperatorNames() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATASSIGN:
      jj_consume_token(ATASSIGN);
      break;
    case DOLLARSASSIGN:
      jj_consume_token(DOLLARSASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnaryOperatorNames() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
      break;
    case DECR:
      jj_consume_token(DECR);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case TILDE:
      jj_consume_token(TILDE);
      break;
    case BANG:
      jj_consume_token(BANG);
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PrimaryExpression();
      break;
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    jj_consume_token(INCR);
    PrimaryExpression();
  }

  final public void PreDecrementExpression() throws ParseException {
    jj_consume_token(DECR);
    PrimaryExpression();
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PrimaryExpression();
      break;
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      if (jj_2_59(2)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case NAME_LITERAL:
        case ABSTRACT:
        case ALLOWABSTRACT:
        case ARRAY:
        case AUTO:
        case BEGIN:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CACHE:
        case CACHEEXEMPT:
        case CASE:
        case CLASS:
        case CLOCKWISEFROM:
        case COERCE:
        case COLLAPSECATEGORIES:
        case CONFIG:
        case CONST:
        case CONTINUE:
        case CROSS:
        case DATABINDING:
        case _DEFAULT:
        case _DEFAULTPROPERTIES:
        case DELEGATE:
        case DEPENDSON:
        case DEPRECATED:
        case DO:
        case DONTCOLLAPSECATEGORIES:
        case DOTPRODUCT:
        case DUPLICATETRANSIENT:
        case EDFINDABLE:
        case EDITCONST:
        case EDITFIXEDSIZE:
        case EDITINLINE:
        case EDITINLINENEW:
        case EDITINLINEUSE:
        case EDITORONLY:
        case ELSE:
        case END:
        case ENUM:
        case EVENT:
        case EXEC:
        case EXPORT:
        case EXPORTSTRUCTS:
        case EXTENDS:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case FOREACH:
        case FUNCTION:
        case GLOBAL:
        case GLOBALCONFIG:
        case GOTO:
        case GUID:
        case HIDECATEGORIES:
        case HIDEDROPDOWN:
        case IF:
        case IGNORES:
        case INIT:
        case INPUT:
        case INSTANCED:
        case INT:
        case INTERP:
        case ITERATOR:
        case LATENT:
        case LOCAL:
        case LOCALIZED:
        case NAME:
        case NATIVE:
        case NATIVEREPLICATION:
        case NEW:
        case NOCLEAR:
        case NOEDITINLINEW:
        case NOEXPORT:
        case NOIMPORT:
        case NONE:
        case NONTRANSACTIONAL:
        case NOTFORCONSOLE:
        case NOTPLACEABLE:
        case OBJECT:
        case OPERATOR:
        case OPTIONAL:
        case OUT:
        case PACKAGE:
        case PEROBJECTCONFIG:
        case PLACEABLE:
        case POINTER:
        case POSTOPERATOR:
        case PREOPERATOR:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RELIABLE:
        case REPLICATION:
        case REPNOTIFY:
        case REPRETRY:
        case RETURN:
        case SAFEREPLACE:
        case SHOWCATEGORIES:
        case SIMULATED:
        case SINGULAR:
        case _SKIP:
        case STATE:
        case STATIC:
        case STRING:
        case STRUCT:
        case STRUCTDEFAULTPROPERTIES:
        case SUPER:
        case SWITCH:
        case TRANSIENT:
        case TRAVEL:
        case TRUE:
        case UNRELIABLE:
        case UNTIL:
        case VAR:
        case VIRTUAL:
        case VOID:
        case WITHIN:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          PostfixExpression();
          break;
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Eg.
// p = Pawn(Owner);
// Pawn(Owner).Weapon.OutOfAmmo();
  final public void CastExpression() throws ParseException {
    BasicTypeOrClassType();
    jj_consume_token(LPAREN);
    PrimaryPrefix();
    jj_consume_token(RPAREN);
    if (jj_2_60(2)) {
      FuncCallOrQualifiedIdentifier();
    } else {
      ;
    }
  }

  final public void PostfixExpression() throws ParseException {
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[129] = jj_gen;
      ;
    }
  }

// OPERAND = ( CONSTVALUE | QUALIFIEDIDENTIFIER | FUNCCALL )
  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
      FuncCallOrIdentifierSpecifierOrLiteral();
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*void PrimarySuffix():
{}
{
    "." <IDENTIFIER> |
    FunctionArgs()
}*/

// Function Calling Specifiers
// Super(Pawn).Touch( Other );
// Global.Touch( Other );
// Super.Touch( Other );
  final public void FuncCallOrIdentifierSpecifier() throws ParseException {
    if (jj_2_61(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUPER:
        SuperSpecifier();
        break;
      case GLOBAL:
        GlobalSpecifier();
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    FuncCallOrQualifiedIdentifier();
  }

  final public void SuperSpecifier() throws ParseException {
    SuperSpecifierStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
    jj_consume_token(DOT);
  }

  final public void SuperSpecifierStart() throws ParseException {
    jj_consume_token(SUPER);
  }

  final public void GlobalSpecifier() throws ParseException {
    GlobalSpecifierStart();
    jj_consume_token(DOT);
  }

  final public void GlobalSpecifierStart() throws ParseException {
    jj_consume_token(GLOBAL);
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void StatementExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case ATASSIGN:
      case DOLLARSASSIGN:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        case ASSIGN:
        case ATASSIGN:
        case DOLLARSASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          AssignmentOperatorNames();
          if (jj_2_62(3)) {
            Expression();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case STRING_LITERAL:
            case NAME_LITERAL:
            case ABSTRACT:
            case ALLOWABSTRACT:
            case ARRAY:
            case AUTO:
            case BEGIN:
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CACHE:
            case CACHEEXEMPT:
            case CASE:
            case CLASS:
            case CLOCKWISEFROM:
            case COERCE:
            case COLLAPSECATEGORIES:
            case CONFIG:
            case CONST:
            case CONTINUE:
            case CROSS:
            case DATABINDING:
            case _DEFAULT:
            case _DEFAULTPROPERTIES:
            case DELEGATE:
            case DEPENDSON:
            case DEPRECATED:
            case DO:
            case DONTCOLLAPSECATEGORIES:
            case DOTPRODUCT:
            case DUPLICATETRANSIENT:
            case EDFINDABLE:
            case EDITCONST:
            case EDITFIXEDSIZE:
            case EDITINLINE:
            case EDITINLINENEW:
            case EDITINLINEUSE:
            case EDITORONLY:
            case ELSE:
            case END:
            case ENUM:
            case EVENT:
            case EXEC:
            case EXPORT:
            case EXPORTSTRUCTS:
            case EXTENDS:
            case FALSE:
            case FINAL:
            case FLOAT:
            case FOR:
            case FOREACH:
            case FUNCTION:
            case GLOBAL:
            case GLOBALCONFIG:
            case GOTO:
            case GUID:
            case HIDECATEGORIES:
            case HIDEDROPDOWN:
            case IF:
            case IGNORES:
            case INIT:
            case INPUT:
            case INSTANCED:
            case INT:
            case INTERP:
            case ITERATOR:
            case LATENT:
            case LOCAL:
            case LOCALIZED:
            case NAME:
            case NATIVE:
            case NATIVEREPLICATION:
            case NEW:
            case NOCLEAR:
            case NOEDITINLINEW:
            case NOEXPORT:
            case NOIMPORT:
            case NONE:
            case NONTRANSACTIONAL:
            case NOTFORCONSOLE:
            case NOTPLACEABLE:
            case OBJECT:
            case OPERATOR:
            case OPTIONAL:
            case OUT:
            case PACKAGE:
            case PEROBJECTCONFIG:
            case PLACEABLE:
            case POINTER:
            case POSTOPERATOR:
            case PREOPERATOR:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case RELIABLE:
            case REPLICATION:
            case REPNOTIFY:
            case REPRETRY:
            case RETURN:
            case SAFEREPLACE:
            case SHOWCATEGORIES:
            case SIMULATED:
            case SINGULAR:
            case _SKIP:
            case STATE:
            case STATIC:
            case STRING:
            case STRUCT:
            case STRUCTDEFAULTPROPERTIES:
            case SUPER:
            case SWITCH:
            case TRANSIENT:
            case TRAVEL:
            case TRUE:
            case UNRELIABLE:
            case UNTIL:
            case VAR:
            case VIRTUAL:
            case VOID:
            case WITHIN:
            case WHILE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case INCR:
            case DECR:
              StatementExpression();
              break;
            default:
              jj_la1[133] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[134] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[135] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[136] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    jj_consume_token(SEMICOLON);
  }

// -- Defaultproperties
// DEFAULTPROPERTIESBLOCK = defaultproperties LCBRACK ( DEFPROP )* RCBRACK
  final public void DefaultPropertiesBlock() throws ParseException {
    jj_consume_token(_DEFAULTPROPERTIES);
    jj_consume_token(LBRACE);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[137] = jj_gen;
        break label_37;
      }
      DefProp();
    }
    jj_consume_token(RBRACE);
  }

  final public void StructDefaultPropertiesBlock() throws ParseException {
    jj_consume_token(STRUCTDEFAULTPROPERTIES);
    jj_consume_token(LBRACE);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[138] = jj_gen;
        break label_38;
      }
      DefProp();
    }
    jj_consume_token(RBRACE);
  }

// DEFPROP = DEFPROPIDENTIFIER EQUALS PRINTABLE
  final public void DefProp() throws ParseException {
    if (jj_2_64(2147483647)) {
      jj_consume_token(BEGIN);
      jj_consume_token(OBJECT);
      jj_consume_token(CLASS);
      jj_consume_token(ASSIGN);
      VarName();
      jj_consume_token(NAME);
      jj_consume_token(ASSIGN);
      VarName();
      label_39:
      while (true) {
        if (jj_2_63(2147483647)) {
          ;
        } else {
          break label_39;
        }
        DefPropLine();
      }
      jj_consume_token(END);
      jj_consume_token(OBJECT);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case IDENTIFIER:
        DefPropLine();
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void DefPropLine() throws ParseException {
    DefPropIdentifier();
    if (jj_2_65(2147483647)) {
      jj_consume_token(ASSIGN);
      DefPropExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        DefPropArray3();
        break;
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[141] = jj_gen;
      ;
    }
  }

  final public void DefPropExpression() throws ParseException {
    if (jj_2_66(2147483647)) {
      DefPropStruct2();
    } else if (jj_2_67(2147483647)) {
      DefPropStruct1();
    } else if (jj_2_68(2147483647)) {
      DefPropArray1();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        DefPropValue();
        break;
      default:
        jj_la1[142] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// DEFPROPIDENTIFIER = IDENTIFIER ( ( LBRACK INTVAL RBRACK ) | ( LSBRACK INTVAL RSBRACK ) )?
  final public void DefPropIdentifier() throws ParseException {
    VarName();
    if (jj_2_69(3)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        ArrayIndex();
        jj_consume_token(RPAREN);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        ArrayIndex();
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[143] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
  }

  final public void ArrayIndex() throws ParseException {
    Expression();
  }

// Default properties block
// Filling dynamic array type 1
// ArrayProp=(Value1,Value2,Value3)
// eg.
// DrivePos=(X=0,Y=0,Z=0)
// Can be empty
// DriveRot=()
  final public void DefPropArray1() throws ParseException {
    DefPropArray1Start();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case ABSTRACT:
    case ALLOWABSTRACT:
    case ARRAY:
    case AUTO:
    case BEGIN:
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CACHE:
    case CACHEEXEMPT:
    case CASE:
    case CLASS:
    case CLOCKWISEFROM:
    case COERCE:
    case COLLAPSECATEGORIES:
    case CONFIG:
    case CONST:
    case CONTINUE:
    case CROSS:
    case DATABINDING:
    case _DEFAULT:
    case _DEFAULTPROPERTIES:
    case DELEGATE:
    case DEPENDSON:
    case DEPRECATED:
    case DO:
    case DONTCOLLAPSECATEGORIES:
    case DOTPRODUCT:
    case DUPLICATETRANSIENT:
    case EDFINDABLE:
    case EDITCONST:
    case EDITFIXEDSIZE:
    case EDITINLINE:
    case EDITINLINENEW:
    case EDITINLINEUSE:
    case EDITORONLY:
    case ELSE:
    case END:
    case ENUM:
    case EVENT:
    case EXEC:
    case EXPORT:
    case EXPORTSTRUCTS:
    case EXTENDS:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case FOREACH:
    case FUNCTION:
    case GLOBAL:
    case GLOBALCONFIG:
    case GOTO:
    case GUID:
    case HIDECATEGORIES:
    case HIDEDROPDOWN:
    case IF:
    case IGNORES:
    case INIT:
    case INPUT:
    case INSTANCED:
    case INT:
    case INTERP:
    case ITERATOR:
    case LATENT:
    case LOCAL:
    case LOCALIZED:
    case NAME:
    case NATIVE:
    case NATIVEREPLICATION:
    case NEW:
    case NOCLEAR:
    case NOEDITINLINEW:
    case NOEXPORT:
    case NOIMPORT:
    case NONE:
    case NONTRANSACTIONAL:
    case NOTFORCONSOLE:
    case NOTPLACEABLE:
    case OBJECT:
    case OPERATOR:
    case OPTIONAL:
    case OUT:
    case PACKAGE:
    case PEROBJECTCONFIG:
    case PLACEABLE:
    case POINTER:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case RELIABLE:
    case REPLICATION:
    case REPNOTIFY:
    case REPRETRY:
    case RETURN:
    case SAFEREPLACE:
    case SHOWCATEGORIES:
    case SIMULATED:
    case SINGULAR:
    case _SKIP:
    case STATE:
    case STATIC:
    case STRING:
    case STRUCT:
    case STRUCTDEFAULTPROPERTIES:
    case SUPER:
    case SWITCH:
    case TRANSIENT:
    case TRAVEL:
    case TRUE:
    case UNRELIABLE:
    case UNTIL:
    case VAR:
    case VIRTUAL:
    case VOID:
    case WITHIN:
    case WHILE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      DefPropExpression();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[144] = jj_gen;
          break label_40;
        }
        jj_consume_token(COMMA);
        DefPropExpression();
      }
      break;
    default:
      jj_la1[145] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void DefPropArray1Start() throws ParseException {
    jj_consume_token(LPAREN);
  }

// ArrayProp(0)=Value1
// See DefPropIdentifier()

// ArrayProp.Add(Value1)
  final public void DefPropArray3() throws ParseException {
    jj_consume_token(DOT);
    VarName();
    jj_consume_token(LPAREN);
    DefPropValue();
    jj_consume_token(RPAREN);
  }

// StructProperty={(
//                    InnerStructPropertyA=Value1,
//                    InnerStructPropertyB=Value2
//                    )}

// Default properties block
// Filling struct type 1
// StructProperty=(InnerStructPropertyA=Value1,InnerStructPropertyB=Value2)
// MainScale=(Scale=(X=1,Y=1,Z=1),SheerRate=0,SheerAxis=SHEER_None)
  final public void DefPropStruct1() throws ParseException {
    DefPropStruct1Start();
    DefPropExpression();
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[146] = jj_gen;
        break label_41;
      }
      jj_consume_token(COMMA);
      VarName();
      jj_consume_token(ASSIGN);
      DefPropExpression();
    }
    jj_consume_token(RPAREN);
  }

  final public void DefPropStruct1Start() throws ParseException {
    jj_consume_token(LPAREN);
    VarName();
    jj_consume_token(ASSIGN);
  }

  final public void DefPropStruct2() throws ParseException {
    DefPropStruct2Start();
    VarName();
    jj_consume_token(ASSIGN);
    DefPropExpression();
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[147] = jj_gen;
        break label_42;
      }
      jj_consume_token(COMMA);
      VarName();
      jj_consume_token(ASSIGN);
      DefPropExpression();
    }
    jj_consume_token(RPAREN);
    jj_consume_token(RBRACE);
  }

  final public void DefPropStruct2Start() throws ParseException {
    jj_consume_token(LBRACE);
    jj_consume_token(LPAREN);
  }

  final public void DefPropValue() throws ParseException {
    if (jj_2_70(3)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(NAME_LITERAL);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case ABSTRACT:
      case ALLOWABSTRACT:
      case ARRAY:
      case AUTO:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CACHE:
      case CACHEEXEMPT:
      case CASE:
      case CLASS:
      case CLOCKWISEFROM:
      case COERCE:
      case COLLAPSECATEGORIES:
      case CONFIG:
      case CONST:
      case CONTINUE:
      case CROSS:
      case DATABINDING:
      case _DEFAULT:
      case _DEFAULTPROPERTIES:
      case DELEGATE:
      case DEPENDSON:
      case DEPRECATED:
      case DO:
      case DONTCOLLAPSECATEGORIES:
      case DOTPRODUCT:
      case DUPLICATETRANSIENT:
      case EDFINDABLE:
      case EDITCONST:
      case EDITFIXEDSIZE:
      case EDITINLINE:
      case EDITINLINENEW:
      case EDITINLINEUSE:
      case EDITORONLY:
      case ELSE:
      case END:
      case ENUM:
      case EVENT:
      case EXEC:
      case EXPORT:
      case EXPORTSTRUCTS:
      case EXTENDS:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case FOREACH:
      case FUNCTION:
      case GLOBAL:
      case GLOBALCONFIG:
      case GOTO:
      case GUID:
      case HIDECATEGORIES:
      case HIDEDROPDOWN:
      case IF:
      case IGNORES:
      case INIT:
      case INPUT:
      case INSTANCED:
      case INT:
      case INTERP:
      case ITERATOR:
      case LATENT:
      case LOCAL:
      case LOCALIZED:
      case NAME:
      case NATIVE:
      case NATIVEREPLICATION:
      case NEW:
      case NOCLEAR:
      case NOEDITINLINEW:
      case NOEXPORT:
      case NOIMPORT:
      case NONE:
      case NONTRANSACTIONAL:
      case NOTFORCONSOLE:
      case NOTPLACEABLE:
      case OBJECT:
      case OPERATOR:
      case OPTIONAL:
      case OUT:
      case PACKAGE:
      case PEROBJECTCONFIG:
      case PLACEABLE:
      case POINTER:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RELIABLE:
      case REPLICATION:
      case REPNOTIFY:
      case REPRETRY:
      case RETURN:
      case SAFEREPLACE:
      case SHOWCATEGORIES:
      case SIMULATED:
      case SINGULAR:
      case _SKIP:
      case STATE:
      case STATIC:
      case STRING:
      case STRUCT:
      case STRUCTDEFAULTPROPERTIES:
      case SUPER:
      case SWITCH:
      case TRANSIENT:
      case TRAVEL:
      case TRUE:
      case UNRELIABLE:
      case UNTIL:
      case VAR:
      case VIRTUAL:
      case VOID:
      case WITHIN:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        jj_la1[148] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Terminals
 */
/*
PRINTABLE                = all printable characters
ALPHA                    = 'a' .. 'z'
DIGIT                    = '0' .. '9'
HEXDIGIT                 = DIGIT | 'a' .. 'f'
SEMICOLON                = ';'
COLON                    = ':'
UNDERSCORE               = '_'
LBRACK                   = '('
RBRACK                   = ')'
LABRACK                  = '<'
RABRACK                  = '>'
LCBRACK                  = '{'
RCBRACK                  = '}'
LSBRACK                  = '['
RSBRACK                  = ']'
DOT                      = '.'
COMMA                    = ','
SQUOTE                   = '''
DQUOTE                   = '"'
EQUALS                   = '='
*/
/*
See above
*/

// CONSTCLASSPARAMS = abstract | native | nativereplication | safereplace |
//                    perobjectconfig | transient | noexport | exportstructs |
//                    // available but obsolete:
//                    guid(INTVAL,INTVAL,INTVAL,INTVAL)
//                    // available from warfare and up:
//                    collapsecategories | dontcollapsecategories | placeable |
//                    notplaceable | editinlinenew | noteditinlinenew
  final public void ConstClassParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATIVE:
      jj_consume_token(NATIVE);
      break;
    case NATIVEREPLICATION:
      jj_consume_token(NATIVEREPLICATION);
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
      break;
    case CACHEEXEMPT:
      jj_consume_token(CACHEEXEMPT);
      break;
    case COLLAPSECATEGORIES:
      jj_consume_token(COLLAPSECATEGORIES);
      break;
    case DONTCOLLAPSECATEGORIES:
      jj_consume_token(DONTCOLLAPSECATEGORIES);
      break;
    case EDITINLINENEW:
      jj_consume_token(EDITINLINENEW);
      break;
    case EXPORTSTRUCTS:
      jj_consume_token(EXPORTSTRUCTS);
      break;
    case GUID:
      jj_consume_token(GUID);
      jj_consume_token(LPAREN);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(RPAREN);
      break;
    case HIDEDROPDOWN:
      jj_consume_token(HIDEDROPDOWN);
      break;
    case NOEXPORT:
      jj_consume_token(NOEXPORT);
      break;
    case NOEDITINLINEW:
      jj_consume_token(NOEDITINLINEW);
      break;
    case NOTPLACEABLE:
      jj_consume_token(NOTPLACEABLE);
      break;
    case PEROBJECTCONFIG:
      jj_consume_token(PEROBJECTCONFIG);
      break;
    case PLACEABLE:
      jj_consume_token(PLACEABLE);
      break;
    case SAFEREPLACE:
      jj_consume_token(SAFEREPLACE);
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// BOOLVAL = true | false
  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[150] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// VARPARAMS = config | const | editconst | export | globalconfig | input |
//             localized | native | private | protected | transient | travel |
//             // available from warfare and up:
//             editinline | deprecated | edfindable | editinlineuse
  final public void VarParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALLOWABSTRACT:
      jj_consume_token(ALLOWABSTRACT);
      break;
    case CACHE:
      jj_consume_token(CACHE);
      break;
    case CONFIG:
      jj_consume_token(CONFIG);
      break;
    case CONST:
      jj_consume_token(CONST);
      break;
    case DATABINDING:
      jj_consume_token(DATABINDING);
      break;
    case DEPRECATED:
      jj_consume_token(DEPRECATED);
      break;
    case DUPLICATETRANSIENT:
      jj_consume_token(DUPLICATETRANSIENT);
      break;
    case EDFINDABLE:
      jj_consume_token(EDFINDABLE);
      break;
    case EDITCONST:
      jj_consume_token(EDITCONST);
      break;
    case EDITCONSTARRAY:
      jj_consume_token(EDITCONSTARRAY);
      break;
    case EDITFIXEDSIZE:
      jj_consume_token(EDITFIXEDSIZE);
      break;
    case EDITINLINE:
      jj_consume_token(EDITINLINE);
      break;
    case EDITINLINEUSE:
      jj_consume_token(EDITINLINEUSE);
      break;
    case EDITORONLY:
      jj_consume_token(EDITORONLY);
      break;
    case EXPORT:
      jj_consume_token(EXPORT);
      break;
    case GLOBALCONFIG:
      jj_consume_token(GLOBALCONFIG);
      break;
    case INIT:
      jj_consume_token(INIT);
      break;
    case INPUT:
      jj_consume_token(INPUT);
      break;
    case INSTANCED:
      jj_consume_token(INSTANCED);
      break;
    case INTERP:
      jj_consume_token(INTERP);
      break;
    case LOCALIZED:
      jj_consume_token(LOCALIZED);
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
      break;
    case NOCLEAR:
      jj_consume_token(NOCLEAR);
      break;
    case NOEXPORT:
      jj_consume_token(NOEXPORT);
      break;
    case NOIMPORT:
      jj_consume_token(NOIMPORT);
      break;
    case NONTRANSACTIONAL:
      jj_consume_token(NONTRANSACTIONAL);
      break;
    case NOTFORCONSOLE:
      jj_consume_token(NOTFORCONSOLE);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      break;
    case REPNOTIFY:
      jj_consume_token(REPNOTIFY);
      break;
    case REPRETRY:
      jj_consume_token(REPRETRY);
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
      break;
    case TRAVEL:
      jj_consume_token(TRAVEL);
      break;
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// STATEPARAMS = auto | simulated
  final public void StateParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTO:
      jj_consume_token(AUTO);
      break;
    case SIMULATED:
      jj_consume_token(SIMULATED);
      break;
    default:
      jj_la1[152] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// CONSTFUNCPARAMS = final | iterator | latent | simulated | singular | static |
//                   exec | protected | private
  final public void ConstFuncParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXEC:
      jj_consume_token(EXEC);
      break;
    case FINAL:
      jj_consume_token(FINAL);
      break;
    case ITERATOR:
      jj_consume_token(ITERATOR);
      break;
    case LATENT:
      jj_consume_token(LATENT);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      break;
    case SIMULATED:
      jj_consume_token(SIMULATED);
      break;
    case SINGULAR:
      jj_consume_token(SINGULAR);
      break;
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      jj_la1[153] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// BASICTYPE = byte | int | float | string | bool | name | class
// Moved "class" to BasicClassType() to prevent choice confilcts with ClassType
  final public void BasicType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case FLOAT:
    case INT:
    case NAME:
    case STRING:
      BasicTypeSimple();
      break;
    case CLASS:
      BasicClassType();
      break;
    default:
      jj_la1[154] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BasicTypeSimple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case NAME:
      jj_consume_token(NAME);
      break;
    default:
      jj_la1[155] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BasicClassType() throws ParseException {
    jj_consume_token(CLASS);
  }

// choice conflict - multiple things that can start with "class"
  final public void BasicTypeOrClassType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case FLOAT:
    case INT:
    case NAME:
    case STRING:
      BasicTypeSimple();
      break;
    case CLASS:
      if (jj_2_71(2147483647)) {
        ClassType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          jj_consume_token(CLASS);
          break;
        default:
          jj_la1[156] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[157] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// FUNCTIONTYPE = function | event | delegate
  final public void FunctionType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      jj_consume_token(FUNCTION);
      break;
    case EVENT:
      jj_consume_token(EVENT);
      break;
    case DELEGATE:
      jj_consume_token(DELEGATE);
      break;
    default:
      jj_la1[158] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FLOAT:
    case INT:
    case NAME:
    case STRING:
      BasicType();
      break;
    default:
      jj_la1[159] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case NAME_LITERAL:
      jj_consume_token(NAME_LITERAL);
      break;
    default:
      jj_la1[160] = jj_gen;
      if (jj_2_73(2147483647)) {
        ConstantLiteral();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          jj_consume_token(CLASS);
          if (jj_2_72(2147483647)) {
            jj_consume_token(NAME_LITERAL);
          } else {
            ;
          }
          break;
        case STRING_LITERAL:
          jj_consume_token(STRING_LITERAL);
          break;
        case FALSE:
        case TRUE:
          BooleanLiteral();
          break;
        case NONE:
          NoneLiteral();
          break;
        default:
          jj_la1[161] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// General object constants are specified by the object type followed by the
// object name in single quotes, for example: texture'Default'
  final public void ConstantLiteral() throws ParseException {
    VarName();
    jj_consume_token(NAME_LITERAL);
  }

  final public void NoneLiteral() throws ParseException {
    jj_consume_token(NONE);
  }

// We use productions to match >>>, >> and > so that we can keep the
// type declaration syntax with generics clean
  final public void RUNSIGNEDSHIFT() throws ParseException {
    jj_consume_token(RUNSIGNEDSHIFT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    jj_consume_token(RSIGNEDSHIFT);
  }

  final public void GT() throws ParseException {
    jj_consume_token(GT);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_3R_210() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(117)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(VAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(POINTER)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(40)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    if (jj_3R_210()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(30)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    if (jj_scan_token(COLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(UNTIL)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_66()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_65()) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_163()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_64()) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(117)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(69)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_77()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_79()) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_145()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_80()) return true;
    if (jj_3R_145()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_172()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_43()) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_145()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_216()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(152)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_50()) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(152)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(OPTIONAL)) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_112()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(158)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(BEGIN)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_251()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) return true;
    }
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_62()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_61()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(VOID)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_3R_238()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_62()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_59()) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_61()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(VOID)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_248()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(71)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(128)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) jj_scanpos = xsp;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_235() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    return false;
  }

  private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    }
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(STATE)) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(ORASSIGN)) return true;
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(187)) {
    jj_scanpos = xsp;
    if (jj_scan_token(188)) {
    jj_scanpos = xsp;
    if (jj_scan_token(193)) {
    jj_scanpos = xsp;
    if (jj_scan_token(195)) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_scan_token(198)) {
    jj_scanpos = xsp;
    if (jj_scan_token(199)) {
    jj_scanpos = xsp;
    if (jj_scan_token(189)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) {
    jj_scanpos = xsp;
    if (jj_scan_token(196)) {
    jj_scanpos = xsp;
    if (jj_scan_token(191)) {
    jj_scanpos = xsp;
    if (jj_scan_token(192)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(ORASSIGN)) return true;
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_scan_token(206)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(204)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(207)) {
    jj_scanpos = xsp;
    if (jj_scan_token(185)) {
    jj_scanpos = xsp;
    if (jj_scan_token(203)) {
    jj_scanpos = xsp;
    if (jj_scan_token(202)) {
    jj_scanpos = xsp;
    if (jj_scan_token(177)) {
    jj_scanpos = xsp;
    if (jj_scan_token(178)) {
    jj_scanpos = xsp;
    if (jj_scan_token(184)) {
    jj_scanpos = xsp;
    if (jj_scan_token(179)) {
    jj_scanpos = xsp;
    if (jj_scan_token(180)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(186)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(187)) {
    jj_scanpos = xsp;
    if (jj_scan_token(188)) {
    jj_scanpos = xsp;
    if (jj_scan_token(193)) {
    jj_scanpos = xsp;
    if (jj_scan_token(195)) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_scan_token(198)) {
    jj_scanpos = xsp;
    if (jj_scan_token(199)) {
    jj_scanpos = xsp;
    if (jj_scan_token(189)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) {
    jj_scanpos = xsp;
    if (jj_scan_token(196)) {
    jj_scanpos = xsp;
    if (jj_scan_token(191)) {
    jj_scanpos = xsp;
    if (jj_scan_token(192)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(200)) {
    jj_scanpos = xsp;
    if (jj_scan_token(201)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_225() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_225()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_245()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_3R_253()) return true;
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_83()) return true;
    if (jj_3R_173()) return true;
    if (jj_scan_token(204)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(152)) return true;
    if (jj_3R_232()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_224()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    if (jj_scan_token(204)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(91)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) return true;
    }
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_72()) return true;
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(177)) {
    jj_scanpos = xsp;
    if (jj_scan_token(178)) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_143()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_217()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(NAME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_176()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(CLASS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_178()) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    }
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(126)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(73)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_52()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public UnrealScriptParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[162];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x20100000,0x0,0x20100000,0x0,0x0,0x0,0x0,0xfff12000,0x0,0xfff12000,0xfff00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfff00000,0x0,0x0,0x10200000,0xfff00000,0xfff00000,0x0,0x0,0xfff00000,0xfff00000,0x0,0x0,0xfff00000,0xfff12000,0xfff00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x1000000,0xfff12000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfff00000,0xfff00000,0x0,0x0,0xfff00000,0x0,0xfff00000,0xfff00000,0x0,0x0,0x0,0xfff00000,0xfff12000,0x0,0x0,0x0,0xfff00000,0x8a400000,0x0,0x0,0xfff12000,0xfff12000,0x0,0xfff00000,0xfff12000,0xfff12000,0xfff12000,0xfff12000,0x10000,0x1000000,0xfff12000,0xfff12000,0xfff12000,0x0,0x0,0x0,0xfff12000,0x0,0x0,0x0,0x0,0x0,0xfff12000,0xfff00000,0x0,0x0,0x0,0xfff10000,0x10000,0xfff00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfff12000,0x0,0xfff12000,0xfff12000,0x0,0x0,0xfff12000,0x0,0x0,0xfff12000,0x0,0x0,0xfff12000,0xfff00000,0xfff00000,0xfff00000,0x0,0x0,0xfff12000,0x0,0x0,0xfff12000,0x0,0x0,0xfff12000,0x20100000,0x0,0x10200000,0x800000,0x0,0x8a000000,0xa000000,0x80000000,0x8a000000,0x0,0x8a000000,0x10000,0x80002000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200,0x0,0x0,0x8040480c,0x0,0x8040480c,0x0,0x0,0x0,0x110,0xfff7ffff,0x0,0xfff7ffff,0xfff7ffff,0x110,0x0,0x0,0x0,0x8000010,0x0,0x0,0x0,0xfff7ffff,0x0,0x0,0x41bf1098,0xfff7ffff,0xfff7ffff,0x0,0x0,0xfff7ffff,0xfff7ffff,0x0,0x0,0xfff7ffff,0xfff7ffff,0xfff7ffff,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x38000410,0x8000010,0x30000400,0x0,0x0,0x0,0x0,0x0,0x30000400,0x4000000,0xfff7ffff,0x0,0x20000000,0x10,0x20000000,0x30000400,0x0,0x20000000,0x10000400,0x0,0xfff7ffff,0xfff7ffff,0x0,0x0,0xfff7ffff,0x0,0xfff7ffff,0xfff7ffff,0x0,0x2,0x0,0xfff7ffff,0xfff7ffff,0x0,0x0,0x0,0xfff7ffff,0x0,0x0,0x0,0xfff7ffff,0xfff7ffff,0x2000000,0xfff7ffff,0xfff7ffff,0xfff7ffff,0xfff7ffff,0xfff7ffff,0x0,0x4000000,0xfff7ffff,0xfff7ffff,0xfff7ffff,0x0,0x0,0x0,0xfff7ffff,0x0,0x0,0x0,0x0,0x0,0xfff7ffff,0xfff7ffff,0x0,0x0,0x0,0xfff7ffff,0x0,0xfff7ffff,0x8041,0x8041,0x8041,0x8041,0x0,0x8041,0x0,0x0,0x0,0xfff7ffff,0x0,0xfff7ffff,0xfff7ffff,0x0,0x0,0xfff7ffff,0x0,0x0,0xfff7ffff,0x0,0x0,0xfff7ffff,0xfff7ffff,0xfff7ffff,0xfff7ffff,0x0,0x0,0xfff7ffff,0x0,0x0,0xfff7ffff,0x0,0x0,0xfff7ffff,0x80404004,0x0,0x41bf1098,0x0,0x20000000,0x0,0x0,0x0,0x0,0x10000400,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x1,0x66001c00,0x0,0x66001c00,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0xd28b8100,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0x1,0x2008000,0x0,0x0,0x2000,0x0,0x0,0x2300044,0x0,0x2300044,0x0,0x0,0x1,0x0,0x4000,0x2300044,0x0,0xffffffff,0x0,0x300004,0x0,0x300004,0x300044,0x0,0x300004,0x40,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0xffffffff,0x1040008,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x80,0x0,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x66001400,0x2,0xd28b8100,0x0,0x300004,0x1040008,0x1040008,0x0,0x1040008,0x40,0x1040008,0x0,0x2,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0xc00608,0x0,0xc00608,0x10,0x0,0x10,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0x10000000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x18c006,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x80000000,0x20000,0x20000,0x20000,0x5b04f020,0x40000000,0x1304f020,0x0,0x0,0x0,0x1000000,0x0,0x1300f020,0x0,0xffffffff,0x0,0x1300c000,0x0,0x1300c000,0x1300f020,0x0,0x1300c000,0x3020,0x0,0xffffffff,0xffffffff,0x3020,0x0,0xffffffff,0x3000,0xffffffff,0xffffffff,0x0,0x4000080,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0xffffffff,0x20000000,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x400608,0x0,0x18c006,0x1000000,0x1300c000,0x20000000,0x20000000,0x0,0x20000000,0x0,0x20000000,0x0,0x1,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x404,0x1000000,0x404,0x200000,0x80000000,0x200000,0x0,0x1211fff,0x80000000,0x1211fff,0x200fff,0x0,0x10000000,0x10000000,0x80000000,0x80,0x80,0x1000000,0x10000000,0x200fff,0x4000000,0x1000000,0xc,0x200fff,0x200fff,0x80000000,0x10000000,0x200fff,0xfff,0x10000000,0x0,0x200fff,0x211fff,0x200fff,0x80000000,0x0,0x0,0x80,0x0,0x20,0x20,0x20,0x80,0x80,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x200000,0x45211fff,0x80000000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x80000000,0x200fff,0x200fff,0x0,0x201000,0x200fff,0x0,0x200fff,0x200fff,0x0,0x0,0x10000000,0x200fff,0x45211fff,0x44000000,0x80000000,0x10000000,0x200fff,0x0,0x10000000,0x4000000,0x41211fff,0x45211fff,0x0,0x200fff,0x45211fff,0x45211fff,0x45211fff,0x1211fff,0x1200000,0x200000,0x1211fff,0x1211fff,0x1211fff,0x80000000,0x0,0x0,0x1211fff,0x0,0x0,0x0,0x0,0x1000000,0x211fff,0x200fff,0x1000000,0x80000000,0x80000000,0x200fff,0x0,0x200fff,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1211fff,0x0,0x1211fff,0x1211fff,0x0,0x0,0x1211fff,0x1,0x1000000,0x1211fff,0x0,0x0,0x1211fff,0x200fff,0x200fff,0x200fff,0x0,0x40000000,0x1211fff,0x11000000,0x80000000,0x5211fff,0x80000000,0x80000000,0x1211fff,0x4,0x10,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x11000,0x10,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78060,0x0,0x78060,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x10,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78060,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x78060,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78060,0x78060,0x0,0x0,0x78060,0x78060,0x78060,0x78060,0x0,0x0,0x18000,0x78060,0x18000,0x0,0x80,0x80,0x780e0,0x78060,0x78060,0x18000,0x18000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffffe,0xfffe7f9e,0xfffffffe,0xfffe7f9e,0x180,0x7fe7e1c,0xf8000002,0x78060,0x60000,0x78060,0x60,0x0,0x60,0x18000,0x18000,0x0,0x0,0x0,0x18000,0xf8018002,0xf8018002,0x18000,0x0,0x0,0x0,0x1,0x0,0x78060,0x0,0x0,0x78060,0x0,0x0,0x78060,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xdfdf,0xdfdf,0xdfdf,0xdfdf,0x100,0xde00,0xdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xdf,0xdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[73];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public UnrealScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public UnrealScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new UnrealScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public UnrealScriptParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new UnrealScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public UnrealScriptParser(UnrealScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(UnrealScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 162; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[208];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 162; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 208; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 73; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
