/* Generated By:JavaCC: Do not edit this line. UnrealScriptParser.java */
package org.unrealscriptsupport.jccparser;
import java.io.*;
import java.util.*;
/**
 * Grammar to parse UnrealScript from Unreal Tournament 2004.
 * Based on:
 * Grammar to parse Java version 1.5
 * by Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class UnrealScriptParser implements UnrealScriptParserConstants {
    public static final String PARSER_NAME = "UnrealScript Parser";
    public static final float VERSION = 1.0f;
    public static final String PARSER_INFO =
        PARSER_NAME + " Version " + VERSION + ": ";

    public List<ParseException> syntaxErrors = new ArrayList<ParseException> ();

    /**
     * Add to error list and step back to a recovery point.
     */
    void recover(ParseException ex, int recoveryPoint) {

        syntaxErrors.add(ex);
        Token t = getNextToken();

        // (t.kind != recoveryPoint)
        // Backtrack until the recoveryPoint token is found
        // eg. a semicolon

        // (t.next != null)
        // If the recoveryPoint does not exist,
        // then stop it backtracking forever
        while ( (t.next != null) &&
                (t.kind != recoveryPoint) ) {
            t = getNextToken();
        }
    }

    public UnrealScriptParser(String fileName)
    {
        this(System.in);
        try {
            ReInit(new FileInputStream(new File(fileName)));
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String args[]) {

        UnrealScriptParser parser;

        if (args.length == 0) {

            System.out.println(PARSER_INFO +
                               "Reading from standard input . . .");
            parser = new UnrealScriptParser(System.in);
        }
        else if (args.length == 1) {
            System.out.println(PARSER_INFO +
                               "Reading from file " + args[0] + " . . .");

            try {
                parser = new UnrealScriptParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e) {
                System.out.println(PARSER_INFO +
                                   "File " + args[0] + " not found.");
                return;
            }
        }
        else {
            System.out.println(PARSER_INFO + "Usage is one of:");
            System.out.println("         java UnrealScriptParser < inputfile");
            System.out.println("OR");
            System.out.println("         java UnrealScriptParser inputfile");
            return;
        }
        try {
            parser.CompilationUnit();
            System.out.println(PARSER_INFO +
                               "UnrealScript program parsed successfully.");
        }
        catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println(PARSER_INFO +
                               "Encountered errors during parse.");
        }
    }

/*************************************************
 * THE UNREALSCRIPT LANGUAGE GRAMMAR STARTS HERE *
 *************************************************/

/*
 * --- Non-Terminals.
 */

// PROGRAM = CLASSDECL
//                            ( DECLARATIONS )*
//                            ( REPLICATIONBLOCK )?
//                            BODY
//                            ( DEFAULTPROPERTIESBLOCK )?
  final public void CompilationUnit() throws ParseException {
    try {
      ClassDeclaration();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
        case ENUM:
        case STRUCT:
        case VAR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Declarations();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPLICATION:
        ReplicationBlock();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      Body();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _DEFAULTPROPERTIES:
        DefaultPropertiesBlock();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(0);
    } catch (ParseException ex) {
        //recover(ex, SEMICOLON);
        recover(ex, '\u005cn');
    }
  }

// CLASSDECL = class IDENTIFIER ( extends PACKAGEIDENTIFIER )?
//                            ( CLASSPARAMS )* SEMICOLON
  final public void ClassDeclaration() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      PackageIdentifier();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CONFIG:
      case DEPENDSON:
      case GUID:
      case HIDECATEGORIES:
      case NATIVE:
      case NATIVEREPLICATION:
      case NOTPLACEABLE:
      case PLACEABLE:
      case SHOWCATEGORIES:
      case TRANSIENT:
      case WITHIN:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      ClassParams();
    }
    jj_consume_token(SEMICOLON);
  }

// CLASSPARAMS = CONSTCLASSPARAMS | within PACKAGEIDENTIFIER |
//                            dependson LBRACK PACKAGEIDENTIFIER RBRACK |
//                            config ( LBRACK PACKAGEIDENTIFIER RBRACK )? |
//                            hidecategories LBRACK IDENTIFIERLIST RBRACK |
//                            showcategories LBRACK IDENTIFIERLIST RBRACK
  final public void ClassParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case GUID:
    case NATIVE:
    case NATIVEREPLICATION:
    case NOTPLACEABLE:
    case PLACEABLE:
    case TRANSIENT:
      ConstClassParams();
      break;
    case WITHIN:
      jj_consume_token(WITHIN);
      PackageIdentifier();
      break;
    case DEPENDSON:
      jj_consume_token(DEPENDSON);
      jj_consume_token(LPAREN);
      PackageIdentifier();
      jj_consume_token(RPAREN);
      break;
    case CONFIG:
      jj_consume_token(CONFIG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        PackageIdentifier();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
    case HIDECATEGORIES:
      jj_consume_token(HIDECATEGORIES);
      jj_consume_token(LPAREN);
      IdentifierList();
      jj_consume_token(RPAREN);
      break;
    case SHOWCATEGORIES:
      jj_consume_token(SHOWCATEGORIES);
      jj_consume_token(LPAREN);
      IdentifierList();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// IDENTIFIER = ( ALPHA | UNDERSCORE ) ( ALPHA | UNDERSCORE | DIGIT )*
// See <IDENTIFIER> above

// packagename.classname or classname.structname
// PACKAGEIDENTIFIER = ( IDENTIFIER DOT )? IDENTIFIER
  final public void PackageIdentifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    PackageIdentifierEnd();
  }

// Workaround for choice conflicts
// Lots of things start with <IDENTIFIER>
  final public void PackageIdentifierEnd() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case OBJECT:
        jj_consume_token(OBJECT);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  final public void ClassIdentifierStart() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(NAME_LITERAL);
    jj_consume_token(DOT);
  }

// QUALIFIEDIDENTIFIER = ( ( class SQUOTE PACKAGEIDENTIFIER SQUOTE DOT default DOT IDENTIFIER )
//                            | ( ( IDENTIFIER DOT )* IDENTIFIER )
//                            )
  final public void QualifiedIdentifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      ClassIdentifierStart();
      QualifiedIdentifierStart();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
    }
  }

  final public void QualifiedIdentifierStart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      break;
    case CONST:
      jj_consume_token(CONST);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DOT);
  }

// FUNCCALL = ( ( class SQUOTE PACKAGEIDENTIFIER SQUOTE DOT static DOT )
//                            | ( ( IDENTIFIER DOT )+ )
//                            )?
//                            IDENTIFIER LBRACK ( EXPR ( COMMA EXPR )* )? RBRACK
  final public void FuncCall() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      ClassIdentifierStart();
      FuncCallStart();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
    }
    FuncCallEnd();
  }

  final public void FuncCallStart() throws ParseException {
    jj_consume_token(STATIC);
    jj_consume_token(DOT);
  }

  final public void FuncCallEnd() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FALSE:
    case FLOAT:
    case GLOBAL:
    case INT:
    case NAME:
    case NONE:
    case OBJECT:
    case STRING:
    case SUPER:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void FuncCallOrQualifiedIdentifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      ClassIdentifierStart();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        FuncCallStart();
        jj_consume_token(IDENTIFIER);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_6;
          }
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
        }
        FuncCallEnd();
        break;
      case CONST:
      case _DEFAULT:
        QualifiedIdentifierStart();
        jj_consume_token(IDENTIFIER);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_7;
          }
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        FuncCallEnd();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// IDENTIFIERLIST = IDENTIFIER ( COMMA IDENTIFIER )*
  final public void IdentifierList() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
  }

  final public void FuncCallAndIdentifierList() throws ParseException {
    FuncCallOrQualifiedIdentifier();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      FuncCallOrQualifiedIdentifier();
    }
  }

// STRINGVAL = DQUOTE PRINTABLE DQUOTE
// INTVAL = ( DIGIT+ | ( '0x' ( HEXDIGIT )+ ) )
// FLOATVAL = ( DIGIT )+ DOT ( DIGIT )*
// See above


// -- Declaration parts
// DECLARATIONS = ( CONSTDECL | VARDECL | ENUMDECL | STRUCTDECL ) SEMICOLON
  final public void Declarations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      ConstDecl();
      break;
    case VAR:
      VarDecl();
      break;
    case ENUM:
      EnumDecl();
      break;
    case STRUCT:
      StructDecl();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

// CONSTDECL = const IDENTIFIER = CONSTVALUE
// CONSTVALUE = ( STRINGVAL | INTVAL | FLOATVAL | BOOLVAL )
  final public void ConstDecl() throws ParseException {
    jj_consume_token(CONST);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    Literal();
  }

// VARDECL = var ( CONFIGGROUP )? ( VARPARAMS )*
//                            VARTYPE VARIDENTIFIER ( COMMA VARIDENTIFIER )*
  final public void VarDecl() throws ParseException {
    jj_consume_token(VAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      ConfigGroup();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONFIG:
      case CONST:
      case DEPRECATED:
      case EDFINDABLE:
      case EDITCONST:
      case EDITINLINE:
      case EDITINLINEUSE:
      case EXPORT:
      case GLOBALCONFIG:
      case INPUT:
      case LOCALIZED:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case TRANSIENT:
      case TRAVEL:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      VarParams();
    }
    VarType();
    jj_consume_token(IDENTIFIER);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
  }

// CONFIGGROUP = LBRACK ( IDENTIFIER )? RBRACK
  final public void ConfigGroup() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

// VARTYPE = PACKAGEIDENTIFIER | ENUMDECL | STRUCTDECL | ARRAYDECL | CLASSTYPE | BASICTYPE
// VARIDENTIFIER = IDENTIFIER
  final public void VarType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      PackageIdentifierOrArrayDecl();
      break;
    case ARRAY:
      DynArrayDecl();
      break;
    case ENUM:
      EnumDecl();
      break;
    case STRUCT:
      StructDecl();
      break;
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FLOAT:
    case INT:
    case NAME:
    case OBJECT:
    case STRING:
      BasicTypeOrClassType();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// ARRAYDECL = IDENTIFIER LSBRACK INTVAL RSBRACK
  final public void ArrayDecl() throws ParseException {
    jj_consume_token(IDENTIFIER);
    ArrayDeclEnd();
  }

// Workaround for choice conflicts
// Lots of things start with <IDENTIFIER>
  final public void ArrayDeclEnd() throws ParseException {
    jj_consume_token(LBRACKET);
    jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACKET);
  }

// DYNARRAYDECL = array LABRACK (PACKAGEIDENTIFIER | CLASSTYPE | BASICTYPE) RABRACK
  final public void DynArrayDecl() throws ParseException {
    jj_consume_token(ARRAY);
    jj_consume_token(LT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT:
    case IDENTIFIER:
      PackageIdentifier();
      break;
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FLOAT:
    case INT:
    case NAME:
    case STRING:
      BasicTypeOrClassType();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
  }

// CLASSTYPE = class LABRACK PACKAGEIDENTIFIER RABRACK
  final public void ClassType() throws ParseException {
    jj_consume_token(CLASS);
    ClassTypeEnd();
  }

// Workaround for choice conflicts
// BasicType and ClassType can start with "class"
  final public void ClassTypeEnd() throws ParseException {
    jj_consume_token(LT);
    PackageIdentifier();
    jj_consume_token(GT);
  }

// ENUMDECL = enum IDENTIFIER LCBRACK ENUMOPTIONS RCBRACK
  final public void EnumDecl() throws ParseException {
    jj_consume_token(ENUM);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
    EnumOptions();
    jj_consume_token(RBRACE);
  }

// ENUMOPTIONS = IDENTIFIER ( COMMA IDENTIFIER )*
  final public void EnumOptions() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
  }

// STRUCTDECL = struct ( STRUCTPARAMS )* IDENTIFIER ( extends PACKAGEIDENTIFIER )?
//                            LCBRACK STRUCTBODY RCBRACK
  final public void StructDecl() throws ParseException {
    jj_consume_token(STRUCT);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXPORT:
      case NATIVE:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_14;
      }
      StructParams();
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      PackageIdentifier();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    StructBody();
    jj_consume_token(RBRACE);
  }

// STRUCTPARAMS = ( native | export )
  final public void StructParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATIVE:
      jj_consume_token(NATIVE);
      break;
    case EXPORT:
      jj_consume_token(EXPORT);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// STRUCTBODY = ( VARDECL SEMICOLON )+
  final public void StructBody() throws ParseException {
    label_15:
    while (true) {
      VarDecl();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_15;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCTDEFAULTPROPERTIES:
      StructDefaultPropertiesBlock();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
  }

// Replication parts
// REPLICATIONBLOCK = replication LCBRACK ( REPLICATIONBODY )* RCBRACK
  final public void ReplicationBlock() throws ParseException {
    jj_consume_token(REPLICATION);
    jj_consume_token(LBRACE);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case RELIABLE:
      case UNRELIABLE:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_16;
      }
      ReplicationBody();
    }
    jj_consume_token(RBRACE);
  }

// "reliable" and "unreliable" not required in UE3
// REPLICATIONBODY = ( reliable | unreliable ) if LBRACK EXPR RBRACK
//                            IDENTIFIER ( COMMA IDENTIFIER )* SEMICOLON
  final public void ReplicationBody() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELIABLE:
    case UNRELIABLE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELIABLE:
        jj_consume_token(RELIABLE);
        break;
      case UNRELIABLE:
        jj_consume_token(UNRELIABLE);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    FuncCallAndIdentifierList();
    jj_consume_token(SEMICOLON);
  }

// Body parts
// BODY = ( STATEDECL | FUNCTIONDECL )*
  final public void Body() throws ParseException {
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUTO:
      case DELEGATE:
      case EVENT:
      case EXEC:
      case FINAL:
      case FUNCTION:
      case ITERATOR:
      case LATENT:
      case NATIVE:
      case OPERATOR:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case SIMULATED:
      case SINGULAR:
      case STATE:
      case STATIC:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_17;
      }
      StateOrFunctionDecl();
    }
  }

// Prevent choice conflicts, both can start with "simulated"
  final public void StateOrFunctionDecl() throws ParseException {
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIMULATED:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_18;
      }
      StateAndConstFuncParams();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTO:
    case STATE:
      StateDecl();
      break;
    case DELEGATE:
    case EVENT:
    case EXEC:
    case FINAL:
    case FUNCTION:
    case ITERATOR:
    case LATENT:
    case NATIVE:
    case OPERATOR:
    case POSTOPERATOR:
    case PREOPERATOR:
    case PRIVATE:
    case PROTECTED:
    case SINGULAR:
    case STATIC:
      FunctionDecl();
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// State parts
// STATEDECL = ( STATEPARAMS )* state IDENTIFIER ( CONFIGGROUP )? ( extends IDENTIFIER )? STATEBODY
  final public void StateDecl() throws ParseException {
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUTO:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_19;
      }
      StateParams();
    }
    jj_consume_token(STATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      ConfigGroup();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    StateBody();
  }

// STATEBODY = LCBRACK ( STATEIGNORE )? ( FUNCTIONDECL )* STATELABELS RCBRACK
  final public void StateBody() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGNORES:
      StateIgnore();
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELEGATE:
      case EVENT:
      case EXEC:
      case FINAL:
      case FUNCTION:
      case ITERATOR:
      case LATENT:
      case NATIVE:
      case OPERATOR:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case SINGULAR:
      case STATIC:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_20;
      }
      FunctionDecl();
    }
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
      case END:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_21;
      }
      LabelStatement();
    }
    jj_consume_token(RBRACE);
  }

// STATEIGNORE = ignores IDENTIFIER ( COMMA IDENTIFIER )* SEMICOLON
  final public void StateIgnore() throws ParseException {
    jj_consume_token(IGNORES);
    jj_consume_token(IDENTIFIER);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
    jj_consume_token(SEMICOLON);
  }

// Function  parts
// operators require an set amouth of arguments
// FUNCTIONDECL = ( NORMALFUNC | OPERATORFUNC )
  final public void FunctionDecl() throws ParseException {
    NormalOrOperatorFunc();
  }

// Moved (FunctionParams())* here to prevent choice conflicts
// FUNCTIONPARAMS = CONSTFUNCPARAMS | native ( LBRACK INTVAL RBRACK )?
// Native functions can have const after them
// native function int doSomething(string myData) const;
  final public void NormalOrOperatorFunc() throws ParseException {
    if (jj_2_1(8)) {
      NativeFuncParams();
      FuncEnd();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        jj_consume_token(CONST);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      FunctionBody();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELEGATE:
      case EVENT:
      case EXEC:
      case FINAL:
      case FUNCTION:
      case ITERATOR:
      case LATENT:
      case OPERATOR:
      case POSTOPERATOR:
      case PREOPERATOR:
      case PRIVATE:
      case PROTECTED:
      case SINGULAR:
      case STATIC:
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXEC:
          case FINAL:
          case ITERATOR:
          case LATENT:
          case PRIVATE:
          case PROTECTED:
          case SINGULAR:
          case STATIC:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_23;
          }
          ConstFuncParams();
        }
        FuncEnd();
        FunctionBody();
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NativeFuncParams() throws ParseException {
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXEC:
      case FINAL:
      case ITERATOR:
      case LATENT:
      case PRIVATE:
      case PROTECTED:
      case SINGULAR:
      case STATIC:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_24;
      }
      ConstFuncParams();
    }
    jj_consume_token(NATIVE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXEC:
      case FINAL:
      case ITERATOR:
      case LATENT:
      case PRIVATE:
      case PROTECTED:
      case SINGULAR:
      case STATIC:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_25;
      }
      ConstFuncParams();
    }
  }

  final public void FuncEnd() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELEGATE:
    case EVENT:
    case FUNCTION:
      NormalFuncEnd();
      break;
    case OPERATOR:
    case POSTOPERATOR:
    case PREOPERATOR:
      OperatorFuncEnd();
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// NORMALFUNC = ( FUNCTIONPARAMS )* FUNCTIONTYPE ( LOCALTYPE )?
//              IDENTIFIER
//              LBRACK ( FUNCTIONARGS ( COMMA FUNCTIONARGS )* )? RBRACK
//              FUNCTIONBODY
  final public void NormalFuncEnd() throws ParseException {
    FunctionType();
    ReturnTypeThenIdentifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case COERCE:
    case FLOAT:
    case INT:
    case NAME:
    case OBJECT:
    case OPTIONAL:
    case OUT:
    case STRING:
    case IDENTIFIER:
      FunctionArgs();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_26;
        }
        jj_consume_token(COMMA);
        FunctionArgs();
      }
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

// Prevent choice conflict
// If is a PackageIdentifier() in LocalType(), and then <IDENTIFIER>
// Instead of:
// ( LocalType() )? <IDENTIFIER>
// LocalTypeThenIdentifier
  final public void ReturnTypeThenIdentifier() throws ParseException {
    if (jj_2_2(2)) {
      PackageIdentifierOrArrayDecl();
      jj_consume_token(IDENTIFIER);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CLASS:
      case FLOAT:
      case INT:
      case NAME:
      case OBJECT:
      case STRING:
        LocalTypeEnd();
        jj_consume_token(IDENTIFIER);
        break;
      case VOID:
        jj_consume_token(VOID);
        jj_consume_token(IDENTIFIER);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// OPERATORFUNC = ( FUNCTIONPARAMS )* OPERATORTYPE FUNCTIONBODY
  final public void OperatorFuncEnd() throws ParseException {
    OperatorType();
  }

// OPERATORTYPE = ( BINARYOPERATOR | UNARYOPERATOR )
  final public void OperatorType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR:
      BinaryOperator();
      break;
    case POSTOPERATOR:
    case PREOPERATOR:
      UnaryOperator();
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// requires two arguments
// BINARYOPERATOR = operator LBRACK INTVAL RBRACK PACKAGEIDENTIFIER OPIDENTIFIER
//                            LBRACK FUNCTIONARGS COMMA FUNCTIONARGS RBRACK
  final public void BinaryOperator() throws ParseException {
    jj_consume_token(OPERATOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT:
    case IDENTIFIER:
      PackageIdentifier();
      break;
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FLOAT:
    case INT:
    case NAME:
    case STRING:
      LocalTypeEnd();
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    OpIdentifier();
    jj_consume_token(LPAREN);
    FunctionArgs();
    jj_consume_token(COMMA);
    FunctionArgs();
    jj_consume_token(RPAREN);
  }

// requires one argument
// UNARYOPERATOR = ( preoperator | postoperator ) PACKAGEIDENTIFIER OPIDENTIFIER
//                            LBRACK FUNCTIONARGS RBRACK
  final public void UnaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREOPERATOR:
      jj_consume_token(PREOPERATOR);
      break;
    case POSTOPERATOR:
      jj_consume_token(POSTOPERATOR);
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT:
    case IDENTIFIER:
      PackageIdentifier();
      break;
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FLOAT:
    case INT:
    case NAME:
    case STRING:
      LocalTypeEnd();
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    OpIdentifier();
    jj_consume_token(LPAREN);
    FunctionArgs();
    jj_consume_token(RPAREN);
  }

// FUNCTIONARGS = ( optional | out | coerce )? FUNCTIONARGTYPE IDENTIFIER
// "optional" can have default value in UE3
// eg.
// function myFunc(optional int x = -1) {};
  final public void FunctionArgs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPTIONAL:
      jj_consume_token(OPTIONAL);
      FunctionArgTypeAndName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        UnaryExpression();
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      break;
    case ARRAY:
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case COERCE:
    case FLOAT:
    case INT:
    case NAME:
    case OBJECT:
    case OUT:
    case STRING:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COERCE:
      case OUT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUT:
          jj_consume_token(OUT);
          break;
        case COERCE:
          jj_consume_token(COERCE);
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      FunctionArgTypeAndName();
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FunctionArgTypeAndName() throws ParseException {
    FunctionArgType();
    jj_consume_token(IDENTIFIER);
  }

// FUNCTIONARGTYPE = BASICTYPE | PACKAGEIDENTIFIER
  final public void FunctionArgType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FLOAT:
    case INT:
    case NAME:
    case OBJECT:
    case STRING:
      BasicType();
      break;
    case IDENTIFIER:
      PackageIdentifier();
      break;
    case ARRAY:
      DynArrayDecl();
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// FUNCTIONBODY = ( SEMICOLON | ( ( LOCALDECL )* ( CODELINE )* ) ( SEMICOLON )? )
  final public void FunctionBody() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOCAL:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_27;
        }
        LocalDecl();
      }
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case NAME_LITERAL:
        case BEGIN:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CLASS:
        case CONTINUE:
        case DO:
        case END:
        case FALSE:
        case FLOAT:
        case FOR:
        case FOREACH:
        case GLOBAL:
        case GOTO:
        case IF:
        case INT:
        case NAME:
        case NONE:
        case OBJECT:
        case RETURN:
        case STRING:
        case SUPER:
        case SWITCH:
        case TRUE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_28;
        }
        CodeLine();
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// LOCALDECL = local LOCALTYPE IDENTIFIER ( COMMA IDENTIFIER )*
  final public void LocalDecl() throws ParseException {
    jj_consume_token(LOCAL);
    LocalType();
    jj_consume_token(IDENTIFIER);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_29;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
    jj_consume_token(SEMICOLON);
  }

// LOCALTYPE = PACKAGEIDENTIFIER | ARRAYDECL | CLASSTYPE | BASICTYPE
  final public void LocalType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      PackageIdentifierOrArrayDecl();
      break;
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FLOAT:
    case INT:
    case NAME:
    case OBJECT:
    case STRING:
      LocalTypeEnd();
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// LocalType without PackageIdentifier and ArrayDecl
// to prevent choice conflicts with <IDENTIFIER>
  final public void LocalTypeEnd() throws ParseException {
    BasicTypeOrClassType();
  }

// choice conflict - multiple things that start with <IDENTIFIER>
  final public void PackageIdentifierOrArrayDecl() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      ArrayDeclEnd();
      break;
    default:
      jj_la1[77] = jj_gen;
      PackageIdentifierEnd();
    }
  }

// Code parts
// CODELINE = ( STATEMENT | ASSIGNMENT | IFTHENELSE | WHILELOOP | DOLOOP
//              | SWITCHCASE | RETURNFUNC | FOREACHLOOP | FORLOOP )
  final public void CodeLine() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        CodeBlock();
        break;
      case STRING_LITERAL:
      case NAME_LITERAL:
      case BEGIN:
      case BOOLEAN:
      case BYTE:
      case CLASS:
      case END:
      case FALSE:
      case FLOAT:
      case GLOBAL:
      case INT:
      case NAME:
      case NONE:
      case OBJECT:
      case STRING:
      case SUPER:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        if (jj_2_3(2)) {
          Expression();
          jj_consume_token(SEMICOLON);
        } else if (jj_2_4(2)) {
          Statement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BEGIN:
          case END:
          case IDENTIFIER:
            LabelStatement();
            break;
          default:
            jj_la1[78] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case FOREACH:
        ForEachStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case CONTINUE:
        ContinueStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case GOTO:
        GotoStatement();
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
        recover(ex, SEMICOLON);
    }
  }

// CODEBLOCK = ( CODELINE | ( LCBRACK ( CODELINE )* RCBRACK ) )
  final public void CodeBlock() throws ParseException {
    jj_consume_token(LBRACE);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CLASS:
      case CONTINUE:
      case DO:
      case END:
      case FALSE:
      case FLOAT:
      case FOR:
      case FOREACH:
      case GLOBAL:
      case GOTO:
      case IF:
      case INT:
      case NAME:
      case NONE:
      case OBJECT:
      case RETURN:
      case STRING:
      case SUPER:
      case SWITCH:
      case TRUE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[80] = jj_gen;
        break label_30;
      }
      CodeLine();
    }
    jj_consume_token(RBRACE);
  }

// STATEMENT = FUNCCALL SEMICOLON
  final public void Statement() throws ParseException {
    FuncCall();
    jj_consume_token(SEMICOLON);
  }

// ASSIGNMENT = IDENTIFIER EQUALS EXPR SEMICOLON
  final public void Assignment() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    Expression();
    jj_consume_token(SEMICOLON);
  }

// IFTHENELSE = if LBRACK EXPR RBRACK CODEBLOCK ( else CODEBLOCK )?'
// The disambiguating algorithm of JavaCC automatically binds dangling
// else's to the innermost if statement.  The LOOKAHEAD specification
// is to tell JavaCC that we know what we are doing.
  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    CodeLine();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      CodeLine();
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
  }

// WHILELOOP = while LBRACK EXPR RBRACK CODEBLOCK
  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    CodeLine();
  }

// DOLOOP = do CODEBLOCK until LBRACK EXPR RBRACK
  final public void DoStatement() throws ParseException {
    jj_consume_token(DO);
    CodeLine();
    jj_consume_token(UNTIL);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

// SWITCHCASE = switch LBRACK EXPR RBRACK LCBRACK ( CASERULE )+ ( DEFAULTRULE )? RCBRACK
  final public void SwitchStatement() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_31;
      }
      SwitchLabel();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _DEFAULT:
      DefaultLabel();
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

// CASERULE = case INTVAL COLON CODEBLOCK
  final public void SwitchLabel() throws ParseException {
    jj_consume_token(CASE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case CLASS:
    case IDENTIFIER:
      QualifiedIdentifier();
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COLON);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CLASS:
      case CONTINUE:
      case DO:
      case END:
      case FALSE:
      case FLOAT:
      case FOR:
      case FOREACH:
      case GLOBAL:
      case GOTO:
      case IF:
      case INT:
      case NAME:
      case NONE:
      case OBJECT:
      case RETURN:
      case STRING:
      case SUPER:
      case SWITCH:
      case TRUE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_32;
      }
      CodeLine();
    }
  }

// DEFAULTRULE = default CODEBLOCK
  final public void DefaultLabel() throws ParseException {
    jj_consume_token(_DEFAULT);
    jj_consume_token(COLON);
    label_33:
    while (true) {
      CodeLine();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CLASS:
      case CONTINUE:
      case DO:
      case END:
      case FALSE:
      case FLOAT:
      case FOR:
      case FOREACH:
      case GLOBAL:
      case GOTO:
      case IF:
      case INT:
      case NAME:
      case NONE:
      case OBJECT:
      case RETURN:
      case STRING:
      case SUPER:
      case SWITCH:
      case TRUE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_33;
      }
    }
  }

// RETURNFUNC = return ( EXPR )? SEMICOLON
  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FALSE:
    case FLOAT:
    case GLOBAL:
    case INT:
    case NAME:
    case NONE:
    case OBJECT:
    case STRING:
    case SUPER:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

// eg.
// {
//     LoopForever:
//         goto LoopForever;
// }
  final public void GotoStatement() throws ParseException {
    jj_consume_token(GOTO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case NAME_LITERAL:
      jj_consume_token(NAME_LITERAL);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      jj_consume_token(NAME_LITERAL);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

// STATELABELS = ( IDENTIFIER COLON ( CODELINE )* )*
  final public void LabelStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COLON);
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case BEGIN:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CLASS:
      case CONTINUE:
      case DO:
      case END:
      case FALSE:
      case FLOAT:
      case FOR:
      case FOREACH:
      case GLOBAL:
      case GOTO:
      case IF:
      case INT:
      case NAME:
      case NONE:
      case OBJECT:
      case RETURN:
      case STRING:
      case SUPER:
      case SWITCH:
      case TRUE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_34;
      }
      CodeLine();
    }
  }

// FOREACHLOOP = foreach FUNCCALL CODEBLOCK
  final public void ForEachStatement() throws ParseException {
    jj_consume_token(FOREACH);
    FuncCall();
    CodeBlock();
  }

// FORLOOP = for LBRACK ASSIGNMENT SEMICOLON EXPR SEMICOLON EXPR RBRACK CODEBLOCK
  final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case CLASS:
    case FALSE:
    case GLOBAL:
    case NONE:
    case SUPER:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForInit();
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FALSE:
    case FLOAT:
    case GLOBAL:
    case INT:
    case NAME:
    case NONE:
    case OBJECT:
    case STRING:
    case SUPER:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case NAME_LITERAL:
    case CLASS:
    case FALSE:
    case GLOBAL:
    case NONE:
    case SUPER:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForUpdate();
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    CodeLine();
  }

  final public void ForInit() throws ParseException {
    StatementExpressionList();
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_35;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

// EXPR = OPERAND ( OPIDENTIFIER OPERAND )*
// This expansion has been written this way instead of:
//   Assignment() | ConditionalExpression()
// for performance reasons.
// However, it is a weakening of the grammar for it allows the LHS of
// assignments to be any conditional expression whereas it can only be
// a primary expression.  Consider adding a semantic predicate to work
// around this.
  final public void Expression() throws ParseException {
    if (jj_2_5(3)) {
      NewExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case BOOLEAN:
      case BYTE:
      case CLASS:
      case FALSE:
      case FLOAT:
      case GLOBAL:
      case INT:
      case NAME:
      case NONE:
      case OBJECT:
      case STRING:
      case SUPER:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        BinaryExpression();
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void TernaryExpression() throws ParseException {
    ConditionalExpression();
  }

  final public void ConditionalExpression() throws ParseException {
    BinaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      BinaryExpression();
      jj_consume_token(COLON);
      BinaryExpression();
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
  }

/*void BinaryExpression():
{}
{
    UnaryExpression() (LOOKAHEAD(2) OperatorNames() UnaryExpressionNotPlusMinus())*
}*/
  final public void BinaryExpression() throws ParseException {
    exp2();
    label_36:
    while (true) {
      if (jj_2_6(1)) {
        ;
      } else {
        break label_36;
      }
      OperatorNames2();
      exp2();
    }
  }

  final public void exp2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
    exp1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
  }

  final public void exp1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    case STRING_LITERAL:
    case NAME_LITERAL:
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FALSE:
    case FLOAT:
    case GLOBAL:
    case INT:
    case NAME:
    case NONE:
    case OBJECT:
    case STRING:
    case SUPER:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
      if (jj_2_7(3)) {
        CastExpression();
      } else if (jj_2_8(3)) {
        FuncCallOrIdentifierSpecifier();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case NAME_LITERAL:
        case CLASS:
        case FALSE:
        case NONE:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
          Literal();
          break;
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// new operator in UE3
// ObjectVar = new[(InOuter, InName, InFlags)] <class'InClass'>[(InTemplate)];
  final public void NewExpression() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    jj_consume_token(NEW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
    case LPAREN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case NONE:
          jj_consume_token(NONE);
          break;
        default:
          jj_la1[103] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          jj_consume_token(NAME_LITERAL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
              jj_consume_token(INTEGER_LITERAL);
              break;
            case IDENTIFIER:
              jj_consume_token(IDENTIFIER);
              break;
            default:
              jj_la1[104] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[105] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[106] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[107] = jj_gen;
        ;
      }
      jj_consume_token(CLASS);
      jj_consume_token(NAME_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME_LITERAL:
          jj_consume_token(NAME_LITERAL);
          break;
        default:
          jj_la1[108] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[109] = jj_gen;
        ;
      }
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// OPIDENTIFIER = IDENTIFIER | OPERATORNAMES
  final public void OpIdentifier() throws ParseException {
    if (jj_2_9(1)) {
      OperatorNames();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[111] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void OpIdentifier2() throws ParseException {
    if (jj_2_10(1)) {
      OperatorNames2();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//OPERATORNAMES  = '~' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' |
//                 '-' | '=' | '+' | '|' | '\' | ':' | '<' | '>' | '/' |
//                 '?' | '`' |
//                 '<<' | '>>' | '!=' | '<=' | '>=' | '++' | '--' | '?-' | '+=' |
//                 '-=' | '*=' | '/=' | '&&' | '||' | '^^' | '==' | '**' |
//                 '~=' | '@=' | '>>>'
// http://udn.epicgames.com/Two/UnrealScriptReference.html#Built-in%20operators%20and%20their%20precedence
  final public void OperatorNames() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      break;
    case HOOK:
      jj_consume_token(HOOK);
      break;
    case AT:
      jj_consume_token(AT);
      break;
    case DOLLARS:
      jj_consume_token(DOLLARS);
      break;
    case SC_OR:
      jj_consume_token(SC_OR);
      break;
    case SC_AND:
      jj_consume_token(SC_AND);
      break;
    case 180:
      jj_consume_token(180);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    case EQ:
      jj_consume_token(EQ);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    default:
      jj_la1[113] = jj_gen;
      if (jj_2_11(1)) {
        GT();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LE:
          jj_consume_token(LE);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        case 181:
          jj_consume_token(181);
          break;
        case LSHIFT:
          jj_consume_token(LSHIFT);
          break;
        default:
          jj_la1[114] = jj_gen;
          if (jj_2_12(1)) {
            RSIGNEDSHIFT();
          } else if (jj_2_13(1)) {
            RUNSIGNEDSHIFT();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PLUS:
              jj_consume_token(PLUS);
              break;
            case MINUS:
              jj_consume_token(MINUS);
              break;
            case REM:
              jj_consume_token(REM);
              break;
            case STAR:
              jj_consume_token(STAR);
              break;
            case SLASH:
              jj_consume_token(SLASH);
              break;
            case DOTPRODUCT:
              jj_consume_token(DOTPRODUCT);
              break;
            case CROSS:
              jj_consume_token(CROSS);
              break;
            case EXPONENT:
              jj_consume_token(EXPONENT);
              break;
            case CLOCKWISEFROM:
              jj_consume_token(CLOCKWISEFROM);
              break;
            case 182:
              jj_consume_token(182);
              break;
            case 183:
              jj_consume_token(183);
              break;
            case 184:
              jj_consume_token(184);
              break;
            case 185:
              jj_consume_token(185);
              break;
            case ATASSIGN:
              jj_consume_token(ATASSIGN);
              break;
            case DOLLARSASSIGN:
              jj_consume_token(DOLLARSASSIGN);
              break;
            case ANDASSIGN:
              jj_consume_token(ANDASSIGN);
              break;
            case XORASSIGN:
              jj_consume_token(XORASSIGN);
              break;
            case ORASSIGN:
              jj_consume_token(ORASSIGN);
              jj_consume_token(LSHIFTASSIGN);
              break;
            case RSIGNEDSHIFTASSIGN:
              jj_consume_token(RSIGNEDSHIFTASSIGN);
              break;
            case RUNSIGNEDSHIFTASSIGN:
              jj_consume_token(RUNSIGNEDSHIFTASSIGN);
              break;
            case PLUSASSIGN:
              jj_consume_token(PLUSASSIGN);
              break;
            case MINUSASSIGN:
              jj_consume_token(MINUSASSIGN);
              break;
            case REMASSIGN:
              jj_consume_token(REMASSIGN);
              break;
            case STARASSIGN:
              jj_consume_token(STARASSIGN);
              break;
            case SLASHASSIGN:
              jj_consume_token(SLASHASSIGN);
              break;
            case ASSIGN:
              jj_consume_token(ASSIGN);
              break;
            case INCR:
              jj_consume_token(INCR);
              break;
            case DECR:
              jj_consume_token(DECR);
              break;
            case TILDE:
              jj_consume_token(TILDE);
              break;
            case BANG:
              jj_consume_token(BANG);
              break;
            default:
              jj_la1[115] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void OperatorNames2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      break;
    case HOOK:
      jj_consume_token(HOOK);
      break;
    case AT:
      jj_consume_token(AT);
      break;
    case DOLLARS:
      jj_consume_token(DOLLARS);
      break;
    case SC_OR:
      jj_consume_token(SC_OR);
      break;
    case SC_AND:
      jj_consume_token(SC_AND);
      break;
    case 180:
      jj_consume_token(180);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    case EQ:
      jj_consume_token(EQ);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    default:
      jj_la1[116] = jj_gen;
      if (jj_2_14(1)) {
        GT();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LE:
          jj_consume_token(LE);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        case 181:
          jj_consume_token(181);
          break;
        case LSHIFT:
          jj_consume_token(LSHIFT);
          break;
        default:
          jj_la1[117] = jj_gen;
          if (jj_2_15(1)) {
            RSIGNEDSHIFT();
          } else if (jj_2_16(1)) {
            RUNSIGNEDSHIFT();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PLUS:
              jj_consume_token(PLUS);
              break;
            case MINUS:
              jj_consume_token(MINUS);
              break;
            case REM:
              jj_consume_token(REM);
              break;
            case STAR:
              jj_consume_token(STAR);
              break;
            case SLASH:
              jj_consume_token(SLASH);
              break;
            case DOTPRODUCT:
              jj_consume_token(DOTPRODUCT);
              break;
            case CROSS:
              jj_consume_token(CROSS);
              break;
            case EXPONENT:
              jj_consume_token(EXPONENT);
              break;
            case CLOCKWISEFROM:
              jj_consume_token(CLOCKWISEFROM);
              break;
            case 182:
              jj_consume_token(182);
              break;
            case 183:
              jj_consume_token(183);
              break;
            case 184:
              jj_consume_token(184);
              break;
            case 185:
              jj_consume_token(185);
              break;
            case ATASSIGN:
              jj_consume_token(ATASSIGN);
              break;
            case DOLLARSASSIGN:
              jj_consume_token(DOLLARSASSIGN);
              break;
            case ANDASSIGN:
              jj_consume_token(ANDASSIGN);
              break;
            case XORASSIGN:
              jj_consume_token(XORASSIGN);
              break;
            case ORASSIGN:
              jj_consume_token(ORASSIGN);
              jj_consume_token(LSHIFTASSIGN);
              break;
            case RSIGNEDSHIFTASSIGN:
              jj_consume_token(RSIGNEDSHIFTASSIGN);
              break;
            case RUNSIGNEDSHIFTASSIGN:
              jj_consume_token(RUNSIGNEDSHIFTASSIGN);
              break;
            case PLUSASSIGN:
              jj_consume_token(PLUSASSIGN);
              break;
            case MINUSASSIGN:
              jj_consume_token(MINUSASSIGN);
              break;
            case REMASSIGN:
              jj_consume_token(REMASSIGN);
              break;
            case STARASSIGN:
              jj_consume_token(STARASSIGN);
              break;
            case SLASHASSIGN:
              jj_consume_token(SLASHASSIGN);
              break;
            case ASSIGN:
              jj_consume_token(ASSIGN);
              break;
            default:
              jj_la1[118] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void TernaryOperatorNames() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      break;
    case HOOK:
      jj_consume_token(HOOK);
      break;
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BinaryOperatorNames() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      jj_consume_token(AT);
      break;
    case DOLLARS:
      jj_consume_token(DOLLARS);
      break;
    case SC_OR:
      jj_consume_token(SC_OR);
      break;
    case SC_AND:
      jj_consume_token(SC_AND);
      break;
    case 180:
      jj_consume_token(180);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case NE:
      jj_consume_token(NE);
      break;
    case EQ:
      jj_consume_token(EQ);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    default:
      jj_la1[120] = jj_gen;
      if (jj_2_17(1)) {
        GT();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LE:
          jj_consume_token(LE);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        case 181:
          jj_consume_token(181);
          break;
        case LSHIFT:
          jj_consume_token(LSHIFT);
          break;
        default:
          jj_la1[121] = jj_gen;
          if (jj_2_18(1)) {
            RSIGNEDSHIFT();
          } else if (jj_2_19(1)) {
            RUNSIGNEDSHIFT();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PLUS:
              jj_consume_token(PLUS);
              break;
            case MINUS:
              jj_consume_token(MINUS);
              break;
            case REM:
              jj_consume_token(REM);
              break;
            case STAR:
              jj_consume_token(STAR);
              break;
            case SLASH:
              jj_consume_token(SLASH);
              break;
            case DOTPRODUCT:
              jj_consume_token(DOTPRODUCT);
              break;
            case CROSS:
              jj_consume_token(CROSS);
              break;
            case EXPONENT:
              jj_consume_token(EXPONENT);
              break;
            case CLOCKWISEFROM:
              jj_consume_token(CLOCKWISEFROM);
              break;
            case 182:
              jj_consume_token(182);
              break;
            case 183:
              jj_consume_token(183);
              break;
            case 184:
              jj_consume_token(184);
              break;
            case 185:
              jj_consume_token(185);
              break;
            case ASSIGN:
            case ATASSIGN:
            case DOLLARSASSIGN:
            case PLUSASSIGN:
            case MINUSASSIGN:
            case STARASSIGN:
            case SLASHASSIGN:
            case ANDASSIGN:
            case ORASSIGN:
            case XORASSIGN:
            case REMASSIGN:
            case RSIGNEDSHIFTASSIGN:
            case RUNSIGNEDSHIFTASSIGN:
              AssignmentOperatorNames();
              break;
            default:
              jj_la1[122] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void AssignmentOperatorNames() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATASSIGN:
      jj_consume_token(ATASSIGN);
      break;
    case DOLLARSASSIGN:
      jj_consume_token(DOLLARSASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnaryOperatorNames() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
      break;
    case DECR:
      jj_consume_token(DECR);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case TILDE:
      jj_consume_token(TILDE);
      break;
    case BANG:
      jj_consume_token(BANG);
      break;
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PrimaryExpression();
      break;
    case STRING_LITERAL:
    case NAME_LITERAL:
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FALSE:
    case FLOAT:
    case GLOBAL:
    case INT:
    case NAME:
    case NONE:
    case OBJECT:
    case STRING:
    case SUPER:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    jj_consume_token(INCR);
    PrimaryExpression();
  }

  final public void PreDecrementExpression() throws ParseException {
    jj_consume_token(DECR);
    PrimaryExpression();
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PrimaryExpression();
      break;
    case STRING_LITERAL:
    case NAME_LITERAL:
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FALSE:
    case FLOAT:
    case GLOBAL:
    case INT:
    case NAME:
    case NONE:
    case OBJECT:
    case STRING:
    case SUPER:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      if (jj_2_20(2)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case NAME_LITERAL:
        case CLASS:
        case FALSE:
        case GLOBAL:
        case NONE:
        case SUPER:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          PostfixExpression();
          break;
        default:
          jj_la1[128] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CastExpression() throws ParseException {
    BasicTypeOrClassType();
    jj_consume_token(LPAREN);
    PrimaryPrefix();
    jj_consume_token(RPAREN);
  }

  final public void PostfixExpression() throws ParseException {
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[131] = jj_gen;
      ;
    }
  }

// OPERAND = ( CONSTVALUE | QUALIFIEDIDENTIFIER | FUNCCALL )
  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    case STRING_LITERAL:
    case NAME_LITERAL:
    case CLASS:
    case FALSE:
    case GLOBAL:
    case NONE:
    case SUPER:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
      if (jj_2_21(3)) {
        Literal();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case GLOBAL:
        case SUPER:
        case IDENTIFIER:
          FuncCallOrIdentifierSpecifier();
          break;
        default:
          jj_la1[132] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*void PrimarySuffix():
{}
{
    "." <IDENTIFIER> |
    FunctionArgs()
}*/

// Function Calling Specifiers
// Super(Pawn).Touch( Other );
// Global.Touch( Other );
// Super.Touch( Other );
  final public void FuncCallOrIdentifierSpecifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GLOBAL:
    case SUPER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUPER:
        jj_consume_token(SUPER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          jj_consume_token(IDENTIFIER);
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[134] = jj_gen;
          ;
        }
        jj_consume_token(DOT);
        break;
      case GLOBAL:
        jj_consume_token(GLOBAL);
        jj_consume_token(DOT);
        break;
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
    FuncCallOrQualifiedIdentifier();
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void StatementExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case STRING_LITERAL:
    case NAME_LITERAL:
    case CLASS:
    case FALSE:
    case GLOBAL:
    case NONE:
    case SUPER:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case ATASSIGN:
      case DOLLARSASSIGN:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        case ASSIGN:
        case ATASSIGN:
        case DOLLARSASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          AssignmentOperatorNames();
          if (jj_2_22(3)) {
            Expression();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case STRING_LITERAL:
            case NAME_LITERAL:
            case CLASS:
            case FALSE:
            case GLOBAL:
            case NONE:
            case SUPER:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case INCR:
            case DECR:
              StatementExpression();
              break;
            default:
              jj_la1[137] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[138] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[139] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    jj_consume_token(SEMICOLON);
  }

// -- Defaultproperties
// DEFAULTPROPERTIESBLOCK = defaultproperties LCBRACK ( DEFPROP )* RCBRACK
  final public void DefaultPropertiesBlock() throws ParseException {
    jj_consume_token(_DEFAULTPROPERTIES);
    jj_consume_token(LBRACE);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[141] = jj_gen;
        break label_37;
      }
      DefProp();
    }
    jj_consume_token(RBRACE);
  }

  final public void StructDefaultPropertiesBlock() throws ParseException {
    jj_consume_token(STRUCTDEFAULTPROPERTIES);
    jj_consume_token(LBRACE);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[142] = jj_gen;
        break label_38;
      }
      DefProp();
    }
    jj_consume_token(RBRACE);
  }

// DEFPROP = DEFPROPIDENTIFIER EQUALS PRINTABLE
  final public void DefProp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
      jj_consume_token(BEGIN);
      jj_consume_token(OBJECT);
      jj_consume_token(CLASS);
      jj_consume_token(ASSIGN);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(NAME);
      jj_consume_token(ASSIGN);
      jj_consume_token(IDENTIFIER);
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[143] = jj_gen;
          break label_39;
        }
        DefProp2();
      }
      jj_consume_token(END);
      jj_consume_token(OBJECT);
      break;
    case IDENTIFIER:
      DefProp2();
      break;
    default:
      jj_la1[144] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefProp2() throws ParseException {
    DefPropIdentifier();
    if (jj_2_26(2147483647)) {
      jj_consume_token(ASSIGN);
      if (jj_2_25(2147483647)) {
        DefPropStruct2();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case NAME_LITERAL:
        case BOOLEAN:
        case BYTE:
        case CLASS:
        case FALSE:
        case FLOAT:
        case GLOBAL:
        case INT:
        case NAME:
        case NONE:
        case OBJECT:
        case STRING:
        case SUPER:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          if (jj_2_24(2147483647)) {
            DefPropStruct1();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case STRING_LITERAL:
            case NAME_LITERAL:
            case BOOLEAN:
            case BYTE:
            case CLASS:
            case FALSE:
            case FLOAT:
            case GLOBAL:
            case INT:
            case NAME:
            case NONE:
            case OBJECT:
            case STRING:
            case SUPER:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
              if (jj_2_23(2147483647)) {
                DefPropArray1();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case STRING_LITERAL:
                case NAME_LITERAL:
                case BOOLEAN:
                case BYTE:
                case CLASS:
                case FALSE:
                case FLOAT:
                case GLOBAL:
                case INT:
                case NAME:
                case NONE:
                case OBJECT:
                case STRING:
                case SUPER:
                case TRUE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                  DefPropValue();
                  break;
                default:
                  jj_la1[145] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              break;
            default:
              jj_la1[146] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[147] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        DefPropArray3();
        break;
      default:
        jj_la1[148] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// DEFPROPIDENTIFIER = IDENTIFIER ( ( LBRACK INTVAL RBRACK ) | ( LSBRACK INTVAL RSBRACK ) )?
  final public void DefPropIdentifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
    if (jj_2_27(3)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        ArrayIndex();
        jj_consume_token(RPAREN);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        ArrayIndex();
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[149] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
  }

  final public void ArrayIndex() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    default:
      jj_la1[150] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Default properties block
// Filling dynamic array type 1
// ArrayProp=(Value1,Value2,Value3)
  final public void DefPropArray1() throws ParseException {
    jj_consume_token(LPAREN);
    DefPropValue();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[151] = jj_gen;
        break label_40;
      }
      jj_consume_token(COMMA);
      DefPropValue();
    }
    jj_consume_token(RPAREN);
  }

// ArrayProp(0)=Value1
// See DefPropIdentifier()

// ArrayProp.Add(Value1)
  final public void DefPropArray3() throws ParseException {
    jj_consume_token(DOT);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    DefPropValue();
    jj_consume_token(RPAREN);
  }

// StructProperty={(
//                    InnerStructPropertyA=Value1,
//                    InnerStructPropertyB=Value2
//                    )}

// Default properties block
// Filling struct type 1
// StructProperty=(InnerStructPropertyA=Value1,InnerStructPropertyB=Value2)
  final public void DefPropStruct1() throws ParseException {
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    DefPropValue();
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[152] = jj_gen;
        break label_41;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      DefPropValue();
    }
    jj_consume_token(RPAREN);
  }

  final public void DefPropStruct2() throws ParseException {
    jj_consume_token(LBRACE);
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    DefPropValue();
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[153] = jj_gen;
        break label_42;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      DefPropValue();
    }
    jj_consume_token(RPAREN);
    jj_consume_token(RBRACE);
  }

  final public void DefPropValue() throws ParseException {
    if (jj_2_28(3)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(NAME_LITERAL);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case NAME_LITERAL:
      case BOOLEAN:
      case BYTE:
      case CLASS:
      case FALSE:
      case FLOAT:
      case GLOBAL:
      case INT:
      case NAME:
      case NONE:
      case OBJECT:
      case STRING:
      case SUPER:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        jj_la1[154] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Terminals
 */
/*
PRINTABLE                = all printable characters
ALPHA                    = 'a' .. 'z'
DIGIT                    = '0' .. '9'
HEXDIGIT                 = DIGIT | 'a' .. 'f'
SEMICOLON                = ';'
COLON                    = ':'
UNDERSCORE               = '_'
LBRACK                   = '('
RBRACK                   = ')'
LABRACK                  = '<'
RABRACK                  = '>'
LCBRACK                  = '{'
RCBRACK                  = '}'
LSBRACK                  = '['
RSBRACK                  = ']'
DOT                      = '.'
COMMA                    = ','
SQUOTE                   = '''
DQUOTE                   = '"'
EQUALS                   = '='
*/
/*
See above
*/

// CONSTCLASSPARAMS = abstract | native | nativereplication | safereplace |
//                            perobjectconfig | transient | noexport | exportstructs |
//                            // available but obsolete:
//                            guid(INTVAL,INTVAL,INTVAL,INTVAL)
//                            // available from warfare and up:
//                            collapsecategories | dontcollapsecategories | placeable |
//                            notplaceable | editinlinenew | noteditinlinenew
  final public void ConstClassParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATIVE:
      jj_consume_token(NATIVE);
      break;
    case NATIVEREPLICATION:
      jj_consume_token(NATIVEREPLICATION);
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
      break;
    case GUID:
      jj_consume_token(GUID);
      jj_consume_token(LPAREN);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(RPAREN);
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
      break;
    case PLACEABLE:
      jj_consume_token(PLACEABLE);
      break;
    case NOTPLACEABLE:
      jj_consume_token(NOTPLACEABLE);
      break;
    default:
      jj_la1[155] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// BOOLVAL = true | false
  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[156] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// VARPARAMS = config | const | editconst | export | globalconfig | input |
//             localized | native | private | protected | transient | travel |
//             // available from warfare and up:
//             editinline | deprecated | edfindable | editinlineuse
  final public void VarParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONFIG:
      jj_consume_token(CONFIG);
      break;
    case CONST:
      jj_consume_token(CONST);
      break;
    case EDFINDABLE:
      jj_consume_token(EDFINDABLE);
      break;
    case EDITCONST:
      jj_consume_token(EDITCONST);
      break;
    case EDITINLINE:
      jj_consume_token(EDITINLINE);
      break;
    case EDITINLINEUSE:
      jj_consume_token(EDITINLINEUSE);
      break;
    case DEPRECATED:
      jj_consume_token(DEPRECATED);
      break;
    case EXPORT:
      jj_consume_token(EXPORT);
      break;
    case GLOBALCONFIG:
      jj_consume_token(GLOBALCONFIG);
      break;
    case INPUT:
      jj_consume_token(INPUT);
      break;
    case LOCALIZED:
      jj_consume_token(LOCALIZED);
      break;
    case NATIVE:
      jj_consume_token(NATIVE);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
      break;
    case TRAVEL:
      jj_consume_token(TRAVEL);
      break;
    default:
      jj_la1[157] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// STATEPARAMS = auto | simulated
// Moved "simulated" to StateAndConstFuncParams prevent choice conflicts
  final public void StateParams() throws ParseException {
    jj_consume_token(AUTO);
  }

// CONSTFUNCPARAMS = final | iterator | latent | simulated | singular | static |
//                   exec | protected | private
// Moved "simulated" to StateAndConstFuncParams prevent choice conflicts
  final public void ConstFuncParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    case ITERATOR:
      jj_consume_token(ITERATOR);
      break;
    case LATENT:
      jj_consume_token(LATENT);
      break;
    case SINGULAR:
      jj_consume_token(SINGULAR);
      break;
    case STATIC:
      jj_consume_token(STATIC);
      break;
    case EXEC:
      jj_consume_token(EXEC);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    default:
      jj_la1[158] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Prevent choice conflicts between StateParams and ConstFuncParams
  final public void StateAndConstFuncParams() throws ParseException {
    jj_consume_token(SIMULATED);
  }

// BASICTYPE = byte | int | float | string | bool | name | class
// Moved "class" to BasicClassType() to prevent choice confilcts with ClassType
  final public void BasicType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case FLOAT:
    case INT:
    case NAME:
    case OBJECT:
    case STRING:
      BasicTypeSimple();
      break;
    case CLASS:
      BasicClassType();
      break;
    default:
      jj_la1[159] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BasicTypeSimple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case NAME:
      jj_consume_token(NAME);
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
      break;
    default:
      jj_la1[160] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BasicClassType() throws ParseException {
    jj_consume_token(CLASS);
  }

// choice conflict - multiple things that can start with "class"
  final public void BasicTypeOrClassType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case FLOAT:
    case INT:
    case NAME:
    case OBJECT:
    case STRING:
      BasicTypeSimple();
      break;
    case CLASS:
      jj_consume_token(CLASS);
      if (jj_2_29(2)) {
        ClassTypeEnd();
      } else {
        ;
      }
      break;
    default:
      jj_la1[161] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// FUNCTIONTYPE = function | event | delegate
  final public void FunctionType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      jj_consume_token(FUNCTION);
      break;
    case EVENT:
      jj_consume_token(EVENT);
      break;
    case DELEGATE:
      jj_consume_token(DELEGATE);
      break;
    default:
      jj_la1[162] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case BOOLEAN:
    case BYTE:
    case CLASS:
    case FLOAT:
    case INT:
    case NAME:
    case OBJECT:
    case STRING:
      BasicType();
      break;
    default:
      jj_la1[163] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case NAME_LITERAL:
      jj_consume_token(NAME_LITERAL);
      break;
    case CLASS:
      jj_consume_token(CLASS);
      jj_consume_token(NAME_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NONE:
      NoneLiteral();
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NoneLiteral() throws ParseException {
    jj_consume_token(NONE);
  }

// We use productions to match >>>, >> and > so that we can keep the
// type declaration syntax with generics clean
  final public void RUNSIGNEDSHIFT() throws ParseException {
    if (( getToken(1).kind == GT ) &&
            ( ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT )) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    if (( getToken(1).kind == GT ) &&
            ( ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT)) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

  final public void GT() throws ParseException {
    if (( getToken(1).kind == GT ) &&
            ( ((Token.GTToken)getToken(1)).realKind == GT )) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_3_8() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(SUPER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) return true;
    }
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_48()) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_99()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_65()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    jj_lookingAhead = true;
    jj_semLA = ( getToken(1).kind == GT ) &&
        ( ((Token.GTToken)getToken(1)).realKind == GT );
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_70()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    return false;
  }

  private boolean jj_3R_53() {
    jj_lookingAhead = true;
    jj_semLA = ( getToken(1).kind == GT ) &&
        ( ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_71()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    jj_lookingAhead = true;
    jj_semLA = ( getToken(1).kind == GT ) &&
        ( ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT );
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_72()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(NAME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(CLASS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(ORASSIGN)) return true;
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(180)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) {
    jj_scanpos = xsp;
    if (jj_scan_token(184)) {
    jj_scanpos = xsp;
    if (jj_scan_token(185)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(GLOBAL)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(180)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) {
    jj_scanpos = xsp;
    if (jj_scan_token(184)) {
    jj_scanpos = xsp;
    if (jj_scan_token(185)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public UnrealScriptParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[165];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000000,0x0,0x0,0x0,0x10008000,0x0,0x10008000,0x0,0x0,0x0,0x1000000,0x0,0x20000000,0x1000000,0x0,0x0,0x1284800,0x0,0x0,0x20000000,0x0,0x0,0x1000000,0x0,0x0,0x20000000,0x0,0x30000000,0x0,0x0,0x1290000,0x1280000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5290000,0x1280000,0x0,0x0,0x1280000,0x0,0x1280000,0x0,0x4000000,0x4000000,0x5290000,0x1290000,0x0,0x413c4800,0x0,0x0,0x1280000,0x0,0x40000,0x413c4800,0x413c4800,0x0,0x800000,0x0,0x1000000,0x413c4800,0x413c4800,0x1284800,0x4000,0x40000,0x413c4800,0x1004800,0x1284800,0x1004800,0x0,0x1284800,0x0,0x0,0x0,0x0,0x0,0x1004800,0x1284800,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x1000000,0x0,0x0,0x0,0x0,0x82000000,0x0,0x0,0x82000000,0x0,0x0,0x0,0x82000000,0x0,0x0,0x0,0x1284800,0x0,0x1004800,0x1284800,0x0,0x0,0x1000000,0x1004800,0x0,0x0,0x0,0x1004800,0x0,0x0,0x1004800,0x40000,0x40000,0x0,0x40000,0x1284800,0x1284800,0x1284800,0x0,0x0,0x0,0x0,0x0,0x0,0x1284800,0x8000,0x0,0x30000000,0x0,0x1280000,0x280000,0x1280000,0x0,0x1280000,0x1004800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000,0x0,0x2,0x100000,0xc0000008,0x0,0xc0000008,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x8a00000,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x10041710,0x0,0x0,0x808000,0x800000,0x0,0x40000,0x100000,0x40000,0x0,0x0,0x0,0x0,0x0,0x4430004,0x0,0x4430004,0x0,0x0,0x0,0x100000,0x0,0x4430004,0x4000,0x0,0x0,0x420000,0x4430004,0x420000,0x0,0x420000,0x4010004,0x0,0x800000,0x800000,0x0,0x0,0x800000,0x0,0x800000,0x0,0x0,0x0,0x800000,0x800000,0x0,0x2ba04020,0x0,0x0,0x800000,0x0,0x4000,0x2ba04020,0x2ba04020,0x2000,0x0,0x1,0x0,0x2ba04020,0x2ba04020,0x8a00000,0x0,0x4000,0x2ba04020,0x8200000,0x8a00000,0x8200000,0x0,0x8a00000,0x0,0x0,0x0,0x0,0x0,0x200000,0x8a00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x80,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x8a00000,0x0,0x8200000,0x8a00000,0x0,0x0,0x8000000,0x8200000,0x0,0x8000000,0x8000000,0x8200000,0x0,0x0,0x8200000,0x0,0x0,0x0,0x0,0x8a00000,0x8a00000,0x8a00000,0x0,0x0,0x0,0x0,0x0,0x0,0x8a00000,0x40000000,0x200000,0x10041710,0x420000,0x800000,0x800000,0x800000,0x4010004,0x800000,0x200000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x80000000,0x0,0x0,0x1021800,0x0,0x1021800,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50420,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000a08,0x0,0x0,0x40420,0x40420,0x0,0x800,0x0,0x800,0x0,0x0,0x40000002,0x40000000,0x40000000,0x1e0808c0,0x0,0x1e0808c0,0x0,0x0,0x0,0x0,0x4,0x1e0808c0,0x0,0x0,0x0,0x180000c0,0x1e0800c0,0x180000c0,0x0,0x180000c0,0x6080000,0x0,0x340420,0x40420,0x6080000,0x0,0x40420,0x6000000,0x40420,0x0,0x200000,0x200000,0x340420,0x40420,0x100,0x50422,0x0,0x0,0x40420,0x0,0x0,0x50422,0x50422,0x0,0x0,0x0,0x0,0x50422,0x50422,0x50420,0x0,0x0,0x50422,0x10000,0x50420,0x10000,0x0,0x50420,0x0,0x0,0x0,0x0,0x0,0x10000,0x50420,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50420,0x0,0x10000,0x50420,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x10000,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x50420,0x50420,0x50420,0x0,0x0,0x0,0x0,0x0,0x0,0x50420,0x1021800,0x0,0x18000a08,0x180000c0,0x40420,0x40420,0x40420,0x0,0x40420,0x10000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x20100,0x0,0x0,0x0,0x81004,0x0,0x81004,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x42204480,0x0,0x0,0x40,0x0,0x0,0x40000000,0x0,0x0,0x20100,0x0,0x3000,0x0,0x40000000,0x40000180,0x40000080,0x0,0x0,0x0,0x0,0x20000,0x200,0x8000,0x8000,0x8000,0x78,0x8,0x70,0x0,0x0,0x0,0x0,0x0,0x50,0x40000000,0x0,0x0,0x50,0x50,0x50,0x0,0x50,0x0,0x0,0x40000080,0x40040080,0x0,0x40200000,0x40000080,0x0,0x40000080,0x0,0x0,0x0,0x40000080,0x40000080,0x0,0x42304c81,0x0,0x0,0x40000080,0x0,0x40000000,0x42304c81,0x42304c81,0x0,0x0,0x0,0x40200000,0x42304c81,0x42304c81,0x42204480,0x40000000,0x40000000,0x42304c81,0x42204400,0x42204480,0x42204400,0x0,0x42204480,0x0,0x0,0x0,0x0,0x0,0x2204000,0x42204480,0x40000000,0x40200000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x42204480,0x0,0x42204400,0x42204480,0x0,0x0,0x40000400,0x42204400,0x0,0x400,0x400,0x42204400,0x0,0x0,0x42204400,0x40000000,0x40000000,0x40000000,0x40000000,0x42204480,0x42204480,0x42204480,0x0,0x0,0x40200000,0x0,0x0,0x0,0x42204480,0x1000,0x4000,0x3000,0x50,0x80,0x80,0x80,0x0,0x40080,0x2204000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x200,0x0,0x200,0x0,0x0,0x200,0x100,0xf00c002,0x200,0x200,0x0,0x200,0x2,0x0,0x100,0x100,0x0,0x2,0x0,0x100,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0xf00c08a,0x88,0x100,0x0,0x20,0x0,0xf00c08a,0xf00c08a,0x0,0x0,0x0,0x0,0xf00c08a,0xf00c08a,0xf00c002,0x2,0x0,0xf00c08a,0x3000002,0xf00c002,0x3000002,0x100,0xf00c002,0x10000,0xf00c000,0xf00c000,0x3000000,0x3000000,0x0,0x2,0x0,0x0,0x100,0x100,0x2,0x0,0x2,0x2,0x0,0x0,0xc0e73800,0x180000,0x3f00c400,0xc0e73800,0x180000,0x3c000400,0x30000,0xc0e43800,0x180000,0x3c000400,0x400,0xf00c000,0xc000000,0xf00c002,0xc000,0x2,0xc002,0x3000000,0x3000000,0x0,0x2,0x2,0x0,0x0,0x3000002,0x3000400,0x3000400,0x3000002,0x0,0x0,0x0,0x0,0xf00c002,0xf00c002,0xf00c002,0x200,0x22,0x0,0x100,0x100,0x100,0xf00c002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100001,0x200004,0x3c1bffa,0x100001,0x200004,0x3c1bffa,0x0,0x100001,0x200004,0x3c1bffa,0x1bff0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1bff0,0x1bff0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[29];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public UnrealScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public UnrealScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new UnrealScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 165; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 165; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public UnrealScriptParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new UnrealScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 165; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 165; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public UnrealScriptParser(UnrealScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 165; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(UnrealScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 165; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[186];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 165; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 186; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 29; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
