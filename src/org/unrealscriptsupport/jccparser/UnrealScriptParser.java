/* Generated By:JavaCC: Do not edit this line. UnrealScriptParser.java */
package org.unrealscriptsupport.jccparser;
import java.io.*;
import java.util.*;
/**
 * Grammar to parse UnrealScript from Unreal Tournament 2004.
 * Based on:
 * Grammar to parse Java version 1.5
 * by Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class UnrealScriptParser implements UnrealScriptParserConstants {
    public static final String PARSER_NAME = "UnrealScript Parser";
    public static final float VERSION = 1.0f;
    public static final String PARSER_INFO =
        PARSER_NAME + " Version " + VERSION + ": ";

    public List<ParseException> syntaxErrors = new ArrayList<ParseException> ();

    /**
     * Add to error list and step back to a recovery point.
     */
    void recover(ParseException ex, int recoveryPoint) {

        syntaxErrors.add(ex);
        Token t = getNextToken();

        // (t.kind != recoveryPoint)
        // Backtrack until the recoveryPoint token is found
        // eg. a semicolon

        // (t.next != null)
        // If the recoveryPoint does not exist,
        // then stop it backtracking forever
        while ( (t.next != null) &&
                (t.kind != recoveryPoint) ) {
            t = getNextToken();
        }
    }

    public UnrealScriptParser(String fileName)
    {
        this(System.in);
        try {
            ReInit(new FileInputStream(new File(fileName)));
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String args[]) {

        UnrealScriptParser parser;

        if (args.length == 0) {

            System.out.println(PARSER_INFO +
                               "Reading from standard input . . .");
            parser = new UnrealScriptParser(System.in);
        }
        else if (args.length == 1) {
            System.out.println(PARSER_INFO +
                               "Reading from file " + args[0] + " . . .");

            try {
                parser = new UnrealScriptParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e) {
                System.out.println(PARSER_INFO +
                                   "File " + args[0] + " not found.");
                return;
            }
        }
        else {
            System.out.println(PARSER_INFO + "Usage is one of:");
            System.out.println("         java UnrealScriptParser < inputfile");
            System.out.println("OR");
            System.out.println("         java UnrealScriptParser inputfile");
            return;
        }
        try {
            parser.CompilationUnit();
            System.out.println(PARSER_INFO +
                               "UnrealScript program parsed successfully.");
        }
        catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println(PARSER_INFO +
                               "Encountered errors during parse.");
        }
    }

/*************************************************
 * THE UNREALSCRIPT LANGUAGE GRAMMAR STARTS HERE *
 *************************************************/

/*
 * --- Non-Terminals.
 */

// PROGRAM                  = CLASSDECL
//                            ( DECLARATIONS )*
//                            ( REPLICATIONBLOCK )?
//                            BODY
//                            ( DEFAULTPROPERTIESBLOCK )?
  final public void CompilationUnit() throws ParseException {
    try {
      ClassDeclaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _DEFAULTPROPERTIES:
        DefaultPropertiesBlock();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(0);
    } catch (ParseException ex) {
        recover (ex, SEMICOLON);
    }
  }

// CLASSDECL                = class IDENTIFIER ( extends PACKAGEIDENTIFIER )?
//                            ( CLASSPARAMS )* SEMICOLON
  final public void ClassDeclaration() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      PackageIdentifier();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CONFIG:
      case DEPENDSON:
      case GUID:
      case HIDECATEGORIES:
      case NATIVE:
      case NATIVEREPLICATION:
      case NOTPLACEABLE:
      case PLACEABLE:
      case SHOWCATEGORIES:
      case TRANSIENT:
      case WITHIN:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      ClassParams();
    }
    jj_consume_token(SEMICOLON);
  }

// CLASSPARAMS              = CONSTCLASSPARAMS | within PACKAGEIDENTIFIER |
//                            dependson LBRACK PACKAGEIDENTIFIER RBRACK |
//                            config ( LBRACK PACKAGEIDENTIFIER RBRACK )? |
//                            hidecategories LBRACK IDENTIFIERLIST RBRACK |
//                            showcategories LBRACK IDENTIFIERLIST RBRACK
  final public void ClassParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case GUID:
    case NATIVE:
    case NATIVEREPLICATION:
    case NOTPLACEABLE:
    case PLACEABLE:
    case TRANSIENT:
      ConstClassParams();
      break;
    case WITHIN:
      jj_consume_token(WITHIN);
      PackageIdentifier();
      break;
    case DEPENDSON:
      jj_consume_token(DEPENDSON);
      jj_consume_token(LPAREN);
      PackageIdentifier();
      jj_consume_token(RPAREN);
      break;
    case CONFIG:
      jj_consume_token(CONFIG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        PackageIdentifier();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    case HIDECATEGORIES:
      jj_consume_token(HIDECATEGORIES);
      jj_consume_token(LPAREN);
      IdentifierList();
      jj_consume_token(RPAREN);
      break;
    case SHOWCATEGORIES:
      jj_consume_token(SHOWCATEGORIES);
      jj_consume_token(LPAREN);
      IdentifierList();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// IDENTIFIER               = ( ALPHA | UNDERSCORE ) ( ALPHA | UNDERSCORE | DIGIT )*
// See <IDENTIFIER> above

// packagename.classname or classname.structname
// PACKAGEIDENTIFIER        = ( IDENTIFIER DOT )? IDENTIFIER
  final public void PackageIdentifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

// QUALIFIEDIDENTIFIER      = ( ( class SQUOTE PACKAGEIDENTIFIER SQUOTE DOT default DOT IDENTIFIER )
//                            | ( ( IDENTIFIER DOT )* IDENTIFIER )
//                            )
/*void QualifiedIdentifier():
{}
{
    (
    ( "class" "'" PackageIdentifier() "'" "." "default" "." <IDENTIFIER> ) |
    ( ( <IDENTIFIER> "." )* <IDENTIFIER> )
    )
}*/

// IDENTIFIERLIST           = IDENTIFIER ( COMMA IDENTIFIER )*
  final public void IdentifierList() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
  }

// STRINGVAL                = DQUOTE PRINTABLE DQUOTE
// INTVAL                   = ( DIGIT+ | ( '0x' ( HEXDIGIT )+ ) )
// FLOATVAL                 = ( DIGIT )+ DOT ( DIGIT )*
// See above


// -- Declaration parts
// DECLARATIONS             = ( CONSTDECL | VARDECL | ENUMDECL | STRUCTDECL ) SEMICOLON
/*void Declarations():
{}
{
    (ConstDecl() | VarDecl() | EnumDecl() | StructDecl()) ";"
}


// CONSTDECL                = const IDENTIFIER = CONSTVALUE
void ConstDecl():
{}
{
    ("const" <IDENTIFIER> "=" ConstValue())
}


// CONSTVALUE               = ( STRINGVAL | INTVAL | FLOATVAL | BOOLVAL )
void ConstValue():
{}
{
    (
    <STRING_LITERAL> |
    <INTEGER_LITERAL> |
    <FLOATING_POINT_LITERAL> |
    BooleanLiteral()
    )
}


// VARDECL                  = var ( CONFIGGROUP )? ( VARPARAMS )*
//                            VARTYPE VARIDENTIFIER ( COMMA VARIDENTIFIER )*
void VarDecl():
{}
{
    "var" ( ConfigGroup() )? ( VarParams() )*
    VarType() <IDENTIFIER> ( "," <IDENTIFIER> )*
}


// CONFIGGROUP              = LBRACK ( IDENTIFIER )? RBRACK
void ConfigGroup():
{}
{
    "(" (<IDENTIFIER>)? ")"
}


// VARTYPE                  = PACKAGEIDENTIFIER | ENUMDECL | STRUCTDECL | ARRAYDECL | CLASSTYPE | BASICTYPE
// VARIDENTIFIER            = IDENTIFIER
void VarType():
{}
{
    (
    PackageIdentifier() |
    EnumDecl() |
    StructDecl() |
    ArrayDecl() |
    ClassType() |
    BasicType()
    )
}


// ARRAYDECL                = IDENTIFIER LSBRACK INTVAL RSBRACK
void ArrayDecl():
{}
{
    <IDENTIFIER> "[" <INTEGER_LITERAL> "]"
}


// DYNARRAYDECL             = array LABRACK (PACKAGEIDENTIFIER | CLASSTYPE | BASICTYPE) RABRACK
void DynArrayDecl():
{}
{
    "array" "<" (PackageIdentifier() | ClassType() | BasicType()) ">"
}


// CLASSTYPE                = class LABRACK PACKAGEIDENTIFIER RABRACK
void ClassType():
{}
{
    "class" "<" PackageIdentifier() ">"
}


// ENUMDECL                 = enum IDENTIFIER LCBRACK ENUMOPTIONS RCBRACK
void EnumDecl():
{}
{
    "enum" <IDENTIFIER> "{" EnumOptions() "}"
}


// ENUMOPTIONS              = IDENTIFIER ( COMMA IDENTIFIER )*
void EnumOptions():
{}
{
    <IDENTIFIER> ( "," <IDENTIFIER> )*
}


// STRUCTDECL               = struct ( STRUCTPARAMS )* IDENTIFIER ( extends PACKAGEIDENTIFIER )?
//                            LCBRACK STRUCTBODY RCBRACK
void StructDecl():
{}
{
    "struct" (StructParams())* <IDENTIFIER> ("extends" PackageIdentifier())?
                           "{" StructBody() "}"
}


// STRUCTPARAMS             = ( native | export )
void StructParams():
{}
{
    ("native" | "export")
}


// STRUCTBODY               = ( VARDECL SEMICOLON )+
void StructBody():
{}
{
    (VarDecl() ";")+
}



// Replication parts
// REPLICATIONBLOCK         = replication LCBRACK ( REPLICATIONBODY )* RCBRACK
void ReplicationBlock():
{}
{
    "replication" "{" (ReplicationBody())* "}"
}


// REPLICATIONBODY          = ( reliable | unreliable ) if LBRACK EXPR RBRACK
//                            IDENTIFIER ( COMMA IDENTIFIER )* SEMICOLON
void ReplicationBody():
{}
{
    ("reliable" | "unreliable") "if" "(" Expression() ")"
                           <IDENTIFIER> ("," <IDENTIFIER>)* ";"
}

// Body parts
// BODY                     = ( STATEDECL | FUNCTIONDECL )*
void Body():
{}
{
    ( StateDecl() | FunctionDecl() )*
}

// State parts
// STATEDECL                = ( STATEPARAMS )* state IDENTIFIER ( CONFIGGROUP )? ( extends IDENTIFIER )? STATEBODY
void StateDecl():
{}
{
    (StateParams())* "state" <IDENTIFIER>
        (ConfigGroup())? ("extends" <IDENTIFIER>)? StateBody()
}


// STATEBODY                = LCBRACK ( STATEIGNORE )? ( FUNCTIONDECL )* STATELABELS RCBRACK
void StateBody():
{}
{
    "{" (StateIgnore())? (FunctionDecl())* StateLabels() "}"
}


// STATEIGNORE              = ignores IDENTIFIER ( COMMA IDENTIFIER )* SEMICOLON
void StateIgnore():
{}
{
    "ignores" <IDENTIFIER> ("," <IDENTIFIER>)* ";"
}


// STATELABELS              = ( IDENTIFIER COLON ( CODELINE )* )*
void StateLabels():
{}
{
    ( <IDENTIFIER> ":" (CodeLine())* )*
}



// Function  parts
// operators require an set amouth of arguments
// FUNCTIONDECL             = ( NORMALFUNC | OPERATORFUNC )
void FunctionDecl():
{}
{
    ( NormalFunc() | OperatorFunc() )
}

// NORMALFUNC               = ( FUNCTIONPARAMS )* FUNCTIONTYPE ( LOCALTYPE )?
//                            IDENTIFIER LBRACK ( FUNCTIONARGS ( COMMA FUNCTIONARGS )* )? RBRACK
//                            FUNCTIONBODY
void NormalFunc():
{}
{
    (FunctionParams())* FunctionType() ( LocalType() )?
        <IDENTIFIER> "(" ( FunctionArgs() ("," FunctionArgs())* )? ")"
        FunctionBody()
}

// FUNCTIONPARAMS           = CONSTFUNCPARAMS | native ( LBRACK INTVAL RBRACK )?
void FunctionParams():
{}
{
    ( ConstFuncParams() | ( "native" ("(" <INTEGER_LITERAL> ")")? ) )
}

// OPERATORFUNC             = ( FUNCTIONPARAMS )* OPERATORTYPE FUNCTIONBODY
void OperatorFunc():
{}
{
    (FunctionParams())* OperatorType() FunctionBody()
}

// OPERATORTYPE             = ( BINARYOPERATOR | UNARYOPERATOR )
void OperatorType():
{}
{
    ( BinaryOperator() | UnaryOperator() )
}

// requires two arguments
// BINARYOPERATOR           = operator LBRACK INTVAL RBRACK PACKAGEIDENTIFIER OPIDENTIFIER
//                            LBRACK FUNCTIONARGS COMMA FUNCTIONARGS RBRACK
void BinaryOperator():
{}
{
    "operator" "(" <INTEGER_LITERAL> ")" PackageIdentifier() OpIdentifier()
                           "(" FunctionArgs() "," FunctionArgs() ")"
}

// requires one argument
// UNARYOPERATOR            = ( preoperator | postoperator ) PACKAGEIDENTIFIER OPIDENTIFIER
//                            LBRACK FUNCTIONARGS RBRACK
void UnaryOperator():
{}
{
    ( "preOperator" | "postOperator" ) PackageIdentifier() OpIdentifier()
                           "(" FunctionArgs() ")"
}

// OPIDENTIFIER             = IDENTIFIER | OPERATORNAMES
void OpIdentifier():
{}
{
    <IDENTIFIER> | OperatorNames()
}

// FUNCTIONARGS             = ( optional | out | coerce )? FUNCTIONARGTYPE IDENTIFIER
void FunctionArgs():
{}
{
    ("optional" | "out" | "coerce")? FunctionArgType() <IDENTIFIER>
}

// FUNCTIONARGTYPE          = BASICTYPE | PACKAGEIDENTIFIER
void FunctionArgType():
{}
{
    BasicType() | PackageIdentifier()
}


// FUNCTIONBODY             = ( SEMICOLON | ( ( LOCALDECL )* ( CODELINE )* ) ( SEMICOLON )? )
void FunctionBody():
{}
{
    ( ";" | ( ((LocalDecl())* (CodeLine())*) (";")? ) )
}


// LOCALDECL                = local LOCALTYPE IDENTIFIER ( COMMA IDENTIFIER )*
void LocalDecl():
{}
{
    "local" LocalType() <IDENTIFIER> ( "," <IDENTIFIER> )*
}


// LOCALTYPE                = PACKAGEIDENTIFIER | ARRAYDECL | CLASSTYPE | BASICTYPE
void LocalType():
{}
{
    (PackageIdentifier() | ArrayDecl() | ClassType() | BasicType())
}

// Code parts
// CODELINE                 = ( STATEMENT | ASSIGNMENT | IFTHENELSE | WHILELOOP | DOLOOP
//                            | SWITCHCASE | RETURNFUNC | FOREACHLOOP | FORLOOP )
void CodeLine():
{}
{
    //( STATEMENT | ASSIGNMENT | IFTHENELSE | WHILELOOP | DOLOOP
    //   | SWITCHCASE | RETURNFUNC | FOREACHLOOP | FORLOOP )
    try {
      LOOKAHEAD(2)
        LabeledStatement() |
        Block() |
        EmptyStatement() |
        StatementExpression() ";" |
        SwitchStatement() |
        IfStatement() |
        WhileStatement() |
        DoStatement() |
        ForStatement() |
        ForEachStatement() |
        BreakStatement() |
        ContinueStatement() |
        ReturnStatement()
    }
    catch (ParseException ex) {
        recover(ex, SEMICOLON);
    }
}

// CODEBLOCK                = ( CODELINE | ( LCBRACK ( CODELINE )* RCBRACK ) )
void CodeBlock():
{}
{
    ( CodeLine() | ( "{" ( CodeLine() )* "}" ) )
}


// STATEMENT                = FUNCCALL SEMICOLON
void Statement():
{}
{
    FuncCall() ";"
}


// ASSIGNMENT               = IDENTIFIER EQUALS EXPR SEMICOLON
void Assignment():
{}
{
    <IDENTIFIER> "=" Expression() ";"
}


// IFTHENELSE               = if LBRACK EXPR RBRACK CODEBLOCK ( else CODEBLOCK )?'
// The disambiguating algorithm of JavaCC automatically binds dangling
// else's to the innermost if statement.  The LOOKAHEAD specification
// is to tell JavaCC that we know what we are doing.
void IfStatement():
{}
{
    "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

// WHILELOOP                = while LBRACK EXPR RBRACK CODEBLOCK
void WhileStatement():
{}
{
    "while" "(" Expression() ")" Statement()
}

// DOLOOP                   = do CODEBLOCK until LBRACK EXPR RBRACK
void DoStatement():
{}
{
    "do" Statement() "until" "(" Expression() ")" ";"
}

// SWITCHCASE               = switch LBRACK EXPR RBRACK LCBRACK ( CASERULE )+ ( DEFAULTRULE )? RCBRACK
void SwitchStatement():
{}
{
    "switch" "(" Expression() ")" "{"
        (SwitchLabel() (BlockStatement())*)*
    "}"
}

// CASERULE                 = case INTVAL COLON CODEBLOCK
void SwitchLabel():
{}
{
    ("case" <INTEGER_LITERAL> ":") | ("default" ":")
}


// DEFAULTRULE              = default CODEBLOCK


// RETURNFUNC               = return ( EXPR )? SEMICOLON

void ReturnStatement():
{}
{
  "return" [ Expression() ] ";"
}


// FOREACHLOOP              = foreach FUNCCALL CODEBLOCK
void ForEachStatement():
{}
{
    // foreach FUNCCALL CODEBLOCK
    "ForEach" [ Expression() ] Statement()
}


// FORLOOP                  = for LBRACK ASSIGNMENT SEMICOLON EXPR SEMICOLON EXPR RBRACK CODEBLOCK
void ForStatement():
{}
{
    "for" "("
        [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ]
    ")" Statement()
}

void ForInit():
{}
{
    StatementExpressionList()
}

void StatementExpressionList():
{}
{
    StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate():
{}
{
    StatementExpressionList()
}


// EXPR                     = OPERAND ( OPIDENTIFIER OPERAND )*
// This expansion has been written this way instead of:
//   Assignment() | ConditionalExpression()
// for performance reasons.
// However, it is a weakening of the grammar for it allows the LHS of
// assignments to be any conditional expression whereas it can only be
// a primary expression.  Consider adding a semantic predicate to work
// around this.
void Expression():
{}
{
  ConditionalExpression()
  [
    LOOKAHEAD(2)
    AssignmentOperator() Expression()
  ]
}

// OPERAND                  = ( CONSTVALUE | QUALIFIEDIDENTIFIER | FUNCCALL )

// FUNCCALL                 = ( ( class SQUOTE PACKAGEIDENTIFIER SQUOTE DOT static DOT )
//                            | ( ( IDENTIFIER DOT )+ )
//                            )?
//                            IDENTIFIER LBRACK ( EXPR ( COMMA EXPR )* )? RBRACK
void FuncCall():
{}
{
    ( ( "class" "'" PackageIdentifier() "'" "." "static" "." )
                           | ( ( <IDENTIFIER> "." )+ )
                           )?
                           <IDENTIFIER> "(" ( Expression() ( "," Expression() )* )? ")"
}

void LabeledStatement():
{}
{
  <IDENTIFIER> ":" Statement()
}

void Block():
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement():
{}
{
  LOOKAHEAD( BasicType() <IDENTIFIER> )
  VarDecl() ";"
|
  Statement()
}

void EmptyStatement():
{}
{
  ";"
}

// The last expansion of this production accepts more than the legal
// Java expansions for StatementExpression.  This expansion does not
// use PostfixExpression for performance reasons.
void StatementExpression():
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression()
  ]
}

void BreakStatement():
{}
{
    "break" ";"
}

void ContinueStatement():
{}
{
    "continue"  ";"
}*/


// -- Defaultproperties
// DEFAULTPROPERTIESBLOCK   = defaultproperties LCBRACK ( DEFPROP )* RCBRACK
  final public void DefaultPropertiesBlock() throws ParseException {
    jj_consume_token(_DEFAULTPROPERTIES);
    jj_consume_token(LBRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      DefProp();
    }
    jj_consume_token(RBRACE);
  }

// DEFPROP                  = DEFPROPIDENTIFIER EQUALS PRINTABLE
  final public void DefProp() throws ParseException {
    DefPropIdentifier();
    jj_consume_token(ASSIGN);
    jj_consume_token(IDENTIFIER);
  }

// DEFPROPIDENTIFIER        = IDENTIFIER ( ( LBRACK INTVAL RBRACK ) | ( LSBRACK INTVAL RSBRACK ) )?
  final public void DefPropIdentifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACKET:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(RPAREN);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

/*
 * Terminals
 */
/*
PRINTABLE                = all printable characters
ALPHA                    = 'a' .. 'z'
DIGIT                    = '0' .. '9'
HEXDIGIT                 = DIGIT | 'a' .. 'f'
SEMICOLON                = ';'
COLON                    = ':'
UNDERSCORE               = '_'
LBRACK                   = '('
RBRACK                   = ')'
LABRACK                  = '<'
RABRACK                  = '>'
LCBRACK                  = '{'
RCBRACK                  = '}'
LSBRACK                  = '['
RSBRACK                  = ']'
DOT                      = '.'
COMMA                    = ','
SQUOTE                   = '''
DQUOTE                   = '"'
EQUALS                   = '='
*/
/*
See above
*/

// CONSTCLASSPARAMS         = abstract | native | nativereplication | safereplace |
//                            perobjectconfig | transient | noexport | exportstructs |
//                            // available but obsolete:
//                            guid(INTVAL,INTVAL,INTVAL,INTVAL)
//                            // available from warfare and up:
//                            collapsecategories | dontcollapsecategories | placeable |
//                            notplaceable | editinlinenew | noteditinlinenew
  final public void ConstClassParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATIVE:
      jj_consume_token(NATIVE);
      break;
    case NATIVEREPLICATION:
      jj_consume_token(NATIVEREPLICATION);
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
      break;
    case GUID:
      jj_consume_token(GUID);
      jj_consume_token(LPAREN);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);
      jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(RPAREN);
      break;
    case TRANSIENT:
      jj_consume_token(TRANSIENT);
      break;
    case PLACEABLE:
      jj_consume_token(PLACEABLE);
      break;
    case NOTPLACEABLE:
      jj_consume_token(NOTPLACEABLE);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public UnrealScriptParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x8008000,0x0,0x8008000,0x0,0x0,0x0,0x0,0x0,0x8000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x40000,0x18000004,0x0,0x18000004,0x0,0x0,0x0,0x0,0x0,0x8000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x40104300,0x0,0x40104300,0x0,0x0,0x0,0x0,0x0,0x104300,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x4080,0x10000000,0x4080,0x0,0x0,0x2000000,0x10000000,0x10000000,0x80,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x10,0x8,0x0,0x1,0x1,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public UnrealScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public UnrealScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new UnrealScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public UnrealScriptParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new UnrealScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public UnrealScriptParser(UnrealScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(UnrealScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[175];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 175; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
