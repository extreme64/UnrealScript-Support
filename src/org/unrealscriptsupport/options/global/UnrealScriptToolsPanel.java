/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.unrealscriptsupport.options.global;

import javax.swing.ListModel;
import org.openide.util.NbPreferences;

public final class UnrealScriptToolsPanel extends javax.swing.JPanel {

    private final UnrealScriptToolsOptionsPanelController controller;

    UnrealScriptToolsPanel(UnrealScriptToolsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        collectionList = new javax.swing.JList();
        addButton = new javax.swing.JButton();
        duplicateButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        defaultButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        collectionNameTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        compilerBasedirTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        compilerPathTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        compilerArgsTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        resultdirTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        executablePathTextField = new javax.swing.JTextField();

        collectionList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        collectionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        collectionList.setName("null"); // NOI18N
        collectionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                collectionListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(collectionList);

        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.addButton.text")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(duplicateButton, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.duplicateButton.text")); // NOI18N
        duplicateButton.setEnabled(false);
        duplicateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeButton, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.removeButton.text")); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(defaultButton, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.defaultButton.text")); // NOI18N
        defaultButton.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(defaultButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(duplicateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(duplicateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(defaultButton))
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.jLabel2.text")); // NOI18N

        collectionNameTextField.setText(org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.collectionNameTextField.text")); // NOI18N
        collectionNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                collectionNameTextFieldKeyTyped(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.jPanel3.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.jLabel3.text")); // NOI18N

        compilerBasedirTextField.setText(org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.compilerBasedirTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.jLabel4.text")); // NOI18N

        compilerPathTextField.setText(org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.compilerPathTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.jLabel5.text")); // NOI18N

        compilerArgsTextField.setText(org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.compilerArgsTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.jLabel6.text")); // NOI18N

        resultdirTextField.setText(org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.resultdirTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.jLabel7.text")); // NOI18N

        executablePathTextField.setText(org.openide.util.NbBundle.getMessage(UnrealScriptToolsPanel.class, "UnrealScriptToolsPanel.executablePathTextField.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(executablePathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                    .addComponent(compilerBasedirTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                    .addComponent(resultdirTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                    .addComponent(compilerPathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                    .addComponent(compilerArgsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(compilerBasedirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(compilerPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(compilerArgsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(resultdirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(executablePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(collectionNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(collectionNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void collectionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_collectionListValueChanged

        // Get selected value in list box
        if (!collectionList.isSelectionEmpty()) {
            select(collectionList.getSelectedValue().toString());
        }
        else {
            deselect();
        }

        return;
    }//GEN-LAST:event_collectionListValueChanged

    private void collectionNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_collectionNameTextFieldKeyTyped

        // Update value in list box
        if (!collectionList.isSelectionEmpty()) {

            ListModel model = collectionList.getModel();
            Object[] newModel = new Object [model.getSize()];
            
            for (int i = 0; i < model.getSize(); ++i) {
                newModel[i] = model.getElementAt(i);
            }

            int selectedIndex = collectionList.getSelectedIndex();
            newModel[selectedIndex] = collectionNameTextField.getText();

            collectionList.setListData(newModel);
            collectionList.setSelectedIndex(selectedIndex);
        }

        return;
    }//GEN-LAST:event_collectionNameTextFieldKeyTyped

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        final String NAME = "new item ";
        addItem(NAME);

        return;
    }//GEN-LAST:event_addButtonActionPerformed

    private void addItem(String name) {

        // -- Add an item to the list
        ListModel model = collectionList.getModel();

        Object[] newModel = new Object [model.getSize() + 1];

        // - Check name is not duplicated
        int duplicated = 1;
        String newName = name + duplicated;

        for (int i = 0; i < model.getSize(); ++i) {
            String value = (String) model.getElementAt(i);
            newModel[i] = value;

            if (newName.equalsIgnoreCase(value)) {
                ++duplicated;
                newName = name + duplicated;
            }
        }

        // - Add to end
        newModel[model.getSize()] = newName;

        // - Add to list
        int selectedIndex = collectionList.getSelectedIndex();
        collectionList.setListData(newModel);
        collectionList.setSelectedIndex(selectedIndex);

        return;
    }

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed

        // Update value in list box
        if (!collectionList.isSelectionEmpty()) {

            ListModel model = collectionList.getModel();
            Object[] newModel = new Object [model.getSize() - 1];

            for (int i = 0; i < model.getSize(); ++i) {
                if (!collectionList.isSelectedIndex(i)) {
                    assert(i < (model.getSize() - 1));
                    newModel[i] = model.getElementAt(i);
                }
            }

            int selectedIndex = collectionList.getSelectedIndex();
            collectionList.setListData(newModel);

            --selectedIndex;
            if (selectedIndex > 0) {
                collectionList.setSelectedIndex(selectedIndex);
            }
            else {
                collectionList.clearSelection();
            }
        }

        return;
    }//GEN-LAST:event_removeButtonActionPerformed

    private void duplicateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateButtonActionPerformed

        // Duplicate value in list box
        if (!collectionList.isSelectionEmpty()) {
            String selection = (String) collectionList.getSelectedValue();
            addItem(selection + " ");
        }

        return;
    }//GEN-LAST:event_duplicateButtonActionPerformed

    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(UnrealScriptToolsPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(UnrealScriptToolsPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());

        // Load collections into list box
        String[] collectionNames = new String[1];
        collectionNames[0] =
                NbPreferences.forModule(UnrealScriptToolsPanel.class)
                .get("collection", "");

        collectionList.setListData(collectionNames);
        collectionList.clearSelection();

        deselect();

        return;
    }
    
    private void select(String value) {

        // List buttons
        removeButton.setEnabled(true);
        duplicateButton.setEnabled(true);
        defaultButton.setEnabled(false);
        
        // Load preferences
        collectionNameTextField.setText(value);
        collectionNameTextField.setEnabled(true);

        compilerBasedirTextField.setText(
                NbPreferences.forModule(UnrealScriptToolsPanel.class)
                .get("compiler.basedir", ""));
        compilerBasedirTextField.setEnabled(true);

        compilerPathTextField.setText(
                NbPreferences.forModule(UnrealScriptToolsPanel.class)
                .get("compiler.filename", ""));
        compilerPathTextField.setEnabled(true);

        compilerArgsTextField.setText(
                NbPreferences.forModule(UnrealScriptToolsPanel.class)
                .get("compiler.args", ""));
        compilerArgsTextField.setEnabled(true);

        resultdirTextField.setText(
                NbPreferences.forModule(UnrealScriptToolsPanel.class)
                .get("compiler.resultdir", ""));
        resultdirTextField.setEnabled(true);

        executablePathTextField.setText(
                NbPreferences.forModule(UnrealScriptToolsPanel.class)
                .get("executable.filename", ""));
        executablePathTextField.setEnabled(true);
            
        return;
    }

    private void deselect() {

        // List buttons
        removeButton.setEnabled(false);
        duplicateButton.setEnabled(false);
        defaultButton.setEnabled(false);

        // Leave as blank, nothing selected
        collectionNameTextField.setText("");
        collectionNameTextField.setEnabled(false);

        compilerBasedirTextField.setText("");
        compilerBasedirTextField.setEnabled(false);

        compilerPathTextField.setText("");
        compilerPathTextField.setEnabled(false);

        compilerArgsTextField.setText("");
        compilerArgsTextField.setEnabled(false);

        resultdirTextField.setText("");
        resultdirTextField.setEnabled(false);

        executablePathTextField.setText("");
        executablePathTextField.setEnabled(false);

        return;
    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(UnrealScriptToolsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(UnrealScriptToolsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
        
        ListModel tools = collectionList.getModel();

        int i = 0;
        //for (int i = 0; i < tools.getSize(); ++i) {

            if (i < tools.getSize()) {
            Object o = tools.getElementAt(i);

            NbPreferences.forModule(UnrealScriptToolsPanel.class)
                    .put("collection", o.toString());
            }

            NbPreferences.forModule(UnrealScriptToolsPanel.class)
                    .put("compiler.basedir", compilerBasedirTextField.getText());

            NbPreferences.forModule(UnrealScriptToolsPanel.class)
                    .put("compiler.filename", compilerPathTextField.getText());

            NbPreferences.forModule(UnrealScriptToolsPanel.class)
                    .put("compiler.args", compilerArgsTextField.getText());

            NbPreferences.forModule(UnrealScriptToolsPanel.class)
                    .put("compiler.resultdir", resultdirTextField.getText());

            NbPreferences.forModule(UnrealScriptToolsPanel.class)
                    .put("executable.filename", executablePathTextField.getText());
        //}

        return;
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JList collectionList;
    private javax.swing.JTextField collectionNameTextField;
    private javax.swing.JTextField compilerArgsTextField;
    private javax.swing.JTextField compilerBasedirTextField;
    private javax.swing.JTextField compilerPathTextField;
    private javax.swing.JButton defaultButton;
    private javax.swing.JButton duplicateButton;
    private javax.swing.JTextField executablePathTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField resultdirTextField;
    // End of variables declaration//GEN-END:variables
}
