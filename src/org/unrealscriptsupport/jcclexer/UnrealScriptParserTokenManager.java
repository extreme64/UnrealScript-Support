/* Generated By:JavaCC: Do not edit this line. UnrealScriptParserTokenManager.java */
package org.unrealscriptsupport.jcclexer;

/** Token Manager. */
public class UnrealScriptParserTokenManager implements UnrealScriptParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 19);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 18)
                     kind = 18;
                  break;
               case 1:
                  jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xdfffffffffffffffL & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  if (curChar == 123)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 125)
                     kind = 18;
                  break;
               case 3:
                  if ((0xdfffffffffffffffL & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 18)
                     kind = 18;
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x100000000L) != 0L)
            return 24;
         if ((active2 & 0x10000000000000L) != 0L || (active3 & 0x1L) != 0L)
            return 48;
         if ((active0 & 0x7ff0000000L) != 0L)
         {
            jjmatchedKind = 149;
            return 18;
         }
         if ((active0 & 0xffffff800ff00000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xfffL) != 0L)
         {
            jjmatchedKind = 149;
            return 30;
         }
         return -1;
      case 1:
         if ((active0 & 0xffff1ffffff00000L) != 0L || (active1 & 0xffffffffffffdfffL) != 0L || (active2 & 0xfffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 1;
            }
            return 30;
         }
         if ((active0 & 0xe00000000000L) != 0L || (active1 & 0x2000L) != 0L)
            return 30;
         return -1;
      case 2:
         if ((active0 & 0xfbff5ffffff00000L) != 0L || (active1 & 0xffffff7ff7f3dfcfL) != 0L || (active2 & 0xf7fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 2;
            }
            return 30;
         }
         if ((active0 & 0x400800000000000L) != 0L || (active1 & 0x80080c0030L) != 0L || (active2 & 0x80L) != 0L)
            return 30;
         return -1;
      case 3:
         if ((active0 & 0x2a0000004a800000L) != 0L || (active1 & 0x400000101008600L) != 0L || (active2 & 0x210L) != 0L)
            return 30;
         if ((active0 & 0xd1ff5fffb5700000L) != 0L || (active1 & 0xfbffff7ef6fb59efL) != 0L || (active2 & 0xd6fL) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 3;
            return 30;
         }
         return -1;
      case 4:
         if ((active0 & 0xc1ff5faf00300000L) != 0L || (active1 & 0xf3ffff7ef63a59e1L) != 0L || (active2 & 0x52eL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 4;
            }
            return 30;
         }
         if ((active0 & 0x10000050b5400000L) != 0L || (active1 & 0x800000000c1000eL) != 0L || (active2 & 0x841L) != 0L)
            return 30;
         return -1;
      case 5:
         if ((active0 & 0x1ff5fa520300000L) != 0L || (active1 & 0x3deff6ef0925861L) != 0L || (active2 & 0x124L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 5;
            }
            return 30;
         }
         if ((active0 & 0xc000000a00000000L) != 0L || (active1 & 0xf021001006280180L) != 0L || (active2 & 0x40aL) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x81ff5ca520300000L) != 0L || (active1 & 0x83deb66ee4921940L) != 0L || (active2 & 0x24L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 6;
            }
            return 30;
         }
         if ((active0 & 0x30000000000L) != 0L || (active1 & 0x490010004021L) != 0L || (active2 & 0x100L) != 0L)
            return 30;
         return -1;
      case 7:
         if ((active0 & 0x81ff5a8520200000L) != 0L || (active1 & 0x81ccb60e24821900L) != 0L || (active2 & 0x24L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 7;
            return 30;
         }
         if ((active0 & 0x42000100000L) != 0L || (active1 & 0x2120060c0100040L) != 0L)
            return 30;
         return -1;
      case 8:
         if ((active0 & 0x81f3528520200000L) != 0L || (active1 & 0x80c4320e24001900L) != 0L || (active2 & 0x20L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 8;
            }
            return 30;
         }
         if ((active0 & 0xc080000000000L) != 0L || (active1 & 0x108840000820000L) != 0L || (active2 & 0x4L) != 0L)
            return 30;
         return -1;
      case 9:
         if ((active0 & 0x8019428520200000L) != 0L || (active1 & 0x80c4320e24001900L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 9;
            }
            return 30;
         }
         if ((active0 & 0x1e2100000000000L) != 0L || (active2 & 0x20L) != 0L)
            return 30;
         return -1;
      case 10:
         if ((active0 & 0x80d9420500200000L) != 0L || (active1 & 0x8080120e24001900L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 10;
            return 30;
         }
         if ((active0 & 0x8020000000L) != 0L || (active1 & 0x44200000000000L) != 0L)
            return 30;
         return -1;
      case 11:
         if ((active0 & 0x80d9420500200000L) != 0L || (active1 & 0x8080020624000800L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 11;
            return 30;
         }
         if ((active1 & 0x100800001100L) != 0L)
            return 30;
         return -1;
      case 12:
         if ((active0 & 0x9420400000000L) != 0L || (active1 & 0x8080020224000800L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 12;
            return 30;
         }
         if ((active0 & 0x80d0000100200000L) != 0L || (active1 & 0x400000000L) != 0L)
            return 30;
         return -1;
      case 13:
         if ((active0 & 0x1420400000000L) != 0L || (active1 & 0x8000020224000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 13;
            return 30;
         }
         if ((active0 & 0x8000000000000L) != 0L || (active1 & 0x80000000000800L) != 0L)
            return 30;
         return -1;
      case 14:
         if ((active0 & 0x1420400000000L) != 0L || (active1 & 0x8000000224000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 14;
            return 30;
         }
         if ((active1 & 0x20000000000L) != 0L)
            return 30;
         return -1;
      case 15:
         if ((active0 & 0x1420400000000L) != 0L || (active1 & 0x8000000004000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 15;
            return 30;
         }
         if ((active1 & 0x220000000L) != 0L)
            return 30;
         return -1;
      case 16:
         if ((active0 & 0x1400400000000L) != 0L || (active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 16;
            return 30;
         }
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x4000000L) != 0L)
            return 30;
         return -1;
      case 17:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 17;
            return 30;
         }
         if ((active0 & 0x1000400000000L) != 0L)
            return 30;
         return -1;
      case 18:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 18;
            return 30;
         }
         return -1;
      case 19:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 19;
            return 30;
         }
         return -1;
      case 20:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 20;
            return 30;
         }
         return -1;
      case 21:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 21;
            return 30;
         }
         if ((active0 & 0x400000000000L) != 0L)
            return 30;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 165;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 11);
      case 36:
         jjmatchedKind = 163;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 184;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10L);
      case 38:
         jjmatchedKind = 181;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000000L, 0x2L);
      case 39:
         return jjStopAtPos(0, 14);
      case 40:
         return jjStopAtPos(0, 152);
      case 41:
         return jjStopAtPos(0, 153);
      case 42:
         jjmatchedKind = 179;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8400000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 177;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000800000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 159);
      case 45:
         jjmatchedKind = 178;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4001000000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 160, 24);
      case 47:
         jjmatchedKind = 180;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1L);
      case 58:
         return jjStopAtPos(0, 168);
      case 59:
         return jjStopAtPos(0, 158);
      case 60:
         jjmatchedKind = 164;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200040000000000L, 0x20L);
      case 61:
         jjmatchedKind = 161;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000L, 0x0L);
      case 62:
         jjmatchedKind = 202;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000000L, 0x3c0L);
      case 63:
         return jjStopAtPos(0, 167);
      case 64:
         jjmatchedKind = 162;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 156);
      case 93:
         return jjStopAtPos(0, 157);
      case 94:
         jjmatchedKind = 183;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xf00000L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xf000000L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7ff0000000L, 0x0L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1ff8000000000L, 0x0L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xfffe000000000000L, 0x1L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7eL, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x780L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fe000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfff000000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf000000000L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ff0000000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e000000000000L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffc0000000000000L, 0x3L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1cL, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x60L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x380L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc00L, 0x0L);
      case 123:
         return jjStopAtPos(0, 154);
      case 124:
         jjmatchedKind = 182;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000000L, 0x4L);
      case 125:
         return jjStopAtPos(0, 155);
      case 126:
         return jjStopAtPos(0, 166);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 42:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 186);
         break;
      case 43:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 175);
         break;
      case 45:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 176);
         break;
      case 60:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L);
      case 61:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 169);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 170);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 171);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 172);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 187);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 188);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 189);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 190);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 191);
         else if ((active3 & 0x1L) != 0L)
            return jjStopAtPos(1, 192);
         else if ((active3 & 0x2L) != 0L)
            return jjStopAtPos(1, 193);
         else if ((active3 & 0x4L) != 0L)
            return jjStopAtPos(1, 194);
         else if ((active3 & 0x8L) != 0L)
            return jjStopAtPos(1, 195);
         else if ((active3 & 0x10L) != 0L)
            return jjStopAtPos(1, 196);
         break;
      case 62:
         if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1c0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8070000000L, active1, 0x40010007200002L, active2, 0x80L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1fe000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f0001000000L, active1, 0x3e020008000000L, active2, 0L, active3, 0L);
      case 70:
      case 102:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 77, 30);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000000L, active2, 0x800L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300000000001804L, active2, 0x500L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000180200000L, active1, 0x40000000188L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0xf8000L, active2, 0x60L, active3, 0L);
      case 79:
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc03e02000000L, active1, 0x180ff0c00230L, active2, 0x200L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4004400000L, active1, 0xe00000000000L, active2, 0x1cL, active3, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xf800000000100000L, active2, 0L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000800000L, active1, 0x1008000000440L, active2, 0x1L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000000000000000L, active1, 0x1L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L, active2, 0L, active3, 0L);
      case 124:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 173);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active3 & 0x20L) != 0L)
            return jjStopAtPos(2, 197);
         else if ((active3 & 0x40L) != 0L)
            return jjStopAtPos(2, 198);
         break;
      case 62:
         if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0x1800040000000000L, active2, 0xcL, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000L, active1, 0x10010c00000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1800L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000204000000L, active1, 0x202040100000L, active2, 0L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2030000000000L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1fc000000000000L, active1, 0x400480080008400L, active2, 0xa02L, active3, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40400200000L, active1, 0x2000000000002L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000001000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x403800000000L, active1, 0x200000300004044L, active2, 0L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4102000000L, active1, 0x80800000000188L, active2, 0L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xc001180000000000L, active1, 0x1c000000010000L, active2, 0x1L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 135, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0xe000020000000020L, active2, 0x120L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000040100000L, active1, 0x100000020000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 30);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x8008800000L, active1, 0x20004c26280201L, active2, 0x440L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L, active2, 0x10L, active3, 0L);
      case 87:
      case 119:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active3 & 0x80L) != 0L)
            return jjStopAtPos(3, 199);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x38004400000L, active1, 0xc0000cL, active2, 0L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x180L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x40000000040L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 30);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 137, 30);
         break;
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 30);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 30);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 30);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 30);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 30);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 132, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000000L, active1, 0x40001020281821L, active2, 0x21L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x400000000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000000L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000L, active1, 0L, active2, 0x400L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000001000000L, active1, 0x2002004006000000L, active2, 0x40L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000400000000L, active1, 0x5000010000000L, active2, 0x800L, active3, 0L);
      case 77:
      case 109:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x8080000000000L, active2, 0x4L, active3, 0L);
      case 79:
      case 111:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 30);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000200000L, active1, 0x220000004000L, active2, 0L, active3, 0L);
      case 80:
      case 112:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100200000000L, active1, 0x10002000100000L, active2, 0L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x5080000000L, active1, 0x2L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x1fc402000100000L, active1, 0x1800900200020000L, active2, 0x102L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc120000000010000L, active2, 0L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000L, active2, 0x8L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x24120001201a0L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x20000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xc400200000000L, active1, 0xc080001000000800L, active2, 0x2L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20001000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 30);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 30);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 139, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x100020000000L, active1, 0x10840010000000L, active2, 0x8L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xe1002800000000L, active1, 0x1005000000000000L, active2, 0x400L);
      case 75:
      case 107:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 30);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 134, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000800800000L, active2, 0x20L);
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x2080000000000L, active1, 0x2000000000200001L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0x8104400000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000c0000000L, active2, 0L);
      case 82:
      case 114:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000100000L, active1, 0x60000200084000L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 30);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 30);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 30);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 30);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000040L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000000L, active1, 0x200000000000000L, active2, 0x100L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6000000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000300000L, active1, 0x180040a10000800L, active2, 0x100L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 67:
      case 99:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 30);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x1100000000000L, active1, 0x4800000000020L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2080000000000L, active1, 0x1L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 30);
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0x40280004004000L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 30);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 125, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 129, 30);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10008000000000L, active1, 0x20800040L, active2, 0x24L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 131, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000000L, active1, 0x200000000000100L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 30);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 138, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0xe0002000000000L, active1, 0x4000020000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0xc400000000000L, active1, 0xc0000000L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0x100000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0x400001000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 30);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 30);
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x8018402000100000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x3100000000000L, active1, 0x204004000000000L, active2, 0x20L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0x40000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0xc00020100L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 30);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 30);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x120000000000L, active2, 0x4L);
      case 72:
      case 104:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 30);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x8000000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 136, 30);
         return jjMoveStringLiteralDfa7_0(active0, 0xe0400000000000L, active1, 0x2000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0xc008000000000L, active1, 0x200000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x2000101040L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 92, 30);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 30);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x102000c4000000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 30);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 30);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000080400000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x60000000000L, active1, 0x180800020000800L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000020000000L, active1, 0L, active2, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0L, active2, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 30);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 30);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 30);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000420000000L, active1, 0x8180800804820800L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0xe0000000000000L, active1, 0x20000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 102, 30);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0x40040000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 30);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L, active2, 0x4L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0x400000100L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0x1000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 30);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 101, 30);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 121, 30);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0xc000100200000L, active1, 0x200000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 30);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 30);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 95, 30);
         return jjMoveStringLiteralDfa8_0(active0, 0x8001100000000000L, active1, 0x4000000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 116, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0x40100a00000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 81, 30);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 87, 30);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 30);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 120, 30);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0x1000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 106, 30);
         return jjMoveStringLiteralDfa9_0(active0, 0x1100100000000L, active1, 0L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000800L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0x4000000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x102000000000000L, active1, 0L, active2, 0x20L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 30);
         return jjMoveStringLiteralDfa9_0(active0, 0xe0000000000000L, active1, 0x420000100L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000020000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 130, 30);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000200000L, active1, 0x220000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 115, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000400000000L, active1, 0x8000000000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40020200000000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 44, 30);
         break;
      case 69:
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 49, 30);
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 133, 30);
         return jjMoveStringLiteralDfa10_0(active0, 0xc0000000000000L, active1, 0L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0x100L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x24000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L, active1, 0x84200000001800L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x400020000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0x400000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L, active1, 0x100000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 56, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 118, 30);
         break;
      case 71:
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 30);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0x24000100L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000L);
      case 78:
      case 110:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 114, 30);
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x120400000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 109, 30);
         return jjMoveStringLiteralDfa11_0(active0, 0x9000100000000L, active1, 0x80000000000800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 29, 30);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L, active1, 0x200000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0x8000000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L, active1, 0x4000000L);
      case 69:
      case 101:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 99, 30);
         return jjMoveStringLiteralDfa12_0(active0, 0x40420400000000L, active1, 0L);
      case 71:
      case 103:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 72, 30);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000200000800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000000400000000L);
      case 78:
      case 110:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 76, 30);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20020000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 108, 30);
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active1, 0x4000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 52, 30);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 55, 30);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(12, 98, 30);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000020000800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(12, 32, 30);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 63, 30);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(12, 21, 30);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000000000000L);
      case 87:
      case 119:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 54, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x220000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000000000000000L);
      case 83:
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(13, 75, 30);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 119, 30);
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L, active1, 0x4000000L);
      case 89:
      case 121:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 51, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000000L);
      case 71:
      case 103:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 105, 30);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x1020000000000L, active1, 0x4000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L, active1, 0x8000000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x1420000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000L, active1, 0L);
      case 76:
      case 108:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(15, 97, 30);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8000000004000000L);
      case 87:
      case 119:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(15, 93, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(16, 90, 30);
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8000000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 41, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8000000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(17, 34, 30);
         break;
      case 84:
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 48, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000000L, active1, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x8000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1, 0L, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x8000000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 46, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1, 0L, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(20, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, 0L, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 127, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec30 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec31 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec37 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec38 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec39 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec40 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec41 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec43 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec44 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec45 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec46 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec47 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec48 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec49 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec50 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec51 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec52 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec53 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec54 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec55 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec56 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec57 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec58 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec59 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec60 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec61 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 75;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffeffffc9ffL & l) != 0L)
                  {
                     if (kind > 203)
                        kind = 203;
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(2, 8);
                  else if (curChar == 47)
                     jjAddStates(9, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(24);
                  else if (curChar == 35)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAddStates(12, 14);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddTwoStates(21, 22);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(15, 19);
                  }
                  break;
               case 48:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if (curChar == 47)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddStates(20, 22);
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 18:
               case 30:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(30);
                  break;
               case 1:
                  if (curChar != 35)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(12, 14);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(12, 14);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 4:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjAddStates(23, 25);
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 9:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((0x100003600L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 20:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if (curChar == 46)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAddStates(28, 30);
                  break;
               case 26:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 31:
                  if ((0xfffffffeffffc9ffL & l) != 0L && kind > 203)
                     kind = 203;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(2, 8);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 28);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAddTwoStates(40, 28);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar != 46)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAddStates(34, 36);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAddStates(34, 36);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAddTwoStates(46, 28);
                  break;
               case 47:
                  if (curChar == 47)
                     jjAddStates(9, 11);
                  break;
               case 49:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(20, 22);
                  break;
               case 50:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 51:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 52:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0xfffffbffffffffffL & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 55:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 57:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 58:
                  if (curChar != 48)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(15, 19);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(60, 22);
                  break;
               case 61:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(61, 22);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 64:
                  if (curChar == 46)
                     jjCheckNAdd(65);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAddTwoStates(68, 28);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 71:
                  if (curChar == 46)
                     jjCheckNAdd(72);
                  break;
               case 73:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAddTwoStates(74, 28);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 203)
                     kind = 203;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 96)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAddStates(23, 25);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAdd(30);
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 2:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(12, 14);
                  break;
               case 6:
                  if (curChar != 96)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(23, 25);
                  break;
               case 7:
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(23, 25);
                  break;
               case 11:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 13:
                  if (curChar == 123 && kind > 17)
                     kind = 17;
                  break;
               case 14:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 22:
                  if ((0x100000001000L & l) != 0L && kind > 140)
                     kind = 140;
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 28:
                  if ((0x5000000050L & l) != 0L && kind > 144)
                     kind = 144;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (kind > 203)
                     kind = 203;
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 49:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(20, 22);
                  break;
               case 54:
                  if (kind > 5)
                     kind = 5;
                  break;
               case 56:
                  if (kind > 8)
                     kind = 8;
                  break;
               case 59:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(60, 22);
                  break;
               case 62:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 65:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 66:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 69:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 72:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAdd(30);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 203)
                        kind = 203;
                  }
                  break;
               case 18:
               case 30:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(30);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(12, 14);
                  break;
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjAddStates(23, 25);
                  break;
               case 29:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 203)
                     kind = 203;
                  break;
               case 49:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(20, 22);
                  break;
               case 54:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 5)
                     kind = 5;
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 75 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 13);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 0:
                  if (curChar == 34)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (kind > 12)
                     kind = 12;
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 16);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 15)
                     kind = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 33, 34, 28, 37, 38, 41, 42, 48, 53, 57, 2, 3, 5, 59, 
   61, 22, 62, 69, 49, 50, 52, 7, 8, 10, 12, 13, 24, 25, 28, 33, 
   34, 28, 43, 44, 28, 63, 64, 70, 71, 72, 26, 27, 35, 36, 39, 40, 
   45, 46, 65, 66, 67, 68, 73, 74, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec39[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec61[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\75", "\100", "\44", 
"\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\52\52", "\100\75", "\44\75", "\53\75", "\55\75", "\52\75", 
"\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", "\76\76\76", "\76\76", "\76", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTI_LINE_COMMENT",
   "IN_JAVADOC_COMMENT",
   "IN_STRING_LITERAL",
   "IN_NAME_LITERAL",
   "IN_CPPCODE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, 3, -1, 0, 4, -1, 0, 5, -1, 0, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffff9225fL, 0xffffffffffffffffL, 0xffffffffff211fffL, 0xfffL, 
};
static final long[] jjtoSkip = {
   0x49480L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x24920L, 0x0L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[75];
private final int[] jjstateSet = new int[150];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public UnrealScriptParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public UnrealScriptParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 75; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 10)
         {
            jjmatchedKind = 10;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                  input_stream.backup(1);
         break;
      case 8 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 200 :
        image.append(jjstrLiteralImages[200]);
        lengthOfMatch = jjstrLiteralImages[200].length();
     matchedToken = Token.newToken(RUNSIGNEDSHIFT, ">");
     input_stream.backup(2);
         break;
      case 201 :
        image.append(jjstrLiteralImages[201]);
        lengthOfMatch = jjstrLiteralImages[201].length();
    matchedToken = Token.newToken(RSIGNEDSHIFT, ">");
    input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
